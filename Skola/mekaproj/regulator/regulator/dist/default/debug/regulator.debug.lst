

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 05 16:17:49 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     _ADCON0	set	4034
    42  0000                     _ADCON0bits	set	4034
    43  0000                     _ADCON1	set	4033
    44  0000                     _ADCON2	set	4032
    45  0000                     _ADRESH	set	4036
    46  0000                     _ADRESL	set	4035
    47  0000                     _ANSELA	set	3896
    48  0000                     _ANSELB	set	3897
    49  0000                     _ANSELC	set	3898
    50  0000                     _ANSELCbits	set	3898
    51  0000                     _BAUDCON1bits	set	4024
    52  0000                     _CCP5CON	set	3924
    53  0000                     _CCPR5L	set	3925
    54  0000                     _CCPTMRS1	set	3912
    55  0000                     _CM1CON0bits	set	3961
    56  0000                     _CM2CON1bits	set	3959
    57  0000                     _INTCON	set	4082
    58  0000                     _IPR1	set	3999
    59  0000                     _LATBbits	set	3978
    60  0000                     _LATCbits	set	3979
    61  0000                     _PIE1	set	3997
    62  0000                     _PIE1bits	set	3997
    63  0000                     _PIR1bits	set	3998
    64  0000                     _PORTAbits	set	3968
    65  0000                     _PORTCbits	set	3970
    66  0000                     _PR2	set	4027
    67  0000                     _RCSTAbits	set	4011
    68  0000                     _SPBRG1	set	4015
    69  0000                     _SPBRGH1	set	4016
    70  0000                     _T1CON	set	4045
    71  0000                     _T2CON	set	4026
    72  0000                     _TMR1H	set	4047
    73  0000                     _TMR1L	set	4046
    74  0000                     _TRISAbits	set	3986
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISBbits	set	3987
    77  0000                     _TRISCbits	set	3988
    78  0000                     _TXREG1	set	4013
    79  0000                     _TXSTAbits	set	4012
    80  0000                     _VREFCON0bits	set	3906
    81                           
    82                           	psect	smallconst
    83  000600                     __psmallconst:
    84                           	opt stack 0
    85  000600  00                 	db	0
    86  000601                     __stringdata:
    87                           	opt stack 0
    88  000601                     STR_6:
    89  000601  20                 	db	32
    90  000602  20                 	db	32
    91  000603  20                 	db	32
    92  000604  20                 	db	32
    93  000605  20                 	db	32
    94  000606  20                 	db	32
    95  000607  20                 	db	32
    96  000608  20                 	db	32
    97  000609  20                 	db	32
    98  00060A  20                 	db	32
    99  00060B  20                 	db	32
   100  00060C  20                 	db	32
   101  00060D  20                 	db	32
   102  00060E  20                 	db	32
   103  00060F  20                 	db	32
   104  000610  20                 	db	32
   105  000611  00                 	db	0
   106  000612                     STR_5:
   107  000612  4C                 	db	76	;'L'
   108  000613  6F                 	db	111	;'o'
   109  000614  77                 	db	119	;'w'
   110  000615  20                 	db	32
   111  000616  62                 	db	98	;'b'
   112  000617  61                 	db	97	;'a'
   113  000618  74                 	db	116	;'t'
   114  000619  74                 	db	116	;'t'
   115  00061A  65                 	db	101	;'e'
   116  00061B  72                 	db	114	;'r'
   117  00061C  79                 	db	121	;'y'
   118  00061D  20                 	db	32
   119  00061E  20                 	db	32
   120  00061F  20                 	db	32
   121  000620  20                 	db	32
   122  000621  20                 	db	32
   123  000622  00                 	db	0
   124  000623                     STR_1:
   125  000623  52                 	db	82	;'R'
   126  000624  41                 	db	65	;'A'
   127  000625  4D                 	db	77	;'M'
   128  000626  50                 	db	80	;'P'
   129  000627  41                 	db	65	;'A'
   130  000628  52                 	db	82	;'R'
   131  000629  00                 	db	0
   132  00062A                     STR_4:
   133  00062A  50                 	db	80	;'P'
   134  00062B  56                 	db	86	;'V'
   135  00062C  3A                 	db	58	;':'
   136  00062D  00                 	db	0
   137  00062E                     __end_of__stringdata:
   138                           	opt stack 0
   139                           
   140                           ; #config settings
   141  00062E  00                 	db	0	; dummy byte at the end
   142  0000                     
   143                           	psect	cinit
   144  0017A2                     __pcinit:
   145                           	opt stack 0
   146  0017A2                     start_initialization:
   147                           	opt stack 0
   148  0017A2                     __initialization:
   149                           	opt stack 0
   150                           
   151                           ; Clear objects allocated to BANK0 (14 bytes)
   152  0017A2  EE00  F074         	lfsr	0,__pbssBANK0
   153  0017A6  0E0E               	movlw	14
   154  0017A8                     clear_0:
   155  0017A8  6AEE               	clrf	postinc0,c
   156  0017AA  06E8               	decf	wreg,f,c
   157  0017AC  E1FD               	bnz	clear_0
   158                           
   159                           ; Clear objects allocated to COMRAM (14 bytes)
   160  0017AE  EE00  F03F         	lfsr	0,__pbssCOMRAM
   161  0017B2  0E0E               	movlw	14
   162  0017B4                     clear_1:
   163  0017B4  6AEE               	clrf	postinc0,c
   164  0017B6  06E8               	decf	wreg,f,c
   165  0017B8  E1FD               	bnz	clear_1
   166  0017BA                     end_of_initialization:
   167                           	opt stack 0
   168  0017BA                     __end_of__initialization:
   169                           	opt stack 0
   170  0017BA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   171  0017BC  6EF8               	movwf	tblptru,c
   172  0017BE  0E06               	movlw	high __Lsmallconst
   173  0017C0  6EF7               	movwf	tblptrh,c
   174  0017C2  0100               	movlb	0
   175  0017C4  EF18  F003         	goto	_main	;jump to C main() function
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           
   181                           	psect	bssCOMRAM
   182  00003F                     __pbssCOMRAM:
   183                           	opt stack 0
   184  00003F                     _ADC_HB:
   185                           	opt stack 0
   186  00003F                     	ds	2
   187  000041                     _ADC_LB:
   188                           	opt stack 0
   189  000041                     	ds	2
   190  000043                     _PWM_HB:
   191                           	opt stack 0
   192  000043                     	ds	2
   193  000045                     _PWM_LB:
   194                           	opt stack 0
   195  000045                     	ds	2
   196  000047                     _duty_cycle:
   197                           	opt stack 0
   198  000047                     	ds	2
   199  000049                     _channel:
   200                           	opt stack 0
   201  000049                     	ds	1
   202  00004A                     _raknare:
   203                           	opt stack 0
   204  00004A                     	ds	1
   205  00004B                     _sec:
   206                           	opt stack 0
   207  00004B                     	ds	1
   208  00004C                     _tiondel:
   209                           	opt stack 0
   210  00004C                     	ds	1
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssBANK0
   217  000074                     __pbssBANK0:
   218                           	opt stack 0
   219  000074                     _gammal_fel:
   220                           	opt stack 0
   221  000074                     	ds	3
   222  000077                     _gammal_pwmut:
   223                           	opt stack 0
   224  000077                     	ds	3
   225  00007A                     _pwmut:
   226                           	opt stack 0
   227  00007A                     	ds	3
   228  00007D                     _hr:
   229                           	opt stack 0
   230  00007D                     	ds	1
   231  00007E                     _min:
   232                           	opt stack 0
   233  00007E                     	ds	1
   234  00007F                     _fel:
   235                           	opt stack 0
   236  00007F                     	ds	3
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	cstackBANK0
   243  000060                     __pcstackBANK0:
   244                           	opt stack 0
   245  000060                     _main$1938:
   246                           	opt stack 0
   247                           
   248                           ; 3 bytes @ 0x0
   249  000060                     	ds	3
   250  000063                     main@b:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x3
   254  000063                     	ds	2
   255  000065                     main@SP:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x5
   259  000065                     	ds	2
   260  000067                     main@PV:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x7
   264  000067                     	ds	2
   265  000069                     main@count:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x9
   269  000069                     	ds	2
   270  00006B                     main@ar_varde:
   271                           	opt stack 0
   272                           
   273                           ; 3 bytes @ 0xB
   274  00006B                     	ds	3
   275  00006E                     main@bor_varde:
   276                           	opt stack 0
   277                           
   278                           ; 3 bytes @ 0xE
   279  00006E                     	ds	3
   280  000071                     main@bv:
   281                           	opt stack 0
   282                           
   283                           ; 3 bytes @ 0x11
   284  000071                     	ds	3
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           
   290                           	psect	cstackCOMRAM
   291  000001                     __pcstackCOMRAM:
   292                           	opt stack 0
   293  000001                     ??_isr:
   294  000001                     
   295                           ; 0 bytes @ 0x0
   296  000001                     	ds	14
   297  00000F                     ?_ADC_10bit:
   298                           	opt stack 0
   299  00000F                     ?___awdiv:
   300                           	opt stack 0
   301  00000F                     ?___awmod:
   302                           	opt stack 0
   303  00000F                     ?___lwdiv:
   304                           	opt stack 0
   305  00000F                     ?___lwmod:
   306                           	opt stack 0
   307  00000F                     ?___ftpack:
   308                           	opt stack 0
   309  00000F                     lcd_write@c:
   310                           	opt stack 0
   311  00000F                     ___awdiv@dividend:
   312                           	opt stack 0
   313  00000F                     ___awmod@dividend:
   314                           	opt stack 0
   315  00000F                     ___lwdiv@dividend:
   316                           	opt stack 0
   317  00000F                     ___lwmod@dividend:
   318                           	opt stack 0
   319  00000F                     ___ftpack@arg:
   320                           	opt stack 0
   321  00000F                     ___ftge@ff1:
   322                           	opt stack 0
   323                           
   324                           ; 3 bytes @ 0xE
   325  00000F                     	ds	1
   326  000010                     ??_lcd_clear:
   327  000010                     lcd_goto@pos:
   328                           	opt stack 0
   329  000010                     lcd_cmd@command:
   330                           	opt stack 0
   331  000010                     lcd_writesc@s:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0xF
   335  000010                     	ds	1
   336  000011                     ??_lcd_init:
   337  000011                     ??_ADC_10bit:
   338  000011                     ___awdiv@divisor:
   339                           	opt stack 0
   340  000011                     ___awmod@divisor:
   341                           	opt stack 0
   342  000011                     ___lwdiv@divisor:
   343                           	opt stack 0
   344  000011                     ___lwmod@divisor:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x10
   348  000011                     	ds	1
   349  000012                     ??_LOW_BATTERY:
   350  000012                     ___ftpack@exp:
   351                           	opt stack 0
   352  000012                     ___ftge@ff2:
   353                           	opt stack 0
   354                           
   355                           ; 3 bytes @ 0x11
   356  000012                     	ds	1
   357  000013                     ADC_10bit@channel:
   358                           	opt stack 0
   359  000013                     LOW_BATTERY@delayy:
   360                           	opt stack 0
   361  000013                     ___awdiv@counter:
   362                           	opt stack 0
   363  000013                     ___awmod@counter:
   364                           	opt stack 0
   365  000013                     ___ftpack@sign:
   366                           	opt stack 0
   367  000013                     ___lwmod@counter:
   368                           	opt stack 0
   369  000013                     ___lwdiv@quotient:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x12
   373  000013                     	ds	1
   374  000014                     ??___ftpack:
   375  000014                     ___awdiv@sign:
   376                           	opt stack 0
   377  000014                     ___awmod@sign:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x13
   381  000014                     	ds	1
   382  000015                     ??___ftge:
   383  000015                     ___lwdiv@counter:
   384                           	opt stack 0
   385  000015                     ___awdiv@quotient:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x14
   389  000015                     	ds	1
   390  000016                     show_values@SP:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x15
   394  000016                     	ds	1
   395  000017                     ?___ftdiv:
   396                           	opt stack 0
   397  000017                     ?___ftmul:
   398                           	opt stack 0
   399  000017                     ?___lwtoft:
   400                           	opt stack 0
   401  000017                     ___lwtoft@c:
   402                           	opt stack 0
   403  000017                     ___ftdiv@f1:
   404                           	opt stack 0
   405  000017                     ___ftmul@f1:
   406                           	opt stack 0
   407                           
   408                           ; 3 bytes @ 0x16
   409  000017                     	ds	1
   410  000018                     show_values@PV:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x17
   414  000018                     	ds	2
   415  00001A                     show_values@SP1:
   416                           	opt stack 0
   417  00001A                     ___ftdiv@f2:
   418                           	opt stack 0
   419  00001A                     ___ftmul@f2:
   420                           	opt stack 0
   421                           
   422                           ; 3 bytes @ 0x19
   423  00001A                     	ds	2
   424  00001C                     show_values@PV1:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x1B
   428  00001C                     	ds	1
   429  00001D                     ??___ftdiv:
   430  00001D                     ??___ftmul:
   431                           
   432                           ; 0 bytes @ 0x1C
   433  00001D                     	ds	3
   434  000020                     ___ftdiv@cntr:
   435                           	opt stack 0
   436  000020                     ___ftmul@exp:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1F
   440  000020                     	ds	1
   441  000021                     ___ftdiv@f3:
   442                           	opt stack 0
   443  000021                     ___ftmul@f3_as_product:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x20
   447  000021                     	ds	3
   448  000024                     ___ftdiv@exp:
   449                           	opt stack 0
   450  000024                     ___ftmul@cntr:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x23
   454  000024                     	ds	1
   455  000025                     ___ftdiv@sign:
   456                           	opt stack 0
   457  000025                     ___ftmul@sign:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x24
   461  000025                     	ds	1
   462  000026                     ?___ftneg:
   463                           	opt stack 0
   464  000026                     ?___fttol:
   465                           	opt stack 0
   466  000026                     ___ftneg@f1:
   467                           	opt stack 0
   468  000026                     ___fttol@f1:
   469                           	opt stack 0
   470                           
   471                           ; 3 bytes @ 0x25
   472  000026                     	ds	3
   473  000029                     ?___ftadd:
   474                           	opt stack 0
   475  000029                     ___ftadd@f1:
   476                           	opt stack 0
   477                           
   478                           ; 3 bytes @ 0x28
   479  000029                     	ds	1
   480  00002A                     ??___fttol:
   481                           
   482                           ; 0 bytes @ 0x29
   483  00002A                     	ds	2
   484  00002C                     ___ftadd@f2:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x2B
   488  00002C                     	ds	3
   489  00002F                     ??___ftadd:
   490  00002F                     ___fttol@sign1:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x2E
   494  00002F                     	ds	1
   495  000030                     ___fttol@lval:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x2F
   499  000030                     	ds	2
   500  000032                     ___ftadd@sign:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x31
   504  000032                     	ds	1
   505  000033                     ___ftadd@exp2:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x32
   509  000033                     	ds	1
   510  000034                     ___ftadd@exp1:
   511                           	opt stack 0
   512  000034                     ___fttol@exp1:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x33
   516  000034                     	ds	1
   517  000035                     ?___ftsub:
   518                           	opt stack 0
   519  000035                     PWM_OUT@duty_cycle:
   520                           	opt stack 0
   521  000035                     ___ftsub@f1:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x34
   525  000035                     	ds	2
   526  000037                     ??_PWM_OUT:
   527                           
   528                           ; 0 bytes @ 0x36
   529  000037                     	ds	1
   530  000038                     ___ftsub@f2:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x37
   534  000038                     	ds	3
   535  00003B                     ??_main:
   536                           
   537                           ; 0 bytes @ 0x3A
   538  00003B                     	ds	4
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544 ;;
   545 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   546 ;;
   547 ;; *************** function _main *****************
   548 ;; Defined at:
   549 ;;		line 36 in file "main.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;		None
   552 ;; Auto vars:     Size  Location     Type
   553 ;;  b               2    3[BANK0 ] int 
   554 ;;  bv              3   17[BANK0 ] float 
   555 ;;  bor_varde       3   14[BANK0 ] float 
   556 ;;  ar_varde        3   11[BANK0 ] float 
   557 ;;  count           2    9[BANK0 ] int 
   558 ;;  PV              2    7[BANK0 ] unsigned int 
   559 ;;  SP              2    5[BANK0 ] unsigned int 
   560 ;; Return value:  Size  Location     Type
   561 ;;		None               void
   562 ;; Registers used:
   563 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   569 ;;      Params:         0       0       0       0       0       0       0
   570 ;;      Locals:         0      20       0       0       0       0       0
   571 ;;      Temps:          4       0       0       0       0       0       0
   572 ;;      Totals:         4      20       0       0       0       0       0
   573 ;;Total ram usage:       24 bytes
   574 ;; Hardware stack levels required when called:    4
   575 ;; This function calls:
   576 ;;		_ADC_10bit
   577 ;;		_LOW_BATTERY
   578 ;;		_PWM_OUT
   579 ;;		_UART_INIT
   580 ;;		___ftadd
   581 ;;		___ftdiv
   582 ;;		___ftge
   583 ;;		___ftmul
   584 ;;		___ftneg
   585 ;;		___ftsub
   586 ;;		___fttol
   587 ;;		___lwtoft
   588 ;;		_init
   589 ;;		_lcd_goto
   590 ;;		_lcd_init
   591 ;;		_lcd_writesc
   592 ;;		_show_clock
   593 ;;		_show_values
   594 ;; This function is called by:
   595 ;;		Startup code after reset
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text0
   600  000630                     __ptext0:
   601                           	opt stack 0
   602  000630                     _main:
   603                           	opt stack 27
   604                           
   605                           ;incstack = 0
   606  000630  EC74  F00A         	call	_init	;wreg free
   607                           
   608                           ;main.c: 38: lcd_init();
   609  000634  EC32  F00A         	call	_lcd_init	;wreg free
   610                           
   611                           ;main.c: 39: UART_INIT();
   612  000638  EC09  F00C         	call	_UART_INIT	;wreg free
   613                           
   614                           ;main.c: 41: int count = 0;
   615  00063C  0E00               	movlw	0
   616  00063E  0100               	movlb	0	; () banked
   617  000640  6F6A               	movwf	(main@count+1)& (0+255),b
   618  000642  0E00               	movlw	0
   619  000644  0100               	movlb	0	; () banked
   620  000646  6F69               	movwf	main@count& (0+255),b
   621                           
   622                           ; BSR set to: 0
   623                           ;main.c: 47: unsigned int SP;
   624                           ;main.c: 48: unsigned int PV;
   625                           ;main.c: 49: float ar_varde;
   626                           ;main.c: 50: float bor_varde;
   627                           ;main.c: 51: float bv = 0;
   628  000648  0E00               	movlw	0
   629  00064A  0100               	movlb	0	; () banked
   630  00064C  6F71               	movwf	main@bv& (0+255),b
   631  00064E  0E00               	movlw	0
   632  000650  0100               	movlb	0	; () banked
   633  000652  6F72               	movwf	(main@bv+1)& (0+255),b
   634  000654  0E00               	movlw	0
   635  000656  0100               	movlb	0	; () banked
   636  000658  6F73               	movwf	(main@bv+2)& (0+255),b
   637  00065A                     l2273:
   638                           
   639                           ;main.c: 56: ar_varde = ADC_10bit(4);
   640  00065A  0E04               	movlw	4
   641  00065C  EC3E  F00B         	call	_ADC_10bit
   642  000660  C00F  F017         	movff	?_ADC_10bit,___lwtoft@c
   643  000664  C010  F018         	movff	?_ADC_10bit+1,___lwtoft@c+1
   644  000668  ECF7  F00B         	call	___lwtoft	;wreg free
   645  00066C  C017  F06B         	movff	?___lwtoft,main@ar_varde
   646  000670  C018  F06C         	movff	?___lwtoft+1,main@ar_varde+1
   647  000674  C019  F06D         	movff	?___lwtoft+2,main@ar_varde+2
   648                           
   649                           ;main.c: 57: bor_varde = ADC_10bit(0);
   650  000678  0E00               	movlw	0
   651  00067A  EC3E  F00B         	call	_ADC_10bit
   652  00067E  C00F  F017         	movff	?_ADC_10bit,___lwtoft@c
   653  000682  C010  F018         	movff	?_ADC_10bit+1,___lwtoft@c+1
   654  000686  ECF7  F00B         	call	___lwtoft	;wreg free
   655  00068A  C017  F06E         	movff	?___lwtoft,main@bor_varde
   656  00068E  C018  F06F         	movff	?___lwtoft+1,main@bor_varde+1
   657  000692  C019  F070         	movff	?___lwtoft+2,main@bor_varde+2
   658                           
   659                           ;main.c: 59: if(PORTCbits.RC2){
   660  000696  A482               	btfss	3970,2,c	;volatile
   661  000698  D146               	goto	l2313
   662                           
   663                           ;main.c: 60: SP = bv * (99./1023);
   664  00069A  0E32               	movlw	50
   665  00069C  6E1A               	movwf	___ftmul@f2,c
   666  00069E  0EC6               	movlw	198
   667  0006A0  6E1B               	movwf	___ftmul@f2+1,c
   668  0006A2  0E3D               	movlw	61
   669  0006A4  6E1C               	movwf	___ftmul@f2+2,c
   670  0006A6  C071  F017         	movff	main@bv,___ftmul@f1
   671  0006AA  C072  F018         	movff	main@bv+1,___ftmul@f1+1
   672  0006AE  C073  F019         	movff	main@bv+2,___ftmul@f1+2
   673  0006B2  EC5B  F007         	call	___ftmul	;wreg free
   674  0006B6  C017  F026         	movff	?___ftmul,___fttol@f1
   675  0006BA  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
   676  0006BE  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
   677  0006C2  ECE0  F006         	call	___fttol	;wreg free
   678  0006C6  C026  F03B         	movff	?___fttol,??_main
   679  0006CA  C027  F03C         	movff	?___fttol+1,??_main+1
   680  0006CE  C028  F03D         	movff	?___fttol+2,??_main+2
   681  0006D2  C029  F03E         	movff	?___fttol+3,??_main+3
   682  0006D6  C03B  F065         	movff	??_main,main@SP
   683  0006DA  C03C  F066         	movff	??_main+1,main@SP+1
   684                           
   685                           ;main.c: 61: PV = ar_varde * (99./1023);
   686  0006DE  0E32               	movlw	50
   687  0006E0  6E1A               	movwf	___ftmul@f2,c
   688  0006E2  0EC6               	movlw	198
   689  0006E4  6E1B               	movwf	___ftmul@f2+1,c
   690  0006E6  0E3D               	movlw	61
   691  0006E8  6E1C               	movwf	___ftmul@f2+2,c
   692  0006EA  C06B  F017         	movff	main@ar_varde,___ftmul@f1
   693  0006EE  C06C  F018         	movff	main@ar_varde+1,___ftmul@f1+1
   694  0006F2  C06D  F019         	movff	main@ar_varde+2,___ftmul@f1+2
   695  0006F6  EC5B  F007         	call	___ftmul	;wreg free
   696  0006FA  C017  F026         	movff	?___ftmul,___fttol@f1
   697  0006FE  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
   698  000702  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
   699  000706  ECE0  F006         	call	___fttol	;wreg free
   700  00070A  C026  F03B         	movff	?___fttol,??_main
   701  00070E  C027  F03C         	movff	?___fttol+1,??_main+1
   702  000712  C028  F03D         	movff	?___fttol+2,??_main+2
   703  000716  C029  F03E         	movff	?___fttol+3,??_main+3
   704  00071A  C03B  F067         	movff	??_main,main@PV
   705  00071E  C03C  F068         	movff	??_main+1,main@PV+1
   706                           
   707                           ;main.c: 63: fel = bv - (ar_varde);
   708  000722  C06B  F026         	movff	main@ar_varde,___ftneg@f1
   709  000726  C06C  F027         	movff	main@ar_varde+1,___ftneg@f1+1
   710  00072A  C06D  F028         	movff	main@ar_varde+2,___ftneg@f1+2
   711  00072E  ECE4  F00B         	call	___ftneg	;wreg free
   712  000732  C026  F029         	movff	?___ftneg,___ftadd@f1
   713  000736  C027  F02A         	movff	?___ftneg+1,___ftadd@f1+1
   714  00073A  C028  F02B         	movff	?___ftneg+2,___ftadd@f1+2
   715  00073E  C071  F02C         	movff	main@bv,___ftadd@f2
   716  000742  C072  F02D         	movff	main@bv+1,___ftadd@f2+1
   717  000746  C073  F02E         	movff	main@bv+2,___ftadd@f2+2
   718  00074A  EC0A  F006         	call	___ftadd	;wreg free
   719  00074E  C029  F07F         	movff	?___ftadd,_fel
   720  000752  C02A  F080         	movff	?___ftadd+1,_fel+1
   721  000756  C02B  F081         	movff	?___ftadd+2,_fel+2
   722                           
   723                           ;main.c: 65: if((bv/1)!=(bor_varde/1)){
   724  00075A  C071  F017         	movff	main@bv,___ftdiv@f1
   725  00075E  C072  F018         	movff	main@bv+1,___ftdiv@f1+1
   726  000762  C073  F019         	movff	main@bv+2,___ftdiv@f1+2
   727  000766  0E00               	movlw	0
   728  000768  6E1A               	movwf	___ftdiv@f2,c
   729  00076A  0E80               	movlw	128
   730  00076C  6E1B               	movwf	___ftdiv@f2+1,c
   731  00076E  0E3F               	movlw	63
   732  000770  6E1C               	movwf	___ftdiv@f2+2,c
   733  000772  ECD3  F007         	call	___ftdiv	;wreg free
   734  000776  C017  F03B         	movff	?___ftdiv,??_main
   735  00077A  C018  F03C         	movff	?___ftdiv+1,??_main+1
   736  00077E  C019  F03D         	movff	?___ftdiv+2,??_main+2
   737  000782  C06E  F017         	movff	main@bor_varde,___ftdiv@f1
   738  000786  C06F  F018         	movff	main@bor_varde+1,___ftdiv@f1+1
   739  00078A  C070  F019         	movff	main@bor_varde+2,___ftdiv@f1+2
   740  00078E  0E00               	movlw	0
   741  000790  6E1A               	movwf	___ftdiv@f2,c
   742  000792  0E80               	movlw	128
   743  000794  6E1B               	movwf	___ftdiv@f2+1,c
   744  000796  0E3F               	movlw	63
   745  000798  6E1C               	movwf	___ftdiv@f2+2,c
   746  00079A  ECD3  F007         	call	___ftdiv	;wreg free
   747  00079E  5019               	movf	?___ftdiv+2,w,c
   748  0007A0  183D               	xorwf	??_main+2,w,c
   749  0007A2  E105               	bnz	u1945
   750  0007A4  5018               	movf	?___ftdiv+1,w,c
   751  0007A6  183C               	xorwf	??_main+1,w,c
   752  0007A8  E102               	bnz	u1945
   753  0007AA  5017               	movf	?___ftdiv,w,c
   754  0007AC  183B               	xorwf	??_main,w,c
   755  0007AE                     u1945:
   756  0007AE  B4D8               	btfsc	status,2,c
   757  0007B0  D009               	goto	l2285
   758                           
   759                           ;main.c: 66: lcd_goto(0x00);
   760  0007B2  0E00               	movlw	0
   761  0007B4  EC26  F00C         	call	_lcd_goto
   762                           
   763                           ;main.c: 67: lcd_writesc("RAMPAR");
   764  0007B8  0E06               	movlw	high STR_1
   765  0007BA  6E11               	movwf	lcd_writesc@s+1,c
   766  0007BC  0E23               	movlw	low STR_1
   767  0007BE  6E10               	movwf	lcd_writesc@s,c
   768  0007C0  ECBC  F00B         	call	_lcd_writesc	;wreg free
   769  0007C4                     l2285:
   770                           
   771                           ;main.c: 68: }
   772                           ;main.c: 70: if(count < 2){
   773  0007C4  0100               	movlb	0	; () banked
   774  0007C6  516A               	movf	(main@count+1)& (0+255),w,b
   775  0007C8  0A80               	xorlw	128
   776  0007CA  6EF3               	movwf	prodl,c
   777  0007CC  0E80               	movlw	128
   778  0007CE  5CF3               	subwf	prodl,w,c
   779  0007D0  0E02               	movlw	2
   780  0007D2  B4D8               	btfsc	status,2,c
   781  0007D4  5D69               	subwf	main@count& (0+255),w,b
   782  0007D6  B0D8               	btfsc	status,0,c
   783  0007D8  D003               	goto	l2289
   784                           
   785                           ; BSR set to: 0
   786                           ;main.c: 71: count++;
   787  0007DA  0100               	movlb	0	; () banked
   788  0007DC  4B69               	infsnz	main@count& (0+255),f,b
   789  0007DE  2B6A               	incf	(main@count+1)& (0+255),f,b
   790  0007E0                     l2289:
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 72: }
   794                           ;main.c: 74: if((count == 2) && (bv < bor_varde)){
   795  0007E0  0100               	movlb	0	; () banked
   796  0007E2  5169               	movf	main@count& (0+255),w,b
   797  0007E4  0A02               	xorlw	2
   798  0007E6  116A               	iorwf	(main@count+1)& (0+255),w,b
   799  0007E8  A4D8               	btfss	status,2,c
   800  0007EA  D03C               	goto	l2297
   801                           
   802                           ; BSR set to: 0
   803  0007EC  C071  F00F         	movff	main@bv,___ftge@ff1
   804  0007F0  C072  F010         	movff	main@bv+1,___ftge@ff1+1
   805  0007F4  C073  F011         	movff	main@bv+2,___ftge@ff1+2
   806  0007F8  C06E  F012         	movff	main@bor_varde,___ftge@ff2
   807  0007FC  C06F  F013         	movff	main@bor_varde+1,___ftge@ff2+1
   808  000800  C070  F014         	movff	main@bor_varde+2,___ftge@ff2+2
   809  000804  ECEA  F009         	call	___ftge	;wreg free
   810  000808  B0D8               	btfsc	status,0,c
   811  00080A  D02C               	goto	l2297
   812                           
   813                           ;main.c: 75: bv += 10;
   814  00080C  C071  F029         	movff	main@bv,___ftadd@f1
   815  000810  C072  F02A         	movff	main@bv+1,___ftadd@f1+1
   816  000814  C073  F02B         	movff	main@bv+2,___ftadd@f1+2
   817  000818  0E00               	movlw	0
   818  00081A  6E2C               	movwf	___ftadd@f2,c
   819  00081C  0E20               	movlw	32
   820  00081E  6E2D               	movwf	___ftadd@f2+1,c
   821  000820  0E41               	movlw	65
   822  000822  6E2E               	movwf	___ftadd@f2+2,c
   823  000824  EC0A  F006         	call	___ftadd	;wreg free
   824  000828  C029  F071         	movff	?___ftadd,main@bv
   825  00082C  C02A  F072         	movff	?___ftadd+1,main@bv+1
   826  000830  C02B  F073         	movff	?___ftadd+2,main@bv+2
   827                           
   828                           ;main.c: 76: if(bv > 1023){
   829  000834  0EC0               	movlw	192
   830  000836  6E0F               	movwf	___ftge@ff1,c
   831  000838  0E7F               	movlw	127
   832  00083A  6E10               	movwf	___ftge@ff1+1,c
   833  00083C  0E44               	movlw	68
   834  00083E  6E11               	movwf	___ftge@ff1+2,c
   835  000840  C071  F012         	movff	main@bv,___ftge@ff2
   836  000844  C072  F013         	movff	main@bv+1,___ftge@ff2+1
   837  000848  C073  F014         	movff	main@bv+2,___ftge@ff2+2
   838  00084C  ECEA  F009         	call	___ftge	;wreg free
   839  000850  B0D8               	btfsc	status,0,c
   840  000852  D063               	goto	l143
   841                           
   842                           ;main.c: 77: bv = 1023;
   843  000854  0EC0               	movlw	192
   844  000856  0100               	movlb	0	; () banked
   845  000858  6F71               	movwf	main@bv& (0+255),b
   846  00085A  0E7F               	movlw	127
   847  00085C  0100               	movlb	0	; () banked
   848  00085E  6F72               	movwf	(main@bv+1)& (0+255),b
   849  000860  0E44               	movlw	68
   850  000862  D059               	goto	L1
   851  000864                     l2297:
   852                           
   853                           ;main.c: 81: else if (bv==bor_varde){
   854  000864  0100               	movlb	0	; () banked
   855  000866  5170               	movf	(main@bor_varde+2)& (0+255),w,b
   856  000868  0100               	movlb	0	; () banked
   857  00086A  1973               	xorwf	(main@bv+2)& (0+255),w,b
   858  00086C  E109               	bnz	u1995
   859  00086E  0100               	movlb	0	; () banked
   860  000870  516F               	movf	(main@bor_varde+1)& (0+255),w,b
   861  000872  0100               	movlb	0	; () banked
   862  000874  1972               	xorwf	(main@bv+1)& (0+255),w,b
   863  000876  E104               	bnz	u1995
   864  000878  0100               	movlb	0	; () banked
   865  00087A  516E               	movf	main@bor_varde& (0+255),w,b
   866  00087C  0100               	movlb	0	; () banked
   867  00087E  1971               	xorwf	main@bv& (0+255),w,b
   868  000880                     u1995:
   869  000880  A4D8               	btfss	status,2,c
   870  000882  D00A               	goto	l2303
   871                           
   872                           ; BSR set to: 0
   873                           ;main.c: 82: lcd_goto(0x00);
   874  000884  0E00               	movlw	0
   875  000886  EC26  F00C         	call	_lcd_goto
   876                           
   877                           ;main.c: 83: lcd_writesc("      ");
   878  00088A  0E06               	movlw	high (STR_6+10)
   879  00088C  6E11               	movwf	lcd_writesc@s+1,c
   880  00088E  0E0B               	movlw	low (STR_6+10)
   881  000890  6E10               	movwf	lcd_writesc@s,c
   882  000892  ECBC  F00B         	call	_lcd_writesc	;wreg free
   883                           
   884                           ;main.c: 84: }
   885  000896  D047               	goto	l2313
   886  000898                     l2303:
   887                           
   888                           ;main.c: 86: else if((count == 2) && (bv > bor_varde)){
   889  000898  0100               	movlb	0	; () banked
   890  00089A  5169               	movf	main@count& (0+255),w,b
   891  00089C  0A02               	xorlw	2
   892  00089E  116A               	iorwf	(main@count+1)& (0+255),w,b
   893  0008A0  A4D8               	btfss	status,2,c
   894  0008A2  D041               	goto	l2313
   895                           
   896                           ; BSR set to: 0
   897  0008A4  C06E  F00F         	movff	main@bor_varde,___ftge@ff1
   898  0008A8  C06F  F010         	movff	main@bor_varde+1,___ftge@ff1+1
   899  0008AC  C070  F011         	movff	main@bor_varde+2,___ftge@ff1+2
   900  0008B0  C071  F012         	movff	main@bv,___ftge@ff2
   901  0008B4  C072  F013         	movff	main@bv+1,___ftge@ff2+1
   902  0008B8  C073  F014         	movff	main@bv+2,___ftge@ff2+2
   903  0008BC  ECEA  F009         	call	___ftge	;wreg free
   904  0008C0  B0D8               	btfsc	status,0,c
   905  0008C2  D031               	goto	l2313
   906                           
   907                           ;main.c: 87: bv -= 10;
   908  0008C4  C071  F035         	movff	main@bv,___ftsub@f1
   909  0008C8  C072  F036         	movff	main@bv+1,___ftsub@f1+1
   910  0008CC  C073  F037         	movff	main@bv+2,___ftsub@f1+2
   911  0008D0  0E00               	movlw	0
   912  0008D2  6E38               	movwf	___ftsub@f2,c
   913  0008D4  0E20               	movlw	32
   914  0008D6  6E39               	movwf	___ftsub@f2+1,c
   915  0008D8  0E41               	movlw	65
   916  0008DA  6E3A               	movwf	___ftsub@f2+2,c
   917  0008DC  ECA1  F00B         	call	___ftsub	;wreg free
   918  0008E0  C035  F071         	movff	?___ftsub,main@bv
   919  0008E4  C036  F072         	movff	?___ftsub+1,main@bv+1
   920  0008E8  C037  F073         	movff	?___ftsub+2,main@bv+2
   921                           
   922                           ;main.c: 88: if(bv < 0){
   923  0008EC  0100               	movlb	0	; () banked
   924  0008EE  5173               	movf	(main@bv+2)& (0+255),w,b
   925  0008F0  0A80               	xorlw	128
   926  0008F2  0F80               	addlw	128
   927  0008F4  E107               	bnz	u2025
   928  0008F6  0E00               	movlw	0
   929  0008F8  0100               	movlb	0	; () banked
   930  0008FA  5D72               	subwf	(main@bv+1)& (0+255),w,b
   931  0008FC  E103               	bnz	u2025
   932  0008FE  0E00               	movlw	0
   933  000900  0100               	movlb	0	; () banked
   934  000902  5D71               	subwf	main@bv& (0+255),w,b
   935  000904                     u2025:
   936  000904  B0D8               	btfsc	status,0,c
   937  000906  D009               	goto	l143
   938                           
   939                           ; BSR set to: 0
   940                           ;main.c: 89: bv = 0;
   941  000908  0E00               	movlw	0
   942  00090A  0100               	movlb	0	; () banked
   943  00090C  6F71               	movwf	main@bv& (0+255),b
   944  00090E  0E00               	movlw	0
   945  000910  0100               	movlb	0	; () banked
   946  000912  6F72               	movwf	(main@bv+1)& (0+255),b
   947  000914  0E00               	movlw	0
   948  000916                     L1:
   949  000916  0100               	movlb	0	; () banked
   950  000918  6F73               	movwf	(main@bv+2)& (0+255),b
   951  00091A                     l143:
   952                           
   953                           ; BSR set to: 0
   954                           ;main.c: 90: }
   955                           ;main.c: 91: count = 0;
   956  00091A  0E00               	movlw	0
   957  00091C  0100               	movlb	0	; () banked
   958  00091E  6F6A               	movwf	(main@count+1)& (0+255),b
   959  000920  0E00               	movlw	0
   960  000922  0100               	movlb	0	; () banked
   961  000924  6F69               	movwf	main@count& (0+255),b
   962  000926                     l2313:
   963                           
   964                           ;main.c: 93: }
   965                           ;main.c: 95: }
   966                           ;main.c: 97: if(!PORTCbits.RC2){
   967  000926  B482               	btfsc	3970,2,c	;volatile
   968  000928  D06F               	goto	l2327
   969                           
   970                           ;main.c: 98: lcd_goto(0x00);
   971  00092A  0E00               	movlw	0
   972  00092C  EC26  F00C         	call	_lcd_goto
   973                           
   974                           ;main.c: 99: lcd_writesc("      ");
   975  000930  0E06               	movlw	high (STR_6+10)
   976  000932  6E11               	movwf	lcd_writesc@s+1,c
   977  000934  0E0B               	movlw	low (STR_6+10)
   978  000936  6E10               	movwf	lcd_writesc@s,c
   979  000938  ECBC  F00B         	call	_lcd_writesc	;wreg free
   980                           
   981                           ;main.c: 100: SP = bor_varde * (99./1023);
   982  00093C  0E32               	movlw	50
   983  00093E  6E1A               	movwf	___ftmul@f2,c
   984  000940  0EC6               	movlw	198
   985  000942  6E1B               	movwf	___ftmul@f2+1,c
   986  000944  0E3D               	movlw	61
   987  000946  6E1C               	movwf	___ftmul@f2+2,c
   988  000948  C06E  F017         	movff	main@bor_varde,___ftmul@f1
   989  00094C  C06F  F018         	movff	main@bor_varde+1,___ftmul@f1+1
   990  000950  C070  F019         	movff	main@bor_varde+2,___ftmul@f1+2
   991  000954  EC5B  F007         	call	___ftmul	;wreg free
   992  000958  C017  F026         	movff	?___ftmul,___fttol@f1
   993  00095C  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
   994  000960  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
   995  000964  ECE0  F006         	call	___fttol	;wreg free
   996  000968  C026  F03B         	movff	?___fttol,??_main
   997  00096C  C027  F03C         	movff	?___fttol+1,??_main+1
   998  000970  C028  F03D         	movff	?___fttol+2,??_main+2
   999  000974  C029  F03E         	movff	?___fttol+3,??_main+3
  1000  000978  C03B  F065         	movff	??_main,main@SP
  1001  00097C  C03C  F066         	movff	??_main+1,main@SP+1
  1002                           
  1003                           ;main.c: 101: PV = ar_varde * (99./1023);
  1004  000980  0E32               	movlw	50
  1005  000982  6E1A               	movwf	___ftmul@f2,c
  1006  000984  0EC6               	movlw	198
  1007  000986  6E1B               	movwf	___ftmul@f2+1,c
  1008  000988  0E3D               	movlw	61
  1009  00098A  6E1C               	movwf	___ftmul@f2+2,c
  1010  00098C  C06B  F017         	movff	main@ar_varde,___ftmul@f1
  1011  000990  C06C  F018         	movff	main@ar_varde+1,___ftmul@f1+1
  1012  000994  C06D  F019         	movff	main@ar_varde+2,___ftmul@f1+2
  1013  000998  EC5B  F007         	call	___ftmul	;wreg free
  1014  00099C  C017  F026         	movff	?___ftmul,___fttol@f1
  1015  0009A0  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
  1016  0009A4  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
  1017  0009A8  ECE0  F006         	call	___fttol	;wreg free
  1018  0009AC  C026  F03B         	movff	?___fttol,??_main
  1019  0009B0  C027  F03C         	movff	?___fttol+1,??_main+1
  1020  0009B4  C028  F03D         	movff	?___fttol+2,??_main+2
  1021  0009B8  C029  F03E         	movff	?___fttol+3,??_main+3
  1022  0009BC  C03B  F067         	movff	??_main,main@PV
  1023  0009C0  C03C  F068         	movff	??_main+1,main@PV+1
  1024                           
  1025                           ;main.c: 102: fel = bor_varde - (ar_varde) ;
  1026  0009C4  C06B  F026         	movff	main@ar_varde,___ftneg@f1
  1027  0009C8  C06C  F027         	movff	main@ar_varde+1,___ftneg@f1+1
  1028  0009CC  C06D  F028         	movff	main@ar_varde+2,___ftneg@f1+2
  1029  0009D0  ECE4  F00B         	call	___ftneg	;wreg free
  1030  0009D4  C026  F029         	movff	?___ftneg,___ftadd@f1
  1031  0009D8  C027  F02A         	movff	?___ftneg+1,___ftadd@f1+1
  1032  0009DC  C028  F02B         	movff	?___ftneg+2,___ftadd@f1+2
  1033  0009E0  C06E  F02C         	movff	main@bor_varde,___ftadd@f2
  1034  0009E4  C06F  F02D         	movff	main@bor_varde+1,___ftadd@f2+1
  1035  0009E8  C070  F02E         	movff	main@bor_varde+2,___ftadd@f2+2
  1036  0009EC  EC0A  F006         	call	___ftadd	;wreg free
  1037  0009F0  C029  F07F         	movff	?___ftadd,_fel
  1038  0009F4  C02A  F080         	movff	?___ftadd+1,_fel+1
  1039  0009F8  C02B  F081         	movff	?___ftadd+2,_fel+2
  1040                           
  1041                           ;main.c: 103: bv = ar_varde;
  1042  0009FC  C06B  F071         	movff	main@ar_varde,main@bv
  1043  000A00  C06C  F072         	movff	main@ar_varde+1,main@bv+1
  1044  000A04  C06D  F073         	movff	main@ar_varde+2,main@bv+2
  1045  000A08                     l2327:
  1046                           
  1047                           ;main.c: 104: }
  1048                           ;main.c: 105: int b = (ADC_10bit(4)>>2);
  1049  000A08  0E04               	movlw	4
  1050  000A0A  EC3E  F00B         	call	_ADC_10bit
  1051  000A0E  90D8               	bcf	status,0,c
  1052  000A10  3210               	rrcf	?_ADC_10bit+1,f,c
  1053  000A12  320F               	rrcf	?_ADC_10bit,f,c
  1054  000A14  90D8               	bcf	status,0,c
  1055  000A16  3210               	rrcf	?_ADC_10bit+1,f,c
  1056  000A18  320F               	rrcf	?_ADC_10bit,f,c
  1057  000A1A  C00F  F063         	movff	?_ADC_10bit,main@b
  1058  000A1E  C010  F064         	movff	?_ADC_10bit+1,main@b+1
  1059                           
  1060                           ;main.c: 106: TXREG1 = b;
  1061  000A22  C063  FFAD         	movff	main@b,4013	;volatile
  1062                           
  1063                           ;main.c: 107: show_values(SP,PV);
  1064  000A26  C065  F016         	movff	main@SP,show_values@SP
  1065  000A2A  C066  F017         	movff	main@SP+1,show_values@SP+1
  1066  000A2E  C067  F018         	movff	main@PV,show_values@PV
  1067  000A32  C068  F019         	movff	main@PV+1,show_values@PV+1
  1068  000A36  EC44  F008         	call	_show_values	;wreg free
  1069                           
  1070                           ;main.c: 108: show_clock();
  1071  000A3A  ECA0  F008         	call	_show_clock	;wreg free
  1072                           
  1073                           ;main.c: 109: LOW_BATTERY();
  1074  000A3E  ECE6  F00A         	call	_LOW_BATTERY	;wreg free
  1075                           
  1076                           ;main.c: 112: pwmut = (4.820924223288709*fel) - (4.671075776711291*gammal_fel) + gammal_
      +                          pwmut;
  1077  000A42  0E79               	movlw	121
  1078  000A44  6E1A               	movwf	___ftmul@f2,c
  1079  000A46  0E95               	movlw	149
  1080  000A48  6E1B               	movwf	___ftmul@f2+1,c
  1081  000A4A  0E40               	movlw	64
  1082  000A4C  6E1C               	movwf	___ftmul@f2+2,c
  1083  000A4E  C074  F017         	movff	_gammal_fel,___ftmul@f1
  1084  000A52  C075  F018         	movff	_gammal_fel+1,___ftmul@f1+1
  1085  000A56  C076  F019         	movff	_gammal_fel+2,___ftmul@f1+2
  1086  000A5A  EC5B  F007         	call	___ftmul	;wreg free
  1087  000A5E  C017  F026         	movff	?___ftmul,___ftneg@f1
  1088  000A62  C018  F027         	movff	?___ftmul+1,___ftneg@f1+1
  1089  000A66  C019  F028         	movff	?___ftmul+2,___ftneg@f1+2
  1090  000A6A  ECE4  F00B         	call	___ftneg	;wreg free
  1091  000A6E  C026  F02C         	movff	?___ftneg,___ftadd@f2
  1092  000A72  C027  F02D         	movff	?___ftneg+1,___ftadd@f2+1
  1093  000A76  C028  F02E         	movff	?___ftneg+2,___ftadd@f2+2
  1094  000A7A  0E45               	movlw	69
  1095  000A7C  6E1A               	movwf	___ftmul@f2,c
  1096  000A7E  0E9A               	movlw	154
  1097  000A80  6E1B               	movwf	___ftmul@f2+1,c
  1098  000A82  0E40               	movlw	64
  1099  000A84  6E1C               	movwf	___ftmul@f2+2,c
  1100  000A86  C07F  F017         	movff	_fel,___ftmul@f1
  1101  000A8A  C080  F018         	movff	_fel+1,___ftmul@f1+1
  1102  000A8E  C081  F019         	movff	_fel+2,___ftmul@f1+2
  1103  000A92  EC5B  F007         	call	___ftmul	;wreg free
  1104  000A96  C017  F029         	movff	?___ftmul,___ftadd@f1
  1105  000A9A  C018  F02A         	movff	?___ftmul+1,___ftadd@f1+1
  1106  000A9E  C019  F02B         	movff	?___ftmul+2,___ftadd@f1+2
  1107  000AA2  EC0A  F006         	call	___ftadd	;wreg free
  1108  000AA6  C029  F060         	movff	?___ftadd,_main$1938
  1109  000AAA  C02A  F061         	movff	?___ftadd+1,_main$1938+1
  1110  000AAE  C02B  F062         	movff	?___ftadd+2,_main$1938+2
  1111                           
  1112                           ;main.c: 112: pwmut = (4.820924223288709*fel) - (4.671075776711291*gammal_fel) + gammal_
      +                          pwmut;
  1113  000AB2  C060  F029         	movff	_main$1938,___ftadd@f1
  1114  000AB6  C061  F02A         	movff	_main$1938+1,___ftadd@f1+1
  1115  000ABA  C062  F02B         	movff	_main$1938+2,___ftadd@f1+2
  1116  000ABE  C077  F02C         	movff	_gammal_pwmut,___ftadd@f2
  1117  000AC2  C078  F02D         	movff	_gammal_pwmut+1,___ftadd@f2+1
  1118  000AC6  C079  F02E         	movff	_gammal_pwmut+2,___ftadd@f2+2
  1119  000ACA  EC0A  F006         	call	___ftadd	;wreg free
  1120  000ACE  C029  F07A         	movff	?___ftadd,_pwmut
  1121  000AD2  C02A  F07B         	movff	?___ftadd+1,_pwmut+1
  1122  000AD6  C02B  F07C         	movff	?___ftadd+2,_pwmut+2
  1123                           
  1124                           ;main.c: 114: if(pwmut >= 1023.00){
  1125  000ADA  C07A  F00F         	movff	_pwmut,___ftge@ff1
  1126  000ADE  C07B  F010         	movff	_pwmut+1,___ftge@ff1+1
  1127  000AE2  C07C  F011         	movff	_pwmut+2,___ftge@ff1+2
  1128  000AE6  0EC0               	movlw	192
  1129  000AE8  6E12               	movwf	___ftge@ff2,c
  1130  000AEA  0E7F               	movlw	127
  1131  000AEC  6E13               	movwf	___ftge@ff2+1,c
  1132  000AEE  0E44               	movlw	68
  1133  000AF0  6E14               	movwf	___ftge@ff2+2,c
  1134  000AF2  ECEA  F009         	call	___ftge	;wreg free
  1135  000AF6  A0D8               	btfss	status,0,c
  1136  000AF8  D009               	goto	l2345
  1137                           
  1138                           ;main.c: 115: pwmut = 1023.00;
  1139  000AFA  0EC0               	movlw	192
  1140  000AFC  0100               	movlb	0	; () banked
  1141  000AFE  6F7A               	movwf	_pwmut& (0+255),b
  1142  000B00  0E7F               	movlw	127
  1143  000B02  0100               	movlb	0	; () banked
  1144  000B04  6F7B               	movwf	(_pwmut+1)& (0+255),b
  1145  000B06  0E44               	movlw	68
  1146  000B08  0100               	movlb	0	; () banked
  1147  000B0A  6F7C               	movwf	(_pwmut+2)& (0+255),b
  1148  000B0C                     l2345:
  1149                           
  1150                           ;main.c: 117: }
  1151                           ;main.c: 118: if(pwmut <= 0.00){
  1152  000B0C  0E00               	movlw	0
  1153  000B0E  6E0F               	movwf	___ftge@ff1,c
  1154  000B10  0E00               	movlw	0
  1155  000B12  6E10               	movwf	___ftge@ff1+1,c
  1156  000B14  0E00               	movlw	0
  1157  000B16  6E11               	movwf	___ftge@ff1+2,c
  1158  000B18  C07A  F012         	movff	_pwmut,___ftge@ff2
  1159  000B1C  C07B  F013         	movff	_pwmut+1,___ftge@ff2+1
  1160  000B20  C07C  F014         	movff	_pwmut+2,___ftge@ff2+2
  1161  000B24  ECEA  F009         	call	___ftge	;wreg free
  1162  000B28  A0D8               	btfss	status,0,c
  1163  000B2A  D009               	goto	l2349
  1164                           
  1165                           ;main.c: 119: pwmut = 0.00;
  1166  000B2C  0E00               	movlw	0
  1167  000B2E  0100               	movlb	0	; () banked
  1168  000B30  6F7A               	movwf	_pwmut& (0+255),b
  1169  000B32  0E00               	movlw	0
  1170  000B34  0100               	movlb	0	; () banked
  1171  000B36  6F7B               	movwf	(_pwmut+1)& (0+255),b
  1172  000B38  0E00               	movlw	0
  1173  000B3A  0100               	movlb	0	; () banked
  1174  000B3C  6F7C               	movwf	(_pwmut+2)& (0+255),b
  1175  000B3E                     l2349:
  1176                           
  1177                           ;main.c: 121: }
  1178                           ;main.c: 124: PWM_OUT(pwmut);
  1179  000B3E  C07A  F026         	movff	_pwmut,___fttol@f1
  1180  000B42  C07B  F027         	movff	_pwmut+1,___fttol@f1+1
  1181  000B46  C07C  F028         	movff	_pwmut+2,___fttol@f1+2
  1182  000B4A  ECE0  F006         	call	___fttol	;wreg free
  1183  000B4E  C026  F03B         	movff	?___fttol,??_main
  1184  000B52  C027  F03C         	movff	?___fttol+1,??_main+1
  1185  000B56  C028  F03D         	movff	?___fttol+2,??_main+2
  1186  000B5A  C029  F03E         	movff	?___fttol+3,??_main+3
  1187  000B5E  C03B  F035         	movff	??_main,PWM_OUT@duty_cycle
  1188  000B62  C03C  F036         	movff	??_main+1,PWM_OUT@duty_cycle+1
  1189  000B66  EC81  F00B         	call	_PWM_OUT	;wreg free
  1190                           
  1191                           ;main.c: 125: gammal_fel = fel;
  1192  000B6A  C07F  F074         	movff	_fel,_gammal_fel
  1193  000B6E  C080  F075         	movff	_fel+1,_gammal_fel+1
  1194  000B72  C081  F076         	movff	_fel+2,_gammal_fel+2
  1195                           
  1196                           ;main.c: 126: gammal_pwmut = pwmut;
  1197  000B76  C07A  F077         	movff	_pwmut,_gammal_pwmut
  1198  000B7A  C07B  F078         	movff	_pwmut+1,_gammal_pwmut+1
  1199  000B7E  C07C  F079         	movff	_pwmut+2,_gammal_pwmut+2
  1200                           
  1201                           ;main.c: 128: _delay((unsigned long)((100)*(4000000/4000.0)));
  1202  000B82  0E82               	movlw	130
  1203  000B84  6E3B               	movwf	??_main& (0+255),c
  1204  000B86  0EDE               	movlw	222
  1205  000B88                     u2217:
  1206  000B88  2EE8               	decfsz	wreg,f,c
  1207  000B8A  D7FE               	goto	u2217
  1208  000B8C  2E3B               	decfsz	??_main& (0+255),f,c
  1209  000B8E  D7FC               	goto	u2217
  1210                           
  1211                           ;main.c: 129: _delay((unsigned long)((100)*(4000000/4000.0)));
  1212  000B90  0E82               	movlw	130
  1213  000B92  6E3B               	movwf	??_main& (0+255),c
  1214  000B94  0EDE               	movlw	222
  1215  000B96                     u2227:
  1216  000B96  2EE8               	decfsz	wreg,f,c
  1217  000B98  D7FE               	goto	u2227
  1218  000B9A  2E3B               	decfsz	??_main& (0+255),f,c
  1219  000B9C  D7FC               	goto	u2227
  1220                           
  1221                           ;main.c: 130: _delay((unsigned long)((100)*(4000000/4000.0)));
  1222  000B9E  0E82               	movlw	130
  1223  000BA0  6E3B               	movwf	??_main& (0+255),c
  1224  000BA2  0EDE               	movlw	222
  1225  000BA4                     u2237:
  1226  000BA4  2EE8               	decfsz	wreg,f,c
  1227  000BA6  D7FE               	goto	u2237
  1228  000BA8  2E3B               	decfsz	??_main& (0+255),f,c
  1229  000BAA  D7FC               	goto	u2237
  1230                           
  1231                           ;main.c: 131: _delay((unsigned long)((100)*(4000000/4000.0)));
  1232  000BAC  0E82               	movlw	130
  1233  000BAE  6E3B               	movwf	??_main& (0+255),c
  1234  000BB0  0EDE               	movlw	222
  1235  000BB2                     u2247:
  1236  000BB2  2EE8               	decfsz	wreg,f,c
  1237  000BB4  D7FE               	goto	u2247
  1238  000BB6  2E3B               	decfsz	??_main& (0+255),f,c
  1239  000BB8  D7FC               	goto	u2247
  1240                           
  1241                           ;main.c: 132: _delay((unsigned long)((89)*(4000000/4000.0)));
  1242  000BBA  0E74               	movlw	116
  1243  000BBC  6E3B               	movwf	??_main& (0+255),c
  1244  000BBE  0E94               	movlw	148
  1245  000BC0                     u2257:
  1246  000BC0  2EE8               	decfsz	wreg,f,c
  1247  000BC2  D7FE               	goto	u2257
  1248  000BC4  2E3B               	decfsz	??_main& (0+255),f,c
  1249  000BC6  D7FC               	goto	u2257
  1250  000BC8  D000               	nop2	
  1251                           
  1252                           ;main.c: 135: if(PORTAbits.RA1 == 1){
  1253  000BCA  A280               	btfss	3968,1,c	;volatile
  1254  000BCC  D00D               	goto	l147
  1255                           
  1256                           ;main.c: 136: hr++;
  1257  000BCE  0100               	movlb	0	; () banked
  1258  000BD0  2B7D               	incf	_hr& (0+255),f,b
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;main.c: 137: if(hr == 24){
  1262  000BD2  0100               	movlb	0	; () banked
  1263  000BD4  517D               	movf	_hr& (0+255),w,b
  1264  000BD6  0A18               	xorlw	24
  1265  000BD8  A4D8               	btfss	status,2,c
  1266  000BDA  D003               	goto	l149
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;main.c: 138: hr = 0;
  1270  000BDC  0E00               	movlw	0
  1271  000BDE  0100               	movlb	0	; () banked
  1272  000BE0  6F7D               	movwf	_hr& (0+255),b
  1273  000BE2                     l149:
  1274  000BE2  A280               	btfss	3968,1,c	;volatile
  1275  000BE4  D53A               	goto	l2273
  1276  000BE6  D7FD               	goto	l149
  1277  000BE8                     l147:
  1278                           
  1279                           ;main.c: 142: else if(PORTAbits.RA2 == 1){
  1280  000BE8  A480               	btfss	3968,2,c	;volatile
  1281  000BEA  D00D               	goto	l153
  1282                           
  1283                           ;main.c: 143: min++;
  1284  000BEC  0100               	movlb	0	; () banked
  1285  000BEE  2B7E               	incf	_min& (0+255),f,b
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 144: if(min == 60){
  1289  000BF0  0100               	movlb	0	; () banked
  1290  000BF2  517E               	movf	_min& (0+255),w,b
  1291  000BF4  0A3C               	xorlw	60
  1292  000BF6  A4D8               	btfss	status,2,c
  1293  000BF8  D003               	goto	l155
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;main.c: 145: min = 0;
  1297  000BFA  0E00               	movlw	0
  1298  000BFC  0100               	movlb	0	; () banked
  1299  000BFE  6F7E               	movwf	_min& (0+255),b
  1300  000C00                     l155:
  1301  000C00  A480               	btfss	3968,2,c	;volatile
  1302  000C02  D52B               	goto	l2273
  1303  000C04  D7FD               	goto	l155
  1304  000C06                     l153:
  1305                           
  1306                           ;main.c: 149: else if(PORTAbits.RA3 == 1){
  1307  000C06  A680               	btfss	3968,3,c	;volatile
  1308  000C08  D528               	goto	l2273
  1309                           
  1310                           ;main.c: 150: sec = 0;
  1311  000C0A  0E00               	movlw	0
  1312  000C0C  6E4B               	movwf	_sec,c
  1313  000C0E                     l160:
  1314  000C0E  A680               	btfss	3968,3,c	;volatile
  1315  000C10  D524               	goto	l2273
  1316  000C12  D7FD               	goto	l160
  1317  000C14                     __end_of_main:
  1318                           	opt stack 0
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           prodl	equ	0xFF3
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           status	equ	0xFD8
  1325                           
  1326 ;; *************** function _show_values *****************
  1327 ;; Defined at:
  1328 ;;		line 256 in file "main.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  SP              2   21[COMRAM] unsigned int 
  1331 ;;  PV              2   23[COMRAM] unsigned int 
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;  PV1             2   27[COMRAM] unsigned int 
  1334 ;;  SP1             2   25[COMRAM] unsigned int 
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1344 ;;      Params:         4       0       0       0       0       0       0
  1345 ;;      Locals:         4       0       0       0       0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0
  1347 ;;      Totals:         8       0       0       0       0       0       0
  1348 ;;Total ram usage:        8 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    3
  1351 ;; This function calls:
  1352 ;;		___lwdiv
  1353 ;;		___lwmod
  1354 ;;		_lcd_goto
  1355 ;;		_lcd_write
  1356 ;;		_lcd_writesc
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text1
  1363  001088                     __ptext1:
  1364                           	opt stack 0
  1365  001088                     _show_values:
  1366                           	opt stack 27
  1367                           
  1368                           ;main.c: 258: unsigned int SP1 = SP;
  1369                           
  1370                           ;incstack = 0
  1371  001088  C016  F01A         	movff	show_values@SP,show_values@SP1
  1372  00108C  C017  F01B         	movff	show_values@SP+1,show_values@SP1+1
  1373                           
  1374                           ;main.c: 259: unsigned int PV1 = PV;
  1375  001090  C018  F01C         	movff	show_values@PV,show_values@PV1
  1376  001094  C019  F01D         	movff	show_values@PV+1,show_values@PV1+1
  1377                           
  1378                           ;main.c: 262: lcd_goto(0x0A);
  1379  001098  0E0A               	movlw	10
  1380  00109A  EC26  F00C         	call	_lcd_goto
  1381                           
  1382                           ;main.c: 263: lcd_write('S');
  1383  00109E  0E53               	movlw	83
  1384  0010A0  ECB2  F00A         	call	_lcd_write
  1385                           
  1386                           ;main.c: 264: lcd_write('P');
  1387  0010A4  0E50               	movlw	80
  1388  0010A6  ECB2  F00A         	call	_lcd_write
  1389                           
  1390                           ;main.c: 265: lcd_write(':');
  1391  0010AA  0E3A               	movlw	58
  1392  0010AC  ECB2  F00A         	call	_lcd_write
  1393                           
  1394                           ;main.c: 266: lcd_write('0'+SP1/10);
  1395  0010B0  C01A  F00F         	movff	show_values@SP1,___lwdiv@dividend
  1396  0010B4  C01B  F010         	movff	show_values@SP1+1,___lwdiv@dividend+1
  1397  0010B8  0E00               	movlw	0
  1398  0010BA  6E12               	movwf	___lwdiv@divisor+1,c
  1399  0010BC  0E0A               	movlw	10
  1400  0010BE  6E11               	movwf	___lwdiv@divisor,c
  1401  0010C0  EC15  F00B         	call	___lwdiv	;wreg free
  1402  0010C4  500F               	movf	?___lwdiv,w,c
  1403  0010C6  0F30               	addlw	48
  1404  0010C8  ECB2  F00A         	call	_lcd_write
  1405                           
  1406                           ;main.c: 267: lcd_write('0'+SP1%10);
  1407  0010CC  C01A  F00F         	movff	show_values@SP1,___lwmod@dividend
  1408  0010D0  C01B  F010         	movff	show_values@SP1+1,___lwmod@dividend+1
  1409  0010D4  0E00               	movlw	0
  1410  0010D6  6E12               	movwf	___lwmod@divisor+1,c
  1411  0010D8  0E0A               	movlw	10
  1412  0010DA  6E11               	movwf	___lwmod@divisor,c
  1413  0010DC  EC60  F00B         	call	___lwmod	;wreg free
  1414  0010E0  500F               	movf	?___lwmod,w,c
  1415  0010E2  0F30               	addlw	48
  1416  0010E4  ECB2  F00A         	call	_lcd_write
  1417                           
  1418                           ;main.c: 268: lcd_write('%');
  1419  0010E8  0E25               	movlw	37
  1420  0010EA  ECB2  F00A         	call	_lcd_write
  1421                           
  1422                           ;main.c: 270: lcd_goto(0x4A);
  1423  0010EE  0E4A               	movlw	74
  1424  0010F0  EC26  F00C         	call	_lcd_goto
  1425                           
  1426                           ;main.c: 271: lcd_writesc("PV:");
  1427  0010F4  0E06               	movlw	high STR_4
  1428  0010F6  6E11               	movwf	lcd_writesc@s+1,c
  1429  0010F8  0E2A               	movlw	low STR_4
  1430  0010FA  6E10               	movwf	lcd_writesc@s,c
  1431  0010FC  ECBC  F00B         	call	_lcd_writesc	;wreg free
  1432                           
  1433                           ;main.c: 272: lcd_write('0'+PV1/10);
  1434  001100  C01C  F00F         	movff	show_values@PV1,___lwdiv@dividend
  1435  001104  C01D  F010         	movff	show_values@PV1+1,___lwdiv@dividend+1
  1436  001108  0E00               	movlw	0
  1437  00110A  6E12               	movwf	___lwdiv@divisor+1,c
  1438  00110C  0E0A               	movlw	10
  1439  00110E  6E11               	movwf	___lwdiv@divisor,c
  1440  001110  EC15  F00B         	call	___lwdiv	;wreg free
  1441  001114  500F               	movf	?___lwdiv,w,c
  1442  001116  0F30               	addlw	48
  1443  001118  ECB2  F00A         	call	_lcd_write
  1444                           
  1445                           ;main.c: 273: lcd_write('0'+PV1%10);
  1446  00111C  C01C  F00F         	movff	show_values@PV1,___lwmod@dividend
  1447  001120  C01D  F010         	movff	show_values@PV1+1,___lwmod@dividend+1
  1448  001124  0E00               	movlw	0
  1449  001126  6E12               	movwf	___lwmod@divisor+1,c
  1450  001128  0E0A               	movlw	10
  1451  00112A  6E11               	movwf	___lwmod@divisor,c
  1452  00112C  EC60  F00B         	call	___lwmod	;wreg free
  1453  001130  500F               	movf	?___lwmod,w,c
  1454  001132  0F30               	addlw	48
  1455  001134  ECB2  F00A         	call	_lcd_write
  1456                           
  1457                           ;main.c: 274: lcd_write('%');
  1458  001138  0E25               	movlw	37
  1459  00113A  ECB2  F00A         	call	_lcd_write
  1460  00113E  0012               	return	
  1461  001140                     __end_of_show_values:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           prodl	equ	0xFF3
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           status	equ	0xFD8
  1469                           
  1470 ;; *************** function ___lwmod *****************
  1471 ;; Defined at:
  1472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  dividend        2   14[COMRAM] unsigned int 
  1475 ;;  divisor         2   16[COMRAM] unsigned int 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  counter         1   18[COMRAM] unsigned char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  2   14[COMRAM] unsigned int 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1487 ;;      Params:         4       0       0       0       0       0       0
  1488 ;;      Locals:         1       0       0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0
  1490 ;;      Totals:         5       0       0       0       0       0       0
  1491 ;;Total ram usage:        5 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    1
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_show_values
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text2
  1502  0016C0                     __ptext2:
  1503                           	opt stack 0
  1504  0016C0                     ___lwmod:
  1505                           	opt stack 28
  1506                           
  1507                           ;incstack = 0
  1508  0016C0  5012               	movf	___lwmod@divisor+1,w,c
  1509  0016C2  1011               	iorwf	___lwmod@divisor,w,c
  1510  0016C4  B4D8               	btfsc	status,2,c
  1511  0016C6  D018               	goto	l774
  1512  0016C8  0E01               	movlw	1
  1513  0016CA  6E13               	movwf	___lwmod@counter,c
  1514  0016CC  D004               	goto	l1905
  1515  0016CE                     l1903:
  1516  0016CE  90D8               	bcf	status,0,c
  1517  0016D0  3611               	rlcf	___lwmod@divisor,f,c
  1518  0016D2  3612               	rlcf	___lwmod@divisor+1,f,c
  1519  0016D4  2A13               	incf	___lwmod@counter,f,c
  1520  0016D6                     l1905:
  1521  0016D6  AE12               	btfss	___lwmod@divisor+1,7,c
  1522  0016D8  D7FA               	goto	l1903
  1523  0016DA                     l1907:
  1524  0016DA  5011               	movf	___lwmod@divisor,w,c
  1525  0016DC  5C0F               	subwf	___lwmod@dividend,w,c
  1526  0016DE  5012               	movf	___lwmod@divisor+1,w,c
  1527  0016E0  5810               	subwfb	___lwmod@dividend+1,w,c
  1528  0016E2  A0D8               	btfss	status,0,c
  1529  0016E4  D004               	goto	l1911
  1530  0016E6  5011               	movf	___lwmod@divisor,w,c
  1531  0016E8  5E0F               	subwf	___lwmod@dividend,f,c
  1532  0016EA  5012               	movf	___lwmod@divisor+1,w,c
  1533  0016EC  5A10               	subwfb	___lwmod@dividend+1,f,c
  1534  0016EE                     l1911:
  1535  0016EE  90D8               	bcf	status,0,c
  1536  0016F0  3212               	rrcf	___lwmod@divisor+1,f,c
  1537  0016F2  3211               	rrcf	___lwmod@divisor,f,c
  1538  0016F4  2E13               	decfsz	___lwmod@counter,f,c
  1539  0016F6  D7F1               	goto	l1907
  1540  0016F8                     l774:
  1541  0016F8  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  1542  0016FC  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  1543  001700  0012               	return	
  1544  001702                     __end_of___lwmod:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           prodl	equ	0xFF3
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function ___lwdiv *****************
  1554 ;; Defined at:
  1555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  dividend        2   14[COMRAM] unsigned int 
  1558 ;;  divisor         2   16[COMRAM] unsigned int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  quotient        2   18[COMRAM] unsigned int 
  1561 ;;  counter         1   20[COMRAM] unsigned char 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  2   14[COMRAM] unsigned int 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1571 ;;      Params:         4       0       0       0       0       0       0
  1572 ;;      Locals:         3       0       0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0
  1574 ;;      Totals:         7       0       0       0       0       0       0
  1575 ;;Total ram usage:        7 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    1
  1578 ;; This function calls:
  1579 ;;		Nothing
  1580 ;; This function is called by:
  1581 ;;		_show_values
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text3
  1586  00162A                     __ptext3:
  1587                           	opt stack 0
  1588  00162A                     ___lwdiv:
  1589                           	opt stack 28
  1590                           
  1591                           ;incstack = 0
  1592  00162A  0E00               	movlw	0
  1593  00162C  6E14               	movwf	___lwdiv@quotient+1,c
  1594  00162E  0E00               	movlw	0
  1595  001630  6E13               	movwf	___lwdiv@quotient,c
  1596  001632  5012               	movf	___lwdiv@divisor+1,w,c
  1597  001634  1011               	iorwf	___lwdiv@divisor,w,c
  1598  001636  B4D8               	btfsc	status,2,c
  1599  001638  D01C               	goto	l764
  1600  00163A  0E01               	movlw	1
  1601  00163C  6E15               	movwf	___lwdiv@counter,c
  1602  00163E  D004               	goto	l1885
  1603  001640                     l1883:
  1604  001640  90D8               	bcf	status,0,c
  1605  001642  3611               	rlcf	___lwdiv@divisor,f,c
  1606  001644  3612               	rlcf	___lwdiv@divisor+1,f,c
  1607  001646  2A15               	incf	___lwdiv@counter,f,c
  1608  001648                     l1885:
  1609  001648  AE12               	btfss	___lwdiv@divisor+1,7,c
  1610  00164A  D7FA               	goto	l1883
  1611  00164C                     l1887:
  1612  00164C  90D8               	bcf	status,0,c
  1613  00164E  3613               	rlcf	___lwdiv@quotient,f,c
  1614  001650  3614               	rlcf	___lwdiv@quotient+1,f,c
  1615  001652  5011               	movf	___lwdiv@divisor,w,c
  1616  001654  5C0F               	subwf	___lwdiv@dividend,w,c
  1617  001656  5012               	movf	___lwdiv@divisor+1,w,c
  1618  001658  5810               	subwfb	___lwdiv@dividend+1,w,c
  1619  00165A  A0D8               	btfss	status,0,c
  1620  00165C  D005               	goto	l1895
  1621  00165E  5011               	movf	___lwdiv@divisor,w,c
  1622  001660  5E0F               	subwf	___lwdiv@dividend,f,c
  1623  001662  5012               	movf	___lwdiv@divisor+1,w,c
  1624  001664  5A10               	subwfb	___lwdiv@dividend+1,f,c
  1625  001666  8013               	bsf	___lwdiv@quotient,0,c
  1626  001668                     l1895:
  1627  001668  90D8               	bcf	status,0,c
  1628  00166A  3212               	rrcf	___lwdiv@divisor+1,f,c
  1629  00166C  3211               	rrcf	___lwdiv@divisor,f,c
  1630  00166E  2E15               	decfsz	___lwdiv@counter,f,c
  1631  001670  D7ED               	goto	l1887
  1632  001672                     l764:
  1633  001672  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  1634  001676  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1635  00167A  0012               	return	
  1636  00167C                     __end_of___lwdiv:
  1637                           	opt stack 0
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           prodl	equ	0xFF3
  1641                           postinc0	equ	0xFEE
  1642                           wreg	equ	0xFE8
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function _show_clock *****************
  1646 ;; Defined at:
  1647 ;;		line 278 in file "main.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;		None
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;		None               void
  1654 ;; Registers used:
  1655 ;;		wreg, status,2, status,0, prodl, cstack
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1661 ;;      Params:         0       0       0       0       0       0       0
  1662 ;;      Locals:         0       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0
  1664 ;;      Totals:         0       0       0       0       0       0       0
  1665 ;;Total ram usage:        0 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    3
  1668 ;; This function calls:
  1669 ;;		___awdiv
  1670 ;;		___awmod
  1671 ;;		_lcd_goto
  1672 ;;		_lcd_write
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text4
  1679  001140                     __ptext4:
  1680                           	opt stack 0
  1681  001140                     _show_clock:
  1682                           	opt stack 27
  1683                           
  1684                           ;main.c: 280: lcd_goto(0x40);
  1685                           
  1686                           ;incstack = 0
  1687  001140  0E40               	movlw	64
  1688  001142  EC26  F00C         	call	_lcd_goto
  1689                           
  1690                           ;main.c: 281: lcd_write('0'+hr/10);
  1691  001146  0100               	movlb	0	; () banked
  1692  001148  C07D  F00F         	movff	_hr,___awdiv@dividend
  1693  00114C  6A10               	clrf	___awdiv@dividend+1,c
  1694  00114E  0E00               	movlw	0
  1695  001150  6E12               	movwf	___awdiv@divisor+1,c
  1696  001152  0E0A               	movlw	10
  1697  001154  6E11               	movwf	___awdiv@divisor,c
  1698  001156  EC50  F009         	call	___awdiv	;wreg free
  1699  00115A  500F               	movf	?___awdiv,w,c
  1700  00115C  0F30               	addlw	48
  1701  00115E  ECB2  F00A         	call	_lcd_write
  1702                           
  1703                           ;main.c: 282: lcd_write('0'+hr%10);
  1704  001162  0100               	movlb	0	; () banked
  1705  001164  C07D  F00F         	movff	_hr,___awmod@dividend
  1706  001168  6A10               	clrf	___awmod@dividend+1,c
  1707  00116A  0E00               	movlw	0
  1708  00116C  6E12               	movwf	___awmod@divisor+1,c
  1709  00116E  0E0A               	movlw	10
  1710  001170  6E11               	movwf	___awmod@divisor,c
  1711  001172  ECA2  F009         	call	___awmod	;wreg free
  1712  001176  500F               	movf	?___awmod,w,c
  1713  001178  0F30               	addlw	48
  1714  00117A  ECB2  F00A         	call	_lcd_write
  1715                           
  1716                           ;main.c: 283: lcd_write(':');
  1717  00117E  0E3A               	movlw	58
  1718  001180  ECB2  F00A         	call	_lcd_write
  1719                           
  1720                           ;main.c: 284: lcd_write('0'+min/10);
  1721  001184  0100               	movlb	0	; () banked
  1722  001186  C07E  F00F         	movff	_min,___awdiv@dividend
  1723  00118A  6A10               	clrf	___awdiv@dividend+1,c
  1724  00118C  0E00               	movlw	0
  1725  00118E  6E12               	movwf	___awdiv@divisor+1,c
  1726  001190  0E0A               	movlw	10
  1727  001192  6E11               	movwf	___awdiv@divisor,c
  1728  001194  EC50  F009         	call	___awdiv	;wreg free
  1729  001198  500F               	movf	?___awdiv,w,c
  1730  00119A  0F30               	addlw	48
  1731  00119C  ECB2  F00A         	call	_lcd_write
  1732                           
  1733                           ;main.c: 285: lcd_write('0'+min%10);
  1734  0011A0  0100               	movlb	0	; () banked
  1735  0011A2  C07E  F00F         	movff	_min,___awmod@dividend
  1736  0011A6  6A10               	clrf	___awmod@dividend+1,c
  1737  0011A8  0E00               	movlw	0
  1738  0011AA  6E12               	movwf	___awmod@divisor+1,c
  1739  0011AC  0E0A               	movlw	10
  1740  0011AE  6E11               	movwf	___awmod@divisor,c
  1741  0011B0  ECA2  F009         	call	___awmod	;wreg free
  1742  0011B4  500F               	movf	?___awmod,w,c
  1743  0011B6  0F30               	addlw	48
  1744  0011B8  ECB2  F00A         	call	_lcd_write
  1745                           
  1746                           ;main.c: 286: lcd_write(':');
  1747  0011BC  0E3A               	movlw	58
  1748  0011BE  ECB2  F00A         	call	_lcd_write
  1749                           
  1750                           ;main.c: 287: lcd_write('0'+sec/10);
  1751  0011C2  C04B  F00F         	movff	_sec,___awdiv@dividend
  1752  0011C6  6A10               	clrf	___awdiv@dividend+1,c
  1753  0011C8  0E00               	movlw	0
  1754  0011CA  6E12               	movwf	___awdiv@divisor+1,c
  1755  0011CC  0E0A               	movlw	10
  1756  0011CE  6E11               	movwf	___awdiv@divisor,c
  1757  0011D0  EC50  F009         	call	___awdiv	;wreg free
  1758  0011D4  500F               	movf	?___awdiv,w,c
  1759  0011D6  0F30               	addlw	48
  1760  0011D8  ECB2  F00A         	call	_lcd_write
  1761                           
  1762                           ;main.c: 288: lcd_write('0'+sec%10);
  1763  0011DC  C04B  F00F         	movff	_sec,___awmod@dividend
  1764  0011E0  6A10               	clrf	___awmod@dividend+1,c
  1765  0011E2  0E00               	movlw	0
  1766  0011E4  6E12               	movwf	___awmod@divisor+1,c
  1767  0011E6  0E0A               	movlw	10
  1768  0011E8  6E11               	movwf	___awmod@divisor,c
  1769  0011EA  ECA2  F009         	call	___awmod	;wreg free
  1770  0011EE  500F               	movf	?___awmod,w,c
  1771  0011F0  0F30               	addlw	48
  1772  0011F2  ECB2  F00A         	call	_lcd_write
  1773  0011F6  0012               	return	
  1774  0011F8                     __end_of_show_clock:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           prodl	equ	0xFF3
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function ___awmod *****************
  1784 ;; Defined at:
  1785 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  dividend        2   14[COMRAM] int 
  1788 ;;  divisor         2   16[COMRAM] int 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  sign            1   19[COMRAM] unsigned char 
  1791 ;;  counter         1   18[COMRAM] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  2   14[COMRAM] int 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0, prodl
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1801 ;;      Params:         4       0       0       0       0       0       0
  1802 ;;      Locals:         2       0       0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0       0       0
  1804 ;;      Totals:         6       0       0       0       0       0       0
  1805 ;;Total ram usage:        6 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_show_clock
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text5
  1816  001344                     __ptext5:
  1817                           	opt stack 0
  1818  001344                     ___awmod:
  1819                           	opt stack 28
  1820                           
  1821                           ;incstack = 0
  1822  001344  0E00               	movlw	0
  1823  001346  6E14               	movwf	___awmod@sign,c
  1824  001348  5010               	movf	___awmod@dividend+1,w,c
  1825  00134A  0A80               	xorlw	128
  1826  00134C  6EF3               	movwf	prodl,c
  1827  00134E  0E80               	movlw	128
  1828  001350  5CF3               	subwf	prodl,w,c
  1829  001352  0E00               	movlw	0
  1830  001354  B4D8               	btfsc	status,2,c
  1831  001356  5C0F               	subwf	___awmod@dividend,w,c
  1832  001358  B0D8               	btfsc	status,0,c
  1833  00135A  D006               	goto	l1849
  1834  00135C  6C0F               	negf	___awmod@dividend,c
  1835  00135E  1E10               	comf	___awmod@dividend+1,f,c
  1836  001360  B0D8               	btfsc	status,0,c
  1837  001362  2A10               	incf	___awmod@dividend+1,f,c
  1838  001364  0E01               	movlw	1
  1839  001366  6E14               	movwf	___awmod@sign,c
  1840  001368                     l1849:
  1841  001368  5012               	movf	___awmod@divisor+1,w,c
  1842  00136A  0A80               	xorlw	128
  1843  00136C  6EF3               	movwf	prodl,c
  1844  00136E  0E80               	movlw	128
  1845  001370  5CF3               	subwf	prodl,w,c
  1846  001372  0E00               	movlw	0
  1847  001374  B4D8               	btfsc	status,2,c
  1848  001376  5C11               	subwf	___awmod@divisor,w,c
  1849  001378  B0D8               	btfsc	status,0,c
  1850  00137A  D004               	goto	l1853
  1851  00137C  6C11               	negf	___awmod@divisor,c
  1852  00137E  1E12               	comf	___awmod@divisor+1,f,c
  1853  001380  B0D8               	btfsc	status,0,c
  1854  001382  2A12               	incf	___awmod@divisor+1,f,c
  1855  001384                     l1853:
  1856  001384  5012               	movf	___awmod@divisor+1,w,c
  1857  001386  1011               	iorwf	___awmod@divisor,w,c
  1858  001388  B4D8               	btfsc	status,2,c
  1859  00138A  D018               	goto	l1869
  1860  00138C  0E01               	movlw	1
  1861  00138E  6E13               	movwf	___awmod@counter,c
  1862  001390  D004               	goto	l1859
  1863  001392                     l1857:
  1864  001392  90D8               	bcf	status,0,c
  1865  001394  3611               	rlcf	___awmod@divisor,f,c
  1866  001396  3612               	rlcf	___awmod@divisor+1,f,c
  1867  001398  2A13               	incf	___awmod@counter,f,c
  1868  00139A                     l1859:
  1869  00139A  AE12               	btfss	___awmod@divisor+1,7,c
  1870  00139C  D7FA               	goto	l1857
  1871  00139E                     l1861:
  1872  00139E  5011               	movf	___awmod@divisor,w,c
  1873  0013A0  5C0F               	subwf	___awmod@dividend,w,c
  1874  0013A2  5012               	movf	___awmod@divisor+1,w,c
  1875  0013A4  5810               	subwfb	___awmod@dividend+1,w,c
  1876  0013A6  A0D8               	btfss	status,0,c
  1877  0013A8  D004               	goto	l1865
  1878  0013AA  5011               	movf	___awmod@divisor,w,c
  1879  0013AC  5E0F               	subwf	___awmod@dividend,f,c
  1880  0013AE  5012               	movf	___awmod@divisor+1,w,c
  1881  0013B0  5A10               	subwfb	___awmod@dividend+1,f,c
  1882  0013B2                     l1865:
  1883  0013B2  90D8               	bcf	status,0,c
  1884  0013B4  3212               	rrcf	___awmod@divisor+1,f,c
  1885  0013B6  3211               	rrcf	___awmod@divisor,f,c
  1886  0013B8  2E13               	decfsz	___awmod@counter,f,c
  1887  0013BA  D7F1               	goto	l1861
  1888  0013BC                     l1869:
  1889  0013BC  5014               	movf	___awmod@sign,w,c
  1890  0013BE  B4D8               	btfsc	status,2,c
  1891  0013C0  D004               	goto	l1873
  1892  0013C2  6C0F               	negf	___awmod@dividend,c
  1893  0013C4  1E10               	comf	___awmod@dividend+1,f,c
  1894  0013C6  B0D8               	btfsc	status,0,c
  1895  0013C8  2A10               	incf	___awmod@dividend+1,f,c
  1896  0013CA                     l1873:
  1897  0013CA  C00F  F00F         	movff	___awmod@dividend,?___awmod
  1898  0013CE  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  1899  0013D2  0012               	return	
  1900  0013D4                     __end_of___awmod:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           prodl	equ	0xFF3
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function ___awdiv *****************
  1910 ;; Defined at:
  1911 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  dividend        2   14[COMRAM] int 
  1914 ;;  divisor         2   16[COMRAM] int 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  quotient        2   20[COMRAM] int 
  1917 ;;  sign            1   19[COMRAM] unsigned char 
  1918 ;;  counter         1   18[COMRAM] unsigned char 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  2   14[COMRAM] int 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0, prodl
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1928 ;;      Params:         4       0       0       0       0       0       0
  1929 ;;      Locals:         4       0       0       0       0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0
  1931 ;;      Totals:         8       0       0       0       0       0       0
  1932 ;;Total ram usage:        8 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_show_clock
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text6
  1943  0012A0                     __ptext6:
  1944                           	opt stack 0
  1945  0012A0                     ___awdiv:
  1946                           	opt stack 28
  1947                           
  1948                           ;incstack = 0
  1949  0012A0  0E00               	movlw	0
  1950  0012A2  6E14               	movwf	___awdiv@sign,c
  1951  0012A4  5012               	movf	___awdiv@divisor+1,w,c
  1952  0012A6  0A80               	xorlw	128
  1953  0012A8  6EF3               	movwf	prodl,c
  1954  0012AA  0E80               	movlw	128
  1955  0012AC  5CF3               	subwf	prodl,w,c
  1956  0012AE  0E00               	movlw	0
  1957  0012B0  B4D8               	btfsc	status,2,c
  1958  0012B2  5C11               	subwf	___awdiv@divisor,w,c
  1959  0012B4  B0D8               	btfsc	status,0,c
  1960  0012B6  D006               	goto	l1805
  1961  0012B8  6C11               	negf	___awdiv@divisor,c
  1962  0012BA  1E12               	comf	___awdiv@divisor+1,f,c
  1963  0012BC  B0D8               	btfsc	status,0,c
  1964  0012BE  2A12               	incf	___awdiv@divisor+1,f,c
  1965  0012C0  0E01               	movlw	1
  1966  0012C2  6E14               	movwf	___awdiv@sign,c
  1967  0012C4                     l1805:
  1968  0012C4  5010               	movf	___awdiv@dividend+1,w,c
  1969  0012C6  0A80               	xorlw	128
  1970  0012C8  6EF3               	movwf	prodl,c
  1971  0012CA  0E80               	movlw	128
  1972  0012CC  5CF3               	subwf	prodl,w,c
  1973  0012CE  0E00               	movlw	0
  1974  0012D0  B4D8               	btfsc	status,2,c
  1975  0012D2  5C0F               	subwf	___awdiv@dividend,w,c
  1976  0012D4  B0D8               	btfsc	status,0,c
  1977  0012D6  D006               	goto	l1811
  1978  0012D8  6C0F               	negf	___awdiv@dividend,c
  1979  0012DA  1E10               	comf	___awdiv@dividend+1,f,c
  1980  0012DC  B0D8               	btfsc	status,0,c
  1981  0012DE  2A10               	incf	___awdiv@dividend+1,f,c
  1982  0012E0  0E01               	movlw	1
  1983  0012E2  1A14               	xorwf	___awdiv@sign,f,c
  1984  0012E4                     l1811:
  1985  0012E4  0E00               	movlw	0
  1986  0012E6  6E16               	movwf	___awdiv@quotient+1,c
  1987  0012E8  0E00               	movlw	0
  1988  0012EA  6E15               	movwf	___awdiv@quotient,c
  1989  0012EC  5012               	movf	___awdiv@divisor+1,w,c
  1990  0012EE  1011               	iorwf	___awdiv@divisor,w,c
  1991  0012F0  B4D8               	btfsc	status,2,c
  1992  0012F2  D01C               	goto	l1833
  1993  0012F4  0E01               	movlw	1
  1994  0012F6  6E13               	movwf	___awdiv@counter,c
  1995  0012F8  D004               	goto	l1819
  1996  0012FA                     l1817:
  1997  0012FA  90D8               	bcf	status,0,c
  1998  0012FC  3611               	rlcf	___awdiv@divisor,f,c
  1999  0012FE  3612               	rlcf	___awdiv@divisor+1,f,c
  2000  001300  2A13               	incf	___awdiv@counter,f,c
  2001  001302                     l1819:
  2002  001302  AE12               	btfss	___awdiv@divisor+1,7,c
  2003  001304  D7FA               	goto	l1817
  2004  001306                     l1821:
  2005  001306  90D8               	bcf	status,0,c
  2006  001308  3615               	rlcf	___awdiv@quotient,f,c
  2007  00130A  3616               	rlcf	___awdiv@quotient+1,f,c
  2008  00130C  5011               	movf	___awdiv@divisor,w,c
  2009  00130E  5C0F               	subwf	___awdiv@dividend,w,c
  2010  001310  5012               	movf	___awdiv@divisor+1,w,c
  2011  001312  5810               	subwfb	___awdiv@dividend+1,w,c
  2012  001314  A0D8               	btfss	status,0,c
  2013  001316  D005               	goto	l1829
  2014  001318  5011               	movf	___awdiv@divisor,w,c
  2015  00131A  5E0F               	subwf	___awdiv@dividend,f,c
  2016  00131C  5012               	movf	___awdiv@divisor+1,w,c
  2017  00131E  5A10               	subwfb	___awdiv@dividend+1,f,c
  2018  001320  8015               	bsf	___awdiv@quotient,0,c
  2019  001322                     l1829:
  2020  001322  90D8               	bcf	status,0,c
  2021  001324  3212               	rrcf	___awdiv@divisor+1,f,c
  2022  001326  3211               	rrcf	___awdiv@divisor,f,c
  2023  001328  2E13               	decfsz	___awdiv@counter,f,c
  2024  00132A  D7ED               	goto	l1821
  2025  00132C                     l1833:
  2026  00132C  5014               	movf	___awdiv@sign,w,c
  2027  00132E  B4D8               	btfsc	status,2,c
  2028  001330  D004               	goto	l1837
  2029  001332  6C15               	negf	___awdiv@quotient,c
  2030  001334  1E16               	comf	___awdiv@quotient+1,f,c
  2031  001336  B0D8               	btfsc	status,0,c
  2032  001338  2A16               	incf	___awdiv@quotient+1,f,c
  2033  00133A                     l1837:
  2034  00133A  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2035  00133E  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2036  001342  0012               	return	
  2037  001344                     __end_of___awdiv:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           prodl	equ	0xFF3
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           status	equ	0xFD8
  2045                           
  2046 ;; *************** function _lcd_init *****************
  2047 ;; Defined at:
  2048 ;;		line 95 in file "lcd.c"
  2049 ;; Parameters:    Size  Location     Type
  2050 ;;		None
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;		None               void
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2062 ;;      Params:         0       0       0       0       0       0       0
  2063 ;;      Locals:         0       0       0       0       0       0       0
  2064 ;;      Temps:          1       0       0       0       0       0       0
  2065 ;;      Totals:         1       0       0       0       0       0       0
  2066 ;;Total ram usage:        1 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    3
  2069 ;; This function calls:
  2070 ;;		_lcd_clear
  2071 ;;		_lcd_cmd
  2072 ;; This function is called by:
  2073 ;;		_main
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text7
  2078  001464                     __ptext7:
  2079                           	opt stack 0
  2080  001464                     _lcd_init:
  2081                           	opt stack 27
  2082                           
  2083                           ;incstack = 0
  2084  001464  9A8A               	bcf	3978,5,c	;volatile
  2085                           
  2086                           ;lcd.c: 97: LATBbits.LATB4 = 0;
  2087  001466  988A               	bcf	3978,4,c	;volatile
  2088                           
  2089                           ;lcd.c: 98: _delay((unsigned long)((40)*(4000000/4000.0)));
  2090  001468  0E34               	movlw	52
  2091  00146A  6E11               	movwf	??_lcd_init& (0+255),c
  2092  00146C  0EF2               	movlw	242
  2093  00146E                     u2267:
  2094  00146E  2EE8               	decfsz	wreg,f,c
  2095  001470  D7FE               	goto	u2267
  2096  001472  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2097  001474  D7FC               	goto	u2267
  2098                           
  2099                           ;lcd.c: 99: LATBbits.LATB0 = 1;
  2100  001476  808A               	bsf	3978,0,c	;volatile
  2101                           
  2102                           ;lcd.c: 100: LATBbits.LATB1 = 1;
  2103  001478  828A               	bsf	3978,1,c	;volatile
  2104                           
  2105                           ;lcd.c: 101: LATBbits.LATB2 = 0;
  2106  00147A  948A               	bcf	3978,2,c	;volatile
  2107                           
  2108                           ;lcd.c: 102: LATCbits.LATC3 = 0;
  2109  00147C  968B               	bcf	3979,3,c	;volatile
  2110                           
  2111                           ;lcd.c: 103: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2112  00147E  888A               	bsf	3978,4,c	;volatile
  2113  001480  F000               	nop	
  2114  001482  988A               	bcf	3978,4,c	;volatile
  2115                           
  2116                           ;lcd.c: 104: _delay((unsigned long)((6)*(4000000/4000.0)));
  2117  001484  0E08               	movlw	8
  2118  001486  6E11               	movwf	??_lcd_init& (0+255),c
  2119  001488  0ECA               	movlw	202
  2120  00148A                     u2277:
  2121  00148A  2EE8               	decfsz	wreg,f,c
  2122  00148C  D7FE               	goto	u2277
  2123  00148E  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2124  001490  D7FC               	goto	u2277
  2125                           
  2126                           ;lcd.c: 105: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2127  001492  888A               	bsf	3978,4,c	;volatile
  2128  001494  F000               	nop	
  2129  001496  988A               	bcf	3978,4,c	;volatile
  2130                           
  2131                           ;lcd.c: 106: _delay((unsigned long)((2)*(4000000/4000.0)));
  2132  001498  0E03               	movlw	3
  2133  00149A  6E11               	movwf	??_lcd_init& (0+255),c
  2134  00149C  0E98               	movlw	152
  2135  00149E                     u2287:
  2136  00149E  2EE8               	decfsz	wreg,f,c
  2137  0014A0  D7FE               	goto	u2287
  2138  0014A2  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2139  0014A4  D7FC               	goto	u2287
  2140                           
  2141                           ;lcd.c: 107: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2142  0014A6  888A               	bsf	3978,4,c	;volatile
  2143  0014A8  F000               	nop	
  2144  0014AA  988A               	bcf	3978,4,c	;volatile
  2145                           
  2146                           ;lcd.c: 108: _delay((unsigned long)((2)*(4000000/4000.0)));
  2147  0014AC  0E03               	movlw	3
  2148  0014AE  6E11               	movwf	??_lcd_init& (0+255),c
  2149  0014B0  0E98               	movlw	152
  2150  0014B2                     u2297:
  2151  0014B2  2EE8               	decfsz	wreg,f,c
  2152  0014B4  D7FE               	goto	u2297
  2153  0014B6  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2154  0014B8  D7FC               	goto	u2297
  2155                           
  2156                           ;lcd.c: 109: LATBbits.LATB0 = 0;
  2157  0014BA  908A               	bcf	3978,0,c	;volatile
  2158                           
  2159                           ;lcd.c: 110: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2160  0014BC  888A               	bsf	3978,4,c	;volatile
  2161  0014BE  F000               	nop	
  2162  0014C0  988A               	bcf	3978,4,c	;volatile
  2163                           
  2164                           ;lcd.c: 111: _delay((unsigned long)((2)*(4000000/4000.0)));
  2165  0014C2  0E03               	movlw	3
  2166  0014C4  6E11               	movwf	??_lcd_init& (0+255),c
  2167  0014C6  0E98               	movlw	152
  2168  0014C8                     u2307:
  2169  0014C8  2EE8               	decfsz	wreg,f,c
  2170  0014CA  D7FE               	goto	u2307
  2171  0014CC  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2172  0014CE  D7FC               	goto	u2307
  2173                           
  2174                           ;lcd.c: 112: lcd_cmd(0b00101000);
  2175  0014D0  0E28               	movlw	40
  2176  0014D2  EC2E  F00C         	call	_lcd_cmd
  2177                           
  2178                           ;lcd.c: 113: lcd_cmd(0b00001100);
  2179  0014D6  0E0C               	movlw	12
  2180  0014D8  EC2E  F00C         	call	_lcd_cmd
  2181                           
  2182                           ;lcd.c: 114: lcd_cmd(0b00000110);
  2183  0014DC  0E06               	movlw	6
  2184  0014DE  EC2E  F00C         	call	_lcd_cmd
  2185                           
  2186                           ;lcd.c: 115: lcd_clear();
  2187  0014E2  EC19  F00C         	call	_lcd_clear	;wreg free
  2188  0014E6  0012               	return	
  2189  0014E8                     __end_of_lcd_init:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           prodl	equ	0xFF3
  2194                           postinc0	equ	0xFEE
  2195                           wreg	equ	0xFE8
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _lcd_cmd *****************
  2199 ;; Defined at:
  2200 ;;		line 87 in file "lcd.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  command         1    wreg     unsigned char 
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  command         1   15[COMRAM] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;		None               void
  2207 ;; Registers used:
  2208 ;;		wreg, status,2, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2214 ;;      Params:         0       0       0       0       0       0       0
  2215 ;;      Locals:         1       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0
  2217 ;;      Totals:         1       0       0       0       0       0       0
  2218 ;;Total ram usage:        1 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    2
  2221 ;; This function calls:
  2222 ;;		_lcd_write
  2223 ;; This function is called by:
  2224 ;;		_lcd_init
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text8
  2229  00185C                     __ptext8:
  2230                           	opt stack 0
  2231  00185C                     _lcd_cmd:
  2232                           	opt stack 27
  2233                           
  2234                           ;incstack = 0
  2235                           ;lcd_cmd@command stored from wreg
  2236  00185C  6E10               	movwf	lcd_cmd@command,c
  2237  00185E  9A8A               	bcf	3978,5,c	;volatile
  2238                           
  2239                           ;lcd.c: 89: lcd_write(command);
  2240  001860  5010               	movf	lcd_cmd@command,w,c
  2241  001862  ECB2  F00A         	call	_lcd_write
  2242                           
  2243                           ;lcd.c: 90: LATBbits.LATB5=1;
  2244  001866  8A8A               	bsf	3978,5,c	;volatile
  2245  001868  0012               	return	
  2246  00186A                     __end_of_lcd_cmd:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           prodl	equ	0xFF3
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           status	equ	0xFD8
  2254                           
  2255 ;; *************** function _lcd_clear *****************
  2256 ;; Defined at:
  2257 ;;		line 56 in file "lcd.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;		None               void
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2271 ;;      Params:         0       0       0       0       0       0       0
  2272 ;;      Locals:         0       0       0       0       0       0       0
  2273 ;;      Temps:          1       0       0       0       0       0       0
  2274 ;;      Totals:         1       0       0       0       0       0       0
  2275 ;;Total ram usage:        1 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    2
  2278 ;; This function calls:
  2279 ;;		_lcd_write
  2280 ;; This function is called by:
  2281 ;;		_lcd_init
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text9
  2286  001832                     __ptext9:
  2287                           	opt stack 0
  2288  001832                     _lcd_clear:
  2289                           	opt stack 27
  2290                           
  2291                           ;incstack = 0
  2292  001832  9A8A               	bcf	3978,5,c	;volatile
  2293                           
  2294                           ;lcd.c: 58: lcd_write(0x01);
  2295  001834  0E01               	movlw	1
  2296  001836  ECB2  F00A         	call	_lcd_write
  2297                           
  2298                           ;lcd.c: 59: LATBbits.LATB5=1;
  2299  00183A  8A8A               	bsf	3978,5,c	;volatile
  2300                           
  2301                           ;lcd.c: 60: _delay((unsigned long)((2)*(4000000/4000.0)));
  2302  00183C  0E03               	movlw	3
  2303  00183E  6E10               	movwf	??_lcd_clear& (0+255),c
  2304  001840  0E98               	movlw	152
  2305  001842                     u2317:
  2306  001842  2EE8               	decfsz	wreg,f,c
  2307  001844  D7FE               	goto	u2317
  2308  001846  2E10               	decfsz	??_lcd_clear& (0+255),f,c
  2309  001848  D7FC               	goto	u2317
  2310  00184A  0012               	return	
  2311  00184C                     __end_of_lcd_clear:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           tblptrh	equ	0xFF7
  2315                           prodl	equ	0xFF3
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _init *****************
  2321 ;; Defined at:
  2322 ;;		line 157 in file "main.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;		None
  2327 ;; Return value:  Size  Location     Type
  2328 ;;		None               void
  2329 ;; Registers used:
  2330 ;;		wreg, status,2
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2336 ;;      Params:         0       0       0       0       0       0       0
  2337 ;;      Locals:         0       0       0       0       0       0       0
  2338 ;;      Temps:          0       0       0       0       0       0       0
  2339 ;;      Totals:         0       0       0       0       0       0       0
  2340 ;;Total ram usage:        0 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    1
  2343 ;; This function calls:
  2344 ;;		Nothing
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text10
  2351  0014E8                     __ptext10:
  2352                           	opt stack 0
  2353  0014E8                     _init:
  2354                           	opt stack 29
  2355                           
  2356                           ;main.c: 159: ANSELA = 0b00100001;
  2357                           
  2358                           ;incstack = 0
  2359  0014E8  0E21               	movlw	33
  2360  0014EA  010F               	movlb	15	; () banked
  2361  0014EC  6F38               	movwf	56,b	;volatile
  2362                           
  2363                           ;main.c: 160: ANSELB = 0b00001000;
  2364  0014EE  0E08               	movlw	8
  2365  0014F0  010F               	movlb	15	; () banked
  2366  0014F2  6F39               	movwf	57,b	;volatile
  2367                           
  2368                           ;main.c: 161: ANSELC = 0;
  2369  0014F4  0E00               	movlw	0
  2370  0014F6  010F               	movlb	15	; () banked
  2371  0014F8  6F3A               	movwf	58,b	;volatile
  2372                           
  2373                           ; BSR set to: 15
  2374                           ;main.c: 163: TRISAbits.RA0 = 1;
  2375  0014FA  8092               	bsf	3986,0,c	;volatile
  2376                           
  2377                           ; BSR set to: 15
  2378                           ;main.c: 164: TRISAbits.RA1 = 1;
  2379  0014FC  8292               	bsf	3986,1,c	;volatile
  2380                           
  2381                           ; BSR set to: 15
  2382                           ;main.c: 165: TRISAbits.RA2 = 1;
  2383  0014FE  8492               	bsf	3986,2,c	;volatile
  2384                           
  2385                           ; BSR set to: 15
  2386                           ;main.c: 166: TRISAbits.RA3 = 1;
  2387  001500  8692               	bsf	3986,3,c	;volatile
  2388                           
  2389                           ; BSR set to: 15
  2390                           ;main.c: 167: TRISAbits.RA4 = 0;
  2391  001502  9892               	bcf	3986,4,c	;volatile
  2392                           
  2393                           ; BSR set to: 15
  2394                           ;main.c: 168: TRISAbits.RA5 = 1;
  2395  001504  8A92               	bsf	3986,5,c	;volatile
  2396                           
  2397                           ; BSR set to: 15
  2398                           ;main.c: 169: TRISCbits.RC3 = 0;
  2399  001506  9694               	bcf	3988,3,c	;volatile
  2400                           
  2401                           ; BSR set to: 15
  2402                           ;main.c: 170: TRISBbits.RB3 = 1;
  2403  001508  8693               	bsf	3987,3,c	;volatile
  2404                           
  2405                           ;main.c: 172: TRISB=0b00001000;
  2406  00150A  0E08               	movlw	8
  2407  00150C  6E93               	movwf	3987,c	;volatile
  2408                           
  2409                           ;main.c: 176: ADCON2 = 0b10001010;
  2410  00150E  0E8A               	movlw	138
  2411  001510  6EC0               	movwf	4032,c	;volatile
  2412                           
  2413                           ;main.c: 179: ADCON1 = 0x00;
  2414  001512  0E00               	movlw	0
  2415  001514  6EC1               	movwf	4033,c	;volatile
  2416                           
  2417                           ;main.c: 180: ADCON0 = 0x01;
  2418  001516  0E01               	movlw	1
  2419  001518  6EC2               	movwf	4034,c	;volatile
  2420                           
  2421                           ;main.c: 183: T1CON=0b00010001;
  2422  00151A  0E11               	movlw	17
  2423  00151C  6ECD               	movwf	4045,c	;volatile
  2424                           
  2425                           ;main.c: 184: TMR1H=60;
  2426  00151E  0E3C               	movlw	60
  2427  001520  6ECF               	movwf	4047,c	;volatile
  2428                           
  2429                           ;main.c: 185: TMR1L=237;
  2430  001522  0EED               	movlw	237
  2431  001524  6ECE               	movwf	4046,c	;volatile
  2432                           
  2433                           ;main.c: 187: CCPTMRS1 = 0x01;
  2434  001526  0E01               	movlw	1
  2435  001528  010F               	movlb	15	; () banked
  2436  00152A  6F48               	movwf	72,b	;volatile
  2437                           
  2438                           ; BSR set to: 15
  2439                           ;main.c: 189: PR2 = 255;
  2440  00152C  68BB               	setf	4027,c	;volatile
  2441                           
  2442                           ;main.c: 190: CCP5CON = 0x0C;
  2443  00152E  0E0C               	movlw	12
  2444  001530  010F               	movlb	15	; () banked
  2445  001532  6F54               	movwf	84,b	;volatile
  2446                           
  2447                           ;main.c: 191: T2CON = 0x04;
  2448  001534  0E04               	movlw	4
  2449  001536  6EBA               	movwf	4026,c	;volatile
  2450                           
  2451                           ;main.c: 193: CM1CON0bits.C1CH = 0b10;
  2452  001538  5079               	movf	3961,w,c	;volatile
  2453  00153A  0BFC               	andlw	-4
  2454  00153C  0902               	iorlw	2
  2455  00153E  6E79               	movwf	3961,c	;volatile
  2456                           
  2457                           ; BSR set to: 15
  2458                           ;main.c: 194: CM1CON0bits.C1R = 1;
  2459  001540  8479               	bsf	3961,2,c	;volatile
  2460                           
  2461                           ; BSR set to: 15
  2462                           ;main.c: 195: CM1CON0bits.C1OE = 0;
  2463  001542  9A79               	bcf	3961,5,c	;volatile
  2464                           
  2465                           ; BSR set to: 15
  2466                           ;main.c: 196: CM1CON0bits.C1ON = 1;
  2467  001544  8E79               	bsf	3961,7,c	;volatile
  2468                           
  2469                           ; BSR set to: 15
  2470                           ;main.c: 197: CM1CON0bits.C1POL = 0;
  2471  001546  9879               	bcf	3961,4,c	;volatile
  2472                           
  2473                           ; BSR set to: 15
  2474                           ;main.c: 198: CM1CON0bits.C1SP = 0;
  2475  001548  9679               	bcf	3961,3,c	;volatile
  2476                           
  2477                           ; BSR set to: 15
  2478                           ;main.c: 200: CM2CON1bits.C1RSEL = 1;
  2479  00154A  8A77               	bsf	3959,5,c	;volatile
  2480                           
  2481                           ; BSR set to: 15
  2482                           ;main.c: 202: VREFCON0bits.FVREN = 1;
  2483  00154C  010F               	movlb	15	; () banked
  2484  00154E  8F42               	bsf	66,7,b	;volatile
  2485                           
  2486                           ;main.c: 204: VREFCON0bits.FVRS = 0b11;
  2487  001550  0E30               	movlw	48
  2488  001552  010F               	movlb	15	; () banked
  2489  001554  1342               	iorwf	66,f,b	;volatile
  2490                           
  2491                           ;main.c: 208: PIE1=0b00000001;
  2492  001556  0E01               	movlw	1
  2493  001558  6E9D               	movwf	3997,c	;volatile
  2494                           
  2495                           ;main.c: 209: IPR1=0b00000001;
  2496  00155A  0E01               	movlw	1
  2497  00155C  6E9F               	movwf	3999,c	;volatile
  2498                           
  2499                           ;main.c: 210: INTCON=0b11000000;
  2500  00155E  0EC0               	movlw	192
  2501  001560  6EF2               	movwf	intcon,c	;volatile
  2502                           
  2503                           ; BSR set to: 15
  2504  001562  0012               	return	
  2505  001564                     __end_of_init:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           postinc0	equ	0xFEE
  2512                           wreg	equ	0xFE8
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function ___lwtoft *****************
  2516 ;; Defined at:
  2517 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  c               2   22[COMRAM] unsigned int 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;		None
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  3   22[COMRAM] float 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2531 ;;      Params:         3       0       0       0       0       0       0
  2532 ;;      Locals:         0       0       0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0
  2534 ;;      Totals:         3       0       0       0       0       0       0
  2535 ;;Total ram usage:        3 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    2
  2538 ;; This function calls:
  2539 ;;		___ftpack
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text11
  2546  0017EE                     __ptext11:
  2547                           	opt stack 0
  2548  0017EE                     ___lwtoft:
  2549                           	opt stack 28
  2550                           
  2551                           ; BSR set to: 15
  2552                           ;incstack = 0
  2553  0017EE  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
  2554  0017F2  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
  2555  0017F6  6A11               	clrf	___ftpack@arg+2,c
  2556  0017F8  0E8E               	movlw	142
  2557  0017FA  6E12               	movwf	___ftpack@exp,c
  2558  0017FC  0E00               	movlw	0
  2559  0017FE  6E13               	movwf	___ftpack@sign,c
  2560  001800  ECFC  F008         	call	___ftpack	;wreg free
  2561  001804  C00F  F017         	movff	?___ftpack,?___lwtoft
  2562  001808  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  2563  00180C  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  2564  001810  0012               	return	
  2565  001812                     __end_of___lwtoft:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           prodl	equ	0xFF3
  2570                           intcon	equ	0xFF2
  2571                           postinc0	equ	0xFEE
  2572                           wreg	equ	0xFE8
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function ___fttol *****************
  2576 ;; Defined at:
  2577 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  f1              3   37[COMRAM] float 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;  lval            4   47[COMRAM] unsigned long 
  2582 ;;  exp1            1   51[COMRAM] unsigned char 
  2583 ;;  sign1           1   46[COMRAM] unsigned char 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  4   37[COMRAM] long 
  2586 ;; Registers used:
  2587 ;;		wreg, status,2, status,0
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2593 ;;      Params:         4       0       0       0       0       0       0
  2594 ;;      Locals:         6       0       0       0       0       0       0
  2595 ;;      Temps:          5       0       0       0       0       0       0
  2596 ;;      Totals:        15       0       0       0       0       0       0
  2597 ;;Total ram usage:       15 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    1
  2600 ;; This function calls:
  2601 ;;		Nothing
  2602 ;; This function is called by:
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text12
  2608  000DC0                     __ptext12:
  2609                           	opt stack 0
  2610  000DC0                     ___fttol:
  2611                           	opt stack 29
  2612                           
  2613                           ;incstack = 0
  2614  000DC0  C028  F02A         	movff	___fttol@f1+2,??___fttol
  2615  000DC4  6A2B               	clrf	(??___fttol+1)& (0+255),c
  2616  000DC6  6A2C               	clrf	(??___fttol+2)& (0+255),c
  2617  000DC8  3427               	rlcf	___fttol@f1+1,w,c
  2618  000DCA  362A               	rlcf	??___fttol& (0+255),f,c
  2619  000DCC  E301               	bnc	u1851
  2620  000DCE  802B               	bsf	(??___fttol+1)& (0+255),0,c
  2621  000DD0                     u1851:
  2622  000DD0  502A               	movf	??___fttol,w,c
  2623  000DD2  6E34               	movwf	___fttol@exp1,c
  2624  000DD4  6634               	tstfsz	___fttol@exp1& (0+255),c
  2625  000DD6  D009               	goto	l2223
  2626  000DD8  0E00               	movlw	0
  2627  000DDA  6E26               	movwf	?___fttol,c
  2628  000DDC  0E00               	movlw	0
  2629  000DDE  6E27               	movwf	?___fttol+1,c
  2630  000DE0  0E00               	movlw	0
  2631  000DE2  6E28               	movwf	?___fttol+2,c
  2632  000DE4  0E00               	movlw	0
  2633  000DE6  6E29               	movwf	?___fttol+3,c
  2634  000DE8  0012               	return	
  2635  000DEA                     l2223:
  2636  000DEA  0E17               	movlw	23
  2637  000DEC  6E2A               	movwf	??___fttol& (0+255),c
  2638  000DEE  C026  F02B         	movff	___fttol@f1,??___fttol+1
  2639  000DF2  C027  F02C         	movff	___fttol@f1+1,??___fttol+2
  2640  000DF6  C028  F02D         	movff	___fttol@f1+2,??___fttol+3
  2641  000DFA  282A               	incf	??___fttol,w,c
  2642  000DFC  6E2E               	movwf	(??___fttol+4)& (0+255),c
  2643  000DFE  D004               	goto	u1870
  2644  000E00                     u1875:
  2645  000E00  90D8               	bcf	status,0,c
  2646  000E02  322D               	rrcf	??___fttol+3,f,c
  2647  000E04  322C               	rrcf	??___fttol+2,f,c
  2648  000E06  322B               	rrcf	??___fttol+1,f,c
  2649  000E08                     u1870:
  2650  000E08  2E2E               	decfsz	(??___fttol+4)& (0+255),f,c
  2651  000E0A  D7FA               	goto	u1875
  2652  000E0C  502B               	movf	??___fttol+1,w,c
  2653  000E0E  6E2F               	movwf	___fttol@sign1,c
  2654  000E10  8E27               	bsf	___fttol@f1+1,7,c
  2655  000E12  0EFF               	movlw	255
  2656  000E14  1626               	andwf	___fttol@f1,f,c
  2657  000E16  0EFF               	movlw	255
  2658  000E18  1627               	andwf	___fttol@f1+1,f,c
  2659  000E1A  0E00               	movlw	0
  2660  000E1C  1628               	andwf	___fttol@f1+2,f,c
  2661  000E1E  5026               	movf	___fttol@f1,w,c
  2662  000E20  6E30               	movwf	___fttol@lval,c
  2663  000E22  5027               	movf	___fttol@f1+1,w,c
  2664  000E24  6E31               	movwf	___fttol@lval+1,c
  2665  000E26  5028               	movf	___fttol@f1+2,w,c
  2666  000E28  6E32               	movwf	___fttol@lval+2,c
  2667  000E2A  6A33               	clrf	___fttol@lval+3,c
  2668  000E2C  0E8E               	movlw	142
  2669  000E2E  5E34               	subwf	___fttol@exp1,f,c
  2670  000E30  AE34               	btfss	___fttol@exp1,7,c
  2671  000E32  D019               	goto	l2245
  2672  000E34  5034               	movf	___fttol@exp1,w,c
  2673  000E36  0A80               	xorlw	128
  2674  000E38  6E2A               	movwf	??___fttol& (0+255),c
  2675  000E3A  0EF1               	movlw	241
  2676  000E3C  0A80               	xorlw	128
  2677  000E3E  5C2A               	subwf	??___fttol,w,c
  2678  000E40  B0D8               	btfsc	status,0,c
  2679  000E42  D009               	goto	l2241
  2680  000E44  0E00               	movlw	0
  2681  000E46  6E26               	movwf	?___fttol,c
  2682  000E48  0E00               	movlw	0
  2683  000E4A  6E27               	movwf	?___fttol+1,c
  2684  000E4C  0E00               	movlw	0
  2685  000E4E  6E28               	movwf	?___fttol+2,c
  2686  000E50  0E00               	movlw	0
  2687  000E52  6E29               	movwf	?___fttol+3,c
  2688  000E54  0012               	return	
  2689  000E56                     l2241:
  2690  000E56  90D8               	bcf	status,0,c
  2691  000E58  3233               	rrcf	___fttol@lval+3,f,c
  2692  000E5A  3232               	rrcf	___fttol@lval+2,f,c
  2693  000E5C  3231               	rrcf	___fttol@lval+1,f,c
  2694  000E5E  3230               	rrcf	___fttol@lval,f,c
  2695  000E60  3E34               	incfsz	___fttol@exp1,f,c
  2696  000E62  D7F9               	goto	l2241
  2697  000E64  D014               	goto	l2255
  2698  000E66                     l2245:
  2699  000E66  0E17               	movlw	23
  2700  000E68  6434               	cpfsgt	___fttol@exp1,c
  2701  000E6A  D00F               	goto	l2253
  2702  000E6C  0E00               	movlw	0
  2703  000E6E  6E26               	movwf	?___fttol,c
  2704  000E70  0E00               	movlw	0
  2705  000E72  6E27               	movwf	?___fttol+1,c
  2706  000E74  0E00               	movlw	0
  2707  000E76  6E28               	movwf	?___fttol+2,c
  2708  000E78  0E00               	movlw	0
  2709  000E7A  6E29               	movwf	?___fttol+3,c
  2710  000E7C  0012               	return	
  2711  000E7E                     l2251:
  2712  000E7E  90D8               	bcf	status,0,c
  2713  000E80  3630               	rlcf	___fttol@lval,f,c
  2714  000E82  3631               	rlcf	___fttol@lval+1,f,c
  2715  000E84  3632               	rlcf	___fttol@lval+2,f,c
  2716  000E86  3633               	rlcf	___fttol@lval+3,f,c
  2717  000E88  0634               	decf	___fttol@exp1,f,c
  2718  000E8A                     l2253:
  2719  000E8A  6634               	tstfsz	___fttol@exp1,c
  2720  000E8C  D7F8               	goto	l2251
  2721  000E8E                     l2255:
  2722  000E8E  502F               	movf	___fttol@sign1,w,c
  2723  000E90  B4D8               	btfsc	status,2,c
  2724  000E92  D008               	goto	l2259
  2725  000E94  1E33               	comf	___fttol@lval+3,f,c
  2726  000E96  1E32               	comf	___fttol@lval+2,f,c
  2727  000E98  1E31               	comf	___fttol@lval+1,f,c
  2728  000E9A  6C30               	negf	___fttol@lval,c
  2729  000E9C  0E00               	movlw	0
  2730  000E9E  2231               	addwfc	___fttol@lval+1,f,c
  2731  000EA0  2232               	addwfc	___fttol@lval+2,f,c
  2732  000EA2  2233               	addwfc	___fttol@lval+3,f,c
  2733  000EA4                     l2259:
  2734  000EA4  C030  F026         	movff	___fttol@lval,?___fttol
  2735  000EA8  C031  F027         	movff	___fttol@lval+1,?___fttol+1
  2736  000EAC  C032  F028         	movff	___fttol@lval+2,?___fttol+2
  2737  000EB0  C033  F029         	movff	___fttol@lval+3,?___fttol+3
  2738  000EB4  0012               	return	
  2739  000EB6                     __end_of___fttol:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           prodl	equ	0xFF3
  2744                           intcon	equ	0xFF2
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           status	equ	0xFD8
  2748                           
  2749 ;; *************** function ___ftsub *****************
  2750 ;; Defined at:
  2751 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  f1              3   52[COMRAM] float 
  2754 ;;  f2              3   55[COMRAM] float 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;		None
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  3   52[COMRAM] float 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0, cstack
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2766 ;;      Params:         6       0       0       0       0       0       0
  2767 ;;      Locals:         0       0       0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0
  2769 ;;      Totals:         6       0       0       0       0       0       0
  2770 ;;Total ram usage:        6 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    3
  2773 ;; This function calls:
  2774 ;;		___ftadd
  2775 ;; This function is called by:
  2776 ;;		_main
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text13
  2781  001742                     __ptext13:
  2782                           	opt stack 0
  2783  001742                     ___ftsub:
  2784                           	opt stack 27
  2785                           
  2786                           ;incstack = 0
  2787  001742  0E00               	movlw	0
  2788  001744  1A38               	xorwf	___ftsub@f2,f,c
  2789  001746  0E00               	movlw	0
  2790  001748  1A39               	xorwf	___ftsub@f2+1,f,c
  2791  00174A  0E80               	movlw	128
  2792  00174C  1A3A               	xorwf	___ftsub@f2+2,f,c
  2793  00174E  C035  F029         	movff	___ftsub@f1,___ftadd@f1
  2794  001752  C036  F02A         	movff	___ftsub@f1+1,___ftadd@f1+1
  2795  001756  C037  F02B         	movff	___ftsub@f1+2,___ftadd@f1+2
  2796  00175A  C038  F02C         	movff	___ftsub@f2,___ftadd@f2
  2797  00175E  C039  F02D         	movff	___ftsub@f2+1,___ftadd@f2+1
  2798  001762  C03A  F02E         	movff	___ftsub@f2+2,___ftadd@f2+2
  2799  001766  EC0A  F006         	call	___ftadd	;wreg free
  2800  00176A  C029  F035         	movff	?___ftadd,?___ftsub
  2801  00176E  C02A  F036         	movff	?___ftadd+1,?___ftsub+1
  2802  001772  C02B  F037         	movff	?___ftadd+2,?___ftsub+2
  2803  001776  0012               	return	
  2804  001778                     __end_of___ftsub:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           tblptrh	equ	0xFF7
  2808                           prodl	equ	0xFF3
  2809                           intcon	equ	0xFF2
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function ___ftadd *****************
  2815 ;; Defined at:
  2816 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  f1              3   40[COMRAM] float 
  2819 ;;  f2              3   43[COMRAM] float 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  exp1            1   51[COMRAM] unsigned char 
  2822 ;;  exp2            1   50[COMRAM] unsigned char 
  2823 ;;  sign            1   49[COMRAM] unsigned char 
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  3   40[COMRAM] float 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2, status,0, cstack
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         6       0       0       0       0       0       0
  2834 ;;      Locals:         3       0       0       0       0       0       0
  2835 ;;      Temps:          3       0       0       0       0       0       0
  2836 ;;      Totals:        12       0       0       0       0       0       0
  2837 ;;Total ram usage:       12 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    2
  2840 ;; This function calls:
  2841 ;;		___ftpack
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;;		___ftsub
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text14
  2849  000C14                     __ptext14:
  2850                           	opt stack 0
  2851  000C14                     ___ftadd:
  2852                           	opt stack 27
  2853                           
  2854                           ;incstack = 0
  2855  000C14  C02B  F02F         	movff	___ftadd@f1+2,??___ftadd
  2856  000C18  6A30               	clrf	(??___ftadd+1)& (0+255),c
  2857  000C1A  6A31               	clrf	(??___ftadd+2)& (0+255),c
  2858  000C1C  342A               	rlcf	___ftadd@f1+1,w,c
  2859  000C1E  362F               	rlcf	??___ftadd& (0+255),f,c
  2860  000C20  E301               	bnc	u1271
  2861  000C22  8030               	bsf	(??___ftadd+1)& (0+255),0,c
  2862  000C24                     u1271:
  2863  000C24  502F               	movf	??___ftadd,w,c
  2864  000C26  6E34               	movwf	___ftadd@exp1,c
  2865  000C28  C02E  F02F         	movff	___ftadd@f2+2,??___ftadd
  2866  000C2C  6A30               	clrf	(??___ftadd+1)& (0+255),c
  2867  000C2E  6A31               	clrf	(??___ftadd+2)& (0+255),c
  2868  000C30  342D               	rlcf	___ftadd@f2+1,w,c
  2869  000C32  362F               	rlcf	??___ftadd& (0+255),f,c
  2870  000C34  E301               	bnc	u1281
  2871  000C36  8030               	bsf	(??___ftadd+1)& (0+255),0,c
  2872  000C38                     u1281:
  2873  000C38  502F               	movf	??___ftadd,w,c
  2874  000C3A  6E33               	movwf	___ftadd@exp2,c
  2875  000C3C  5034               	movf	___ftadd@exp1,w,c
  2876  000C3E  B4D8               	btfsc	status,2,c
  2877  000C40  D00C               	goto	l595
  2878  000C42  5033               	movf	___ftadd@exp2,w,c
  2879  000C44  5C34               	subwf	___ftadd@exp1,w,c
  2880  000C46  B0D8               	btfsc	status,0,c
  2881  000C48  D00F               	goto	l1735
  2882  000C4A  5034               	movf	___ftadd@exp1,w,c
  2883  000C4C  0800               	sublw	0
  2884  000C4E  2433               	addwf	___ftadd@exp2,w,c
  2885  000C50  6E2F               	movwf	??___ftadd& (0+255),c
  2886  000C52  0E19               	movlw	25
  2887  000C54  5C2F               	subwf	??___ftadd,w,c
  2888  000C56  A0D8               	btfss	status,0,c
  2889  000C58  D007               	goto	l1735
  2890  000C5A                     l595:
  2891  000C5A  C02C  F029         	movff	___ftadd@f2,?___ftadd
  2892  000C5E  C02D  F02A         	movff	___ftadd@f2+1,?___ftadd+1
  2893  000C62  C02E  F02B         	movff	___ftadd@f2+2,?___ftadd+2
  2894  000C66  0012               	return	
  2895  000C68                     l1735:
  2896  000C68  5033               	movf	___ftadd@exp2,w,c
  2897  000C6A  B4D8               	btfsc	status,2,c
  2898  000C6C  D00C               	goto	l599
  2899  000C6E  5034               	movf	___ftadd@exp1,w,c
  2900  000C70  5C33               	subwf	___ftadd@exp2,w,c
  2901  000C72  B0D8               	btfsc	status,0,c
  2902  000C74  D00F               	goto	l1741
  2903  000C76  5033               	movf	___ftadd@exp2,w,c
  2904  000C78  0800               	sublw	0
  2905  000C7A  2434               	addwf	___ftadd@exp1,w,c
  2906  000C7C  6E2F               	movwf	??___ftadd& (0+255),c
  2907  000C7E  0E19               	movlw	25
  2908  000C80  5C2F               	subwf	??___ftadd,w,c
  2909  000C82  A0D8               	btfss	status,0,c
  2910  000C84  D007               	goto	l1741
  2911  000C86                     l599:
  2912  000C86  C029  F029         	movff	___ftadd@f1,?___ftadd
  2913  000C8A  C02A  F02A         	movff	___ftadd@f1+1,?___ftadd+1
  2914  000C8E  C02B  F02B         	movff	___ftadd@f1+2,?___ftadd+2
  2915  000C92  0012               	return	
  2916  000C94                     l1741:
  2917  000C94  0E06               	movlw	6
  2918  000C96  6E32               	movwf	___ftadd@sign,c
  2919  000C98  BE2B               	btfsc	___ftadd@f1+2,7,c
  2920  000C9A  8E32               	bsf	___ftadd@sign,7,c
  2921  000C9C  BE2E               	btfsc	___ftadd@f2+2,7,c
  2922  000C9E  8C32               	bsf	___ftadd@sign,6,c
  2923  000CA0  8E2A               	bsf	___ftadd@f1+1,7,c
  2924  000CA2  0EFF               	movlw	255
  2925  000CA4  1629               	andwf	___ftadd@f1,f,c
  2926  000CA6  0EFF               	movlw	255
  2927  000CA8  162A               	andwf	___ftadd@f1+1,f,c
  2928  000CAA  0E00               	movlw	0
  2929  000CAC  162B               	andwf	___ftadd@f1+2,f,c
  2930  000CAE  8E2D               	bsf	___ftadd@f2+1,7,c
  2931  000CB0  0EFF               	movlw	255
  2932  000CB2  162C               	andwf	___ftadd@f2,f,c
  2933  000CB4  0EFF               	movlw	255
  2934  000CB6  162D               	andwf	___ftadd@f2+1,f,c
  2935  000CB8  0E00               	movlw	0
  2936  000CBA  162E               	andwf	___ftadd@f2+2,f,c
  2937  000CBC  5033               	movf	___ftadd@exp2,w,c
  2938  000CBE  5C34               	subwf	___ftadd@exp1,w,c
  2939  000CC0  B0D8               	btfsc	status,0,c
  2940  000CC2  D01A               	goto	l1767
  2941  000CC4                     l1757:
  2942  000CC4  90D8               	bcf	status,0,c
  2943  000CC6  362C               	rlcf	___ftadd@f2,f,c
  2944  000CC8  362D               	rlcf	___ftadd@f2+1,f,c
  2945  000CCA  362E               	rlcf	___ftadd@f2+2,f,c
  2946  000CCC  0633               	decf	___ftadd@exp2,f,c
  2947  000CCE  5033               	movf	___ftadd@exp2,w,c
  2948  000CD0  1834               	xorwf	___ftadd@exp1,w,c
  2949  000CD2  B4D8               	btfsc	status,2,c
  2950  000CD4  D00D               	goto	l1765
  2951  000CD6  0632               	decf	___ftadd@sign,f,c
  2952  000CD8  C032  F02F         	movff	___ftadd@sign,??___ftadd
  2953  000CDC  0E07               	movlw	7
  2954  000CDE  162F               	andwf	??___ftadd,f,c
  2955  000CE0  B4D8               	btfsc	status,2,c
  2956  000CE2  D006               	goto	l1765
  2957  000CE4  D7EF               	goto	l1757
  2958  000CE6                     l1763:
  2959  000CE6  90D8               	bcf	status,0,c
  2960  000CE8  322B               	rrcf	___ftadd@f1+2,f,c
  2961  000CEA  322A               	rrcf	___ftadd@f1+1,f,c
  2962  000CEC  3229               	rrcf	___ftadd@f1,f,c
  2963  000CEE  2A34               	incf	___ftadd@exp1,f,c
  2964  000CF0                     l1765:
  2965  000CF0  5033               	movf	___ftadd@exp2,w,c
  2966  000CF2  6234               	cpfseq	___ftadd@exp1,c
  2967  000CF4  D7F8               	goto	l1763
  2968  000CF6  D01D               	goto	l610
  2969  000CF8                     l1767:
  2970  000CF8  5034               	movf	___ftadd@exp1,w,c
  2971  000CFA  5C33               	subwf	___ftadd@exp2,w,c
  2972  000CFC  B0D8               	btfsc	status,0,c
  2973  000CFE  D019               	goto	l610
  2974  000D00                     l1769:
  2975  000D00  90D8               	bcf	status,0,c
  2976  000D02  3629               	rlcf	___ftadd@f1,f,c
  2977  000D04  362A               	rlcf	___ftadd@f1+1,f,c
  2978  000D06  362B               	rlcf	___ftadd@f1+2,f,c
  2979  000D08  0634               	decf	___ftadd@exp1,f,c
  2980  000D0A  5033               	movf	___ftadd@exp2,w,c
  2981  000D0C  1834               	xorwf	___ftadd@exp1,w,c
  2982  000D0E  B4D8               	btfsc	status,2,c
  2983  000D10  D00D               	goto	l1777
  2984  000D12  0632               	decf	___ftadd@sign,f,c
  2985  000D14  C032  F02F         	movff	___ftadd@sign,??___ftadd
  2986  000D18  0E07               	movlw	7
  2987  000D1A  162F               	andwf	??___ftadd,f,c
  2988  000D1C  B4D8               	btfsc	status,2,c
  2989  000D1E  D006               	goto	l1777
  2990  000D20  D7EF               	goto	l1769
  2991  000D22                     l1775:
  2992  000D22  90D8               	bcf	status,0,c
  2993  000D24  322E               	rrcf	___ftadd@f2+2,f,c
  2994  000D26  322D               	rrcf	___ftadd@f2+1,f,c
  2995  000D28  322C               	rrcf	___ftadd@f2,f,c
  2996  000D2A  2A33               	incf	___ftadd@exp2,f,c
  2997  000D2C                     l1777:
  2998  000D2C  5033               	movf	___ftadd@exp2,w,c
  2999  000D2E  6234               	cpfseq	___ftadd@exp1,c
  3000  000D30  D7F8               	goto	l1775
  3001  000D32                     l610:
  3002  000D32  AE32               	btfss	___ftadd@sign,7,c
  3003  000D34  D00C               	goto	l619
  3004  000D36  0EFF               	movlw	255
  3005  000D38  1A29               	xorwf	___ftadd@f1,f,c
  3006  000D3A  0EFF               	movlw	255
  3007  000D3C  1A2A               	xorwf	___ftadd@f1+1,f,c
  3008  000D3E  0EFF               	movlw	255
  3009  000D40  1A2B               	xorwf	___ftadd@f1+2,f,c
  3010  000D42  0E01               	movlw	1
  3011  000D44  2629               	addwf	___ftadd@f1,f,c
  3012  000D46  0E00               	movlw	0
  3013  000D48  222A               	addwfc	___ftadd@f1+1,f,c
  3014  000D4A  0E00               	movlw	0
  3015  000D4C  222B               	addwfc	___ftadd@f1+2,f,c
  3016  000D4E                     l619:
  3017  000D4E  AC32               	btfss	___ftadd@sign,6,c
  3018  000D50  D00C               	goto	l1783
  3019  000D52  0EFF               	movlw	255
  3020  000D54  1A2C               	xorwf	___ftadd@f2,f,c
  3021  000D56  0EFF               	movlw	255
  3022  000D58  1A2D               	xorwf	___ftadd@f2+1,f,c
  3023  000D5A  0EFF               	movlw	255
  3024  000D5C  1A2E               	xorwf	___ftadd@f2+2,f,c
  3025  000D5E  0E01               	movlw	1
  3026  000D60  262C               	addwf	___ftadd@f2,f,c
  3027  000D62  0E00               	movlw	0
  3028  000D64  222D               	addwfc	___ftadd@f2+1,f,c
  3029  000D66  0E00               	movlw	0
  3030  000D68  222E               	addwfc	___ftadd@f2+2,f,c
  3031  000D6A                     l1783:
  3032  000D6A  0E00               	movlw	0
  3033  000D6C  6E32               	movwf	___ftadd@sign,c
  3034  000D6E  5029               	movf	___ftadd@f1,w,c
  3035  000D70  262C               	addwf	___ftadd@f2,f,c
  3036  000D72  502A               	movf	___ftadd@f1+1,w,c
  3037  000D74  222D               	addwfc	___ftadd@f2+1,f,c
  3038  000D76  502B               	movf	___ftadd@f1+2,w,c
  3039  000D78  222E               	addwfc	___ftadd@f2+2,f,c
  3040  000D7A  AE2E               	btfss	___ftadd@f2+2,7,c
  3041  000D7C  D00E               	goto	l1793
  3042  000D7E  0EFF               	movlw	255
  3043  000D80  1A2C               	xorwf	___ftadd@f2,f,c
  3044  000D82  0EFF               	movlw	255
  3045  000D84  1A2D               	xorwf	___ftadd@f2+1,f,c
  3046  000D86  0EFF               	movlw	255
  3047  000D88  1A2E               	xorwf	___ftadd@f2+2,f,c
  3048  000D8A  0E01               	movlw	1
  3049  000D8C  262C               	addwf	___ftadd@f2,f,c
  3050  000D8E  0E00               	movlw	0
  3051  000D90  222D               	addwfc	___ftadd@f2+1,f,c
  3052  000D92  0E00               	movlw	0
  3053  000D94  222E               	addwfc	___ftadd@f2+2,f,c
  3054  000D96  0E01               	movlw	1
  3055  000D98  6E32               	movwf	___ftadd@sign,c
  3056  000D9A                     l1793:
  3057  000D9A  C02C  F00F         	movff	___ftadd@f2,___ftpack@arg
  3058  000D9E  C02D  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  3059  000DA2  C02E  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  3060  000DA6  C034  F012         	movff	___ftadd@exp1,___ftpack@exp
  3061  000DAA  C032  F013         	movff	___ftadd@sign,___ftpack@sign
  3062  000DAE  ECFC  F008         	call	___ftpack	;wreg free
  3063  000DB2  C00F  F029         	movff	?___ftpack,?___ftadd
  3064  000DB6  C010  F02A         	movff	?___ftpack+1,?___ftadd+1
  3065  000DBA  C011  F02B         	movff	?___ftpack+2,?___ftadd+2
  3066  000DBE  0012               	return	
  3067  000DC0                     __end_of___ftadd:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           prodl	equ	0xFF3
  3072                           intcon	equ	0xFF2
  3073                           postinc0	equ	0xFEE
  3074                           wreg	equ	0xFE8
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function ___ftneg *****************
  3078 ;; Defined at:
  3079 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  f1              3   37[COMRAM] float 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  3   37[COMRAM] float 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3093 ;;      Params:         3       0       0       0       0       0       0
  3094 ;;      Locals:         0       0       0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0
  3096 ;;      Totals:         3       0       0       0       0       0       0
  3097 ;;Total ram usage:        3 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_main
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text15
  3108  0017C8                     __ptext15:
  3109                           	opt stack 0
  3110  0017C8                     ___ftneg:
  3111                           	opt stack 29
  3112                           
  3113                           ;incstack = 0
  3114  0017C8  0E7F               	movlw	127
  3115  0017CA  1428               	andwf	___ftneg@f1+2,w,c
  3116  0017CC  1027               	iorwf	___ftneg@f1+1,w,c
  3117  0017CE  1026               	iorwf	___ftneg@f1,w,c
  3118  0017D0  B4D8               	btfsc	status,2,c
  3119  0017D2  D006               	goto	l652
  3120  0017D4  0E00               	movlw	0
  3121  0017D6  1A26               	xorwf	___ftneg@f1,f,c
  3122  0017D8  0E00               	movlw	0
  3123  0017DA  1A27               	xorwf	___ftneg@f1+1,f,c
  3124  0017DC  0E80               	movlw	128
  3125  0017DE  1A28               	xorwf	___ftneg@f1+2,f,c
  3126  0017E0                     l652:
  3127  0017E0  C026  F026         	movff	___ftneg@f1,?___ftneg
  3128  0017E4  C027  F027         	movff	___ftneg@f1+1,?___ftneg+1
  3129  0017E8  C028  F028         	movff	___ftneg@f1+2,?___ftneg+2
  3130  0017EC  0012               	return	
  3131  0017EE                     __end_of___ftneg:
  3132                           	opt stack 0
  3133                           tblptru	equ	0xFF8
  3134                           tblptrh	equ	0xFF7
  3135                           prodl	equ	0xFF3
  3136                           intcon	equ	0xFF2
  3137                           postinc0	equ	0xFEE
  3138                           wreg	equ	0xFE8
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function ___ftmul *****************
  3142 ;; Defined at:
  3143 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  f1              3   22[COMRAM] float 
  3146 ;;  f2              3   25[COMRAM] float 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  f3_as_produc    3   32[COMRAM] unsigned um
  3149 ;;  sign            1   36[COMRAM] unsigned char 
  3150 ;;  cntr            1   35[COMRAM] unsigned char 
  3151 ;;  exp             1   31[COMRAM] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  3   22[COMRAM] float 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3161 ;;      Params:         6       0       0       0       0       0       0
  3162 ;;      Locals:         6       0       0       0       0       0       0
  3163 ;;      Temps:          3       0       0       0       0       0       0
  3164 ;;      Totals:        15       0       0       0       0       0       0
  3165 ;;Total ram usage:       15 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    2
  3168 ;; This function calls:
  3169 ;;		___ftpack
  3170 ;; This function is called by:
  3171 ;;		_main
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text16
  3176  000EB6                     __ptext16:
  3177                           	opt stack 0
  3178  000EB6                     ___ftmul:
  3179                           	opt stack 28
  3180                           
  3181                           ;incstack = 0
  3182  000EB6  C019  F01D         	movff	___ftmul@f1+2,??___ftmul
  3183  000EBA  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  3184  000EBC  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  3185  000EBE  3418               	rlcf	___ftmul@f1+1,w,c
  3186  000EC0  361D               	rlcf	??___ftmul& (0+255),f,c
  3187  000EC2  E301               	bnc	u1751
  3188  000EC4  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  3189  000EC6                     u1751:
  3190  000EC6  501D               	movf	??___ftmul,w,c
  3191  000EC8  6E20               	movwf	___ftmul@exp,c
  3192  000ECA  6620               	tstfsz	___ftmul@exp& (0+255),c
  3193  000ECC  D007               	goto	l2147
  3194  000ECE  0E00               	movlw	0
  3195  000ED0  6E17               	movwf	?___ftmul,c
  3196  000ED2  0E00               	movlw	0
  3197  000ED4  6E18               	movwf	?___ftmul+1,c
  3198  000ED6  0E00               	movlw	0
  3199  000ED8  6E19               	movwf	?___ftmul+2,c
  3200  000EDA  0012               	return	
  3201  000EDC                     l2147:
  3202  000EDC  C01C  F01D         	movff	___ftmul@f2+2,??___ftmul
  3203  000EE0  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  3204  000EE2  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  3205  000EE4  341B               	rlcf	___ftmul@f2+1,w,c
  3206  000EE6  361D               	rlcf	??___ftmul& (0+255),f,c
  3207  000EE8  E301               	bnc	u1771
  3208  000EEA  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  3209  000EEC                     u1771:
  3210  000EEC  501D               	movf	??___ftmul,w,c
  3211  000EEE  6E25               	movwf	___ftmul@sign,c
  3212  000EF0  6625               	tstfsz	___ftmul@sign& (0+255),c
  3213  000EF2  D007               	goto	l2153
  3214  000EF4  0E00               	movlw	0
  3215  000EF6  6E17               	movwf	?___ftmul,c
  3216  000EF8  0E00               	movlw	0
  3217  000EFA  6E18               	movwf	?___ftmul+1,c
  3218  000EFC  0E00               	movlw	0
  3219  000EFE  6E19               	movwf	?___ftmul+2,c
  3220  000F00  0012               	return	
  3221  000F02                     l2153:
  3222  000F02  5025               	movf	___ftmul@sign,w,c
  3223  000F04  0F7B               	addlw	123
  3224  000F06  2620               	addwf	___ftmul@exp,f,c
  3225  000F08  C019  F025         	movff	___ftmul@f1+2,___ftmul@sign
  3226  000F0C  501C               	movf	___ftmul@f2+2,w,c
  3227  000F0E  1A25               	xorwf	___ftmul@sign,f,c
  3228  000F10  0E80               	movlw	128
  3229  000F12  1625               	andwf	___ftmul@sign,f,c
  3230  000F14  8E18               	bsf	___ftmul@f1+1,7,c
  3231  000F16  8E1B               	bsf	___ftmul@f2+1,7,c
  3232  000F18  0EFF               	movlw	255
  3233  000F1A  161A               	andwf	___ftmul@f2,f,c
  3234  000F1C  0EFF               	movlw	255
  3235  000F1E  161B               	andwf	___ftmul@f2+1,f,c
  3236  000F20  0E00               	movlw	0
  3237  000F22  161C               	andwf	___ftmul@f2+2,f,c
  3238  000F24  0E00               	movlw	0
  3239  000F26  6E21               	movwf	___ftmul@f3_as_product,c
  3240  000F28  0E00               	movlw	0
  3241  000F2A  6E22               	movwf	___ftmul@f3_as_product+1,c
  3242  000F2C  0E00               	movlw	0
  3243  000F2E  6E23               	movwf	___ftmul@f3_as_product+2,c
  3244  000F30  0E07               	movlw	7
  3245  000F32  6E24               	movwf	___ftmul@cntr,c
  3246  000F34                     l2167:
  3247  000F34  A017               	btfss	___ftmul@f1,0,c
  3248  000F36  D006               	goto	l2171
  3249  000F38  501A               	movf	___ftmul@f2,w,c
  3250  000F3A  2621               	addwf	___ftmul@f3_as_product,f,c
  3251  000F3C  501B               	movf	___ftmul@f2+1,w,c
  3252  000F3E  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  3253  000F40  501C               	movf	___ftmul@f2+2,w,c
  3254  000F42  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  3255  000F44                     l2171:
  3256  000F44  90D8               	bcf	status,0,c
  3257  000F46  3219               	rrcf	___ftmul@f1+2,f,c
  3258  000F48  3218               	rrcf	___ftmul@f1+1,f,c
  3259  000F4A  3217               	rrcf	___ftmul@f1,f,c
  3260  000F4C  90D8               	bcf	status,0,c
  3261  000F4E  361A               	rlcf	___ftmul@f2,f,c
  3262  000F50  361B               	rlcf	___ftmul@f2+1,f,c
  3263  000F52  361C               	rlcf	___ftmul@f2+2,f,c
  3264  000F54  2E24               	decfsz	___ftmul@cntr,f,c
  3265  000F56  D7EE               	goto	l2167
  3266  000F58  0E09               	movlw	9
  3267  000F5A  6E24               	movwf	___ftmul@cntr,c
  3268  000F5C                     l2177:
  3269  000F5C  A017               	btfss	___ftmul@f1,0,c
  3270  000F5E  D006               	goto	l2181
  3271  000F60  501A               	movf	___ftmul@f2,w,c
  3272  000F62  2621               	addwf	___ftmul@f3_as_product,f,c
  3273  000F64  501B               	movf	___ftmul@f2+1,w,c
  3274  000F66  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  3275  000F68  501C               	movf	___ftmul@f2+2,w,c
  3276  000F6A  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  3277  000F6C                     l2181:
  3278  000F6C  90D8               	bcf	status,0,c
  3279  000F6E  3219               	rrcf	___ftmul@f1+2,f,c
  3280  000F70  3218               	rrcf	___ftmul@f1+1,f,c
  3281  000F72  3217               	rrcf	___ftmul@f1,f,c
  3282  000F74  90D8               	bcf	status,0,c
  3283  000F76  3223               	rrcf	___ftmul@f3_as_product+2,f,c
  3284  000F78  3222               	rrcf	___ftmul@f3_as_product+1,f,c
  3285  000F7A  3221               	rrcf	___ftmul@f3_as_product,f,c
  3286  000F7C  2E24               	decfsz	___ftmul@cntr,f,c
  3287  000F7E  D7EE               	goto	l2177
  3288  000F80  C021  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  3289  000F84  C022  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3290  000F88  C023  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3291  000F8C  C020  F012         	movff	___ftmul@exp,___ftpack@exp
  3292  000F90  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  3293  000F94  ECFC  F008         	call	___ftpack	;wreg free
  3294  000F98  C00F  F017         	movff	?___ftpack,?___ftmul
  3295  000F9C  C010  F018         	movff	?___ftpack+1,?___ftmul+1
  3296  000FA0  C011  F019         	movff	?___ftpack+2,?___ftmul+2
  3297  000FA4  0012               	return	
  3298  000FA6                     __end_of___ftmul:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function ___ftge *****************
  3309 ;; Defined at:
  3310 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  ff1             3   14[COMRAM] float 
  3313 ;;  ff2             3   17[COMRAM] float 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3325 ;;      Params:         6       0       0       0       0       0       0
  3326 ;;      Locals:         0       0       0       0       0       0       0
  3327 ;;      Temps:          3       0       0       0       0       0       0
  3328 ;;      Totals:         9       0       0       0       0       0       0
  3329 ;;Total ram usage:        9 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    1
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_main
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text17
  3340  0013D4                     __ptext17:
  3341                           	opt stack 0
  3342  0013D4                     ___ftge:
  3343                           	opt stack 29
  3344                           
  3345                           ;incstack = 0
  3346  0013D4  AE11               	btfss	___ftge@ff1+2,7,c
  3347  0013D6  D016               	goto	l2199
  3348  0013D8  C00F  F015         	movff	___ftge@ff1,??___ftge
  3349  0013DC  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  3350  0013E0  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  3351  0013E4  1E15               	comf	??___ftge,f,c
  3352  0013E6  1E16               	comf	??___ftge+1,f,c
  3353  0013E8  1E17               	comf	??___ftge+2,f,c
  3354  0013EA  2A15               	incf	??___ftge,f,c
  3355  0013EC  0E00               	movlw	0
  3356  0013EE  2216               	addwfc	??___ftge+1,f,c
  3357  0013F0  2217               	addwfc	??___ftge+2,f,c
  3358  0013F2  0E00               	movlw	0
  3359  0013F4  2415               	addwf	??___ftge,w,c
  3360  0013F6  6E0F               	movwf	___ftge@ff1,c
  3361  0013F8  0E00               	movlw	0
  3362  0013FA  2016               	addwfc	??___ftge+1,w,c
  3363  0013FC  6E10               	movwf	___ftge@ff1+1,c
  3364  0013FE  0E80               	movlw	128
  3365  001400  2017               	addwfc	??___ftge+2,w,c
  3366  001402  6E11               	movwf	___ftge@ff1+2,c
  3367  001404                     l2199:
  3368  001404  AE14               	btfss	___ftge@ff2+2,7,c
  3369  001406  D016               	goto	l2203
  3370  001408  C012  F015         	movff	___ftge@ff2,??___ftge
  3371  00140C  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  3372  001410  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  3373  001414  1E15               	comf	??___ftge,f,c
  3374  001416  1E16               	comf	??___ftge+1,f,c
  3375  001418  1E17               	comf	??___ftge+2,f,c
  3376  00141A  2A15               	incf	??___ftge,f,c
  3377  00141C  0E00               	movlw	0
  3378  00141E  2216               	addwfc	??___ftge+1,f,c
  3379  001420  2217               	addwfc	??___ftge+2,f,c
  3380  001422  0E00               	movlw	0
  3381  001424  2415               	addwf	??___ftge,w,c
  3382  001426  6E12               	movwf	___ftge@ff2,c
  3383  001428  0E00               	movlw	0
  3384  00142A  2016               	addwfc	??___ftge+1,w,c
  3385  00142C  6E13               	movwf	___ftge@ff2+1,c
  3386  00142E  0E80               	movlw	128
  3387  001430  2017               	addwfc	??___ftge+2,w,c
  3388  001432  6E14               	movwf	___ftge@ff2+2,c
  3389  001434                     l2203:
  3390  001434  0E00               	movlw	0
  3391  001436  1A0F               	xorwf	___ftge@ff1,f,c
  3392  001438  0E00               	movlw	0
  3393  00143A  1A10               	xorwf	___ftge@ff1+1,f,c
  3394  00143C  0E80               	movlw	128
  3395  00143E  1A11               	xorwf	___ftge@ff1+2,f,c
  3396  001440  0E00               	movlw	0
  3397  001442  1A12               	xorwf	___ftge@ff2,f,c
  3398  001444  0E00               	movlw	0
  3399  001446  1A13               	xorwf	___ftge@ff2+1,f,c
  3400  001448  0E80               	movlw	128
  3401  00144A  1A14               	xorwf	___ftge@ff2+2,f,c
  3402  00144C  5012               	movf	___ftge@ff2,w,c
  3403  00144E  5C0F               	subwf	___ftge@ff1,w,c
  3404  001450  5013               	movf	___ftge@ff2+1,w,c
  3405  001452  5810               	subwfb	___ftge@ff1+1,w,c
  3406  001454  5014               	movf	___ftge@ff2+2,w,c
  3407  001456  5811               	subwfb	___ftge@ff1+2,w,c
  3408  001458  B0D8               	btfsc	status,0,c
  3409  00145A  D002               	goto	l2209
  3410  00145C  90D8               	bcf	status,0,c
  3411  00145E  0012               	return	
  3412  001460                     l2209:
  3413  001460  80D8               	bsf	status,0,c
  3414  001462  0012               	return	
  3415  001464                     __end_of___ftge:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           postinc0	equ	0xFEE
  3422                           wreg	equ	0xFE8
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function ___ftdiv *****************
  3426 ;; Defined at:
  3427 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  f1              3   22[COMRAM] float 
  3430 ;;  f2              3   25[COMRAM] float 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  f3              3   32[COMRAM] float 
  3433 ;;  sign            1   36[COMRAM] unsigned char 
  3434 ;;  exp             1   35[COMRAM] unsigned char 
  3435 ;;  cntr            1   31[COMRAM] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  3   22[COMRAM] float 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         6       0       0       0       0       0       0
  3446 ;;      Locals:         6       0       0       0       0       0       0
  3447 ;;      Temps:          3       0       0       0       0       0       0
  3448 ;;      Totals:        15       0       0       0       0       0       0
  3449 ;;Total ram usage:       15 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    2
  3452 ;; This function calls:
  3453 ;;		___ftpack
  3454 ;; This function is called by:
  3455 ;;		_main
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text18
  3460  000FA6                     __ptext18:
  3461                           	opt stack 0
  3462  000FA6                     ___ftdiv:
  3463                           	opt stack 28
  3464                           
  3465                           ;incstack = 0
  3466  000FA6  C019  F01D         	movff	___ftdiv@f1+2,??___ftdiv
  3467  000FAA  6A1E               	clrf	(??___ftdiv+1)& (0+255),c
  3468  000FAC  6A1F               	clrf	(??___ftdiv+2)& (0+255),c
  3469  000FAE  3418               	rlcf	___ftdiv@f1+1,w,c
  3470  000FB0  361D               	rlcf	??___ftdiv& (0+255),f,c
  3471  000FB2  E301               	bnc	u1701
  3472  000FB4  801E               	bsf	(??___ftdiv+1)& (0+255),0,c
  3473  000FB6                     u1701:
  3474  000FB6  501D               	movf	??___ftdiv,w,c
  3475  000FB8  6E24               	movwf	___ftdiv@exp,c
  3476  000FBA  6624               	tstfsz	___ftdiv@exp& (0+255),c
  3477  000FBC  D007               	goto	l2101
  3478  000FBE  0E00               	movlw	0
  3479  000FC0  6E17               	movwf	?___ftdiv,c
  3480  000FC2  0E00               	movlw	0
  3481  000FC4  6E18               	movwf	?___ftdiv+1,c
  3482  000FC6  0E00               	movlw	0
  3483  000FC8  6E19               	movwf	?___ftdiv+2,c
  3484  000FCA  0012               	return	
  3485  000FCC                     l2101:
  3486  000FCC  C01C  F01D         	movff	___ftdiv@f2+2,??___ftdiv
  3487  000FD0  6A1E               	clrf	(??___ftdiv+1)& (0+255),c
  3488  000FD2  6A1F               	clrf	(??___ftdiv+2)& (0+255),c
  3489  000FD4  341B               	rlcf	___ftdiv@f2+1,w,c
  3490  000FD6  361D               	rlcf	??___ftdiv& (0+255),f,c
  3491  000FD8  E301               	bnc	u1721
  3492  000FDA  801E               	bsf	(??___ftdiv+1)& (0+255),0,c
  3493  000FDC                     u1721:
  3494  000FDC  501D               	movf	??___ftdiv,w,c
  3495  000FDE  6E25               	movwf	___ftdiv@sign,c
  3496  000FE0  6625               	tstfsz	___ftdiv@sign& (0+255),c
  3497  000FE2  D007               	goto	l2107
  3498  000FE4  0E00               	movlw	0
  3499  000FE6  6E17               	movwf	?___ftdiv,c
  3500  000FE8  0E00               	movlw	0
  3501  000FEA  6E18               	movwf	?___ftdiv+1,c
  3502  000FEC  0E00               	movlw	0
  3503  000FEE  6E19               	movwf	?___ftdiv+2,c
  3504  000FF0  0012               	return	
  3505  000FF2                     l2107:
  3506  000FF2  0E00               	movlw	0
  3507  000FF4  6E21               	movwf	___ftdiv@f3,c
  3508  000FF6  0E00               	movlw	0
  3509  000FF8  6E22               	movwf	___ftdiv@f3+1,c
  3510  000FFA  0E00               	movlw	0
  3511  000FFC  6E23               	movwf	___ftdiv@f3+2,c
  3512  000FFE  5025               	movf	___ftdiv@sign,w,c
  3513  001000  0F89               	addlw	137
  3514  001002  5E24               	subwf	___ftdiv@exp,f,c
  3515  001004  C019  F025         	movff	___ftdiv@f1+2,___ftdiv@sign
  3516  001008  501C               	movf	___ftdiv@f2+2,w,c
  3517  00100A  1A25               	xorwf	___ftdiv@sign,f,c
  3518  00100C  0E80               	movlw	128
  3519  00100E  1625               	andwf	___ftdiv@sign,f,c
  3520  001010  8E18               	bsf	___ftdiv@f1+1,7,c
  3521  001012  0EFF               	movlw	255
  3522  001014  1617               	andwf	___ftdiv@f1,f,c
  3523  001016  0EFF               	movlw	255
  3524  001018  1618               	andwf	___ftdiv@f1+1,f,c
  3525  00101A  0E00               	movlw	0
  3526  00101C  1619               	andwf	___ftdiv@f1+2,f,c
  3527  00101E  8E1B               	bsf	___ftdiv@f2+1,7,c
  3528  001020  0EFF               	movlw	255
  3529  001022  161A               	andwf	___ftdiv@f2,f,c
  3530  001024  0EFF               	movlw	255
  3531  001026  161B               	andwf	___ftdiv@f2+1,f,c
  3532  001028  0E00               	movlw	0
  3533  00102A  161C               	andwf	___ftdiv@f2+2,f,c
  3534  00102C  0E18               	movlw	24
  3535  00102E  6E20               	movwf	___ftdiv@cntr,c
  3536  001030                     l2127:
  3537  001030  90D8               	bcf	status,0,c
  3538  001032  3621               	rlcf	___ftdiv@f3,f,c
  3539  001034  3622               	rlcf	___ftdiv@f3+1,f,c
  3540  001036  3623               	rlcf	___ftdiv@f3+2,f,c
  3541  001038  501A               	movf	___ftdiv@f2,w,c
  3542  00103A  5C17               	subwf	___ftdiv@f1,w,c
  3543  00103C  501B               	movf	___ftdiv@f2+1,w,c
  3544  00103E  5818               	subwfb	___ftdiv@f1+1,w,c
  3545  001040  501C               	movf	___ftdiv@f2+2,w,c
  3546  001042  5819               	subwfb	___ftdiv@f1+2,w,c
  3547  001044  A0D8               	btfss	status,0,c
  3548  001046  D007               	goto	l630
  3549  001048  501A               	movf	___ftdiv@f2,w,c
  3550  00104A  5E17               	subwf	___ftdiv@f1,f,c
  3551  00104C  501B               	movf	___ftdiv@f2+1,w,c
  3552  00104E  5A18               	subwfb	___ftdiv@f1+1,f,c
  3553  001050  501C               	movf	___ftdiv@f2+2,w,c
  3554  001052  5A19               	subwfb	___ftdiv@f1+2,f,c
  3555  001054  8021               	bsf	___ftdiv@f3,0,c
  3556  001056                     l630:
  3557  001056  90D8               	bcf	status,0,c
  3558  001058  3617               	rlcf	___ftdiv@f1,f,c
  3559  00105A  3618               	rlcf	___ftdiv@f1+1,f,c
  3560  00105C  3619               	rlcf	___ftdiv@f1+2,f,c
  3561  00105E  2E20               	decfsz	___ftdiv@cntr,f,c
  3562  001060  D7E7               	goto	l2127
  3563  001062  C021  F00F         	movff	___ftdiv@f3,___ftpack@arg
  3564  001066  C022  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3565  00106A  C023  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3566  00106E  C024  F012         	movff	___ftdiv@exp,___ftpack@exp
  3567  001072  C025  F013         	movff	___ftdiv@sign,___ftpack@sign
  3568  001076  ECFC  F008         	call	___ftpack	;wreg free
  3569  00107A  C00F  F017         	movff	?___ftpack,?___ftdiv
  3570  00107E  C010  F018         	movff	?___ftpack+1,?___ftdiv+1
  3571  001082  C011  F019         	movff	?___ftpack+2,?___ftdiv+2
  3572  001086  0012               	return	
  3573  001088                     __end_of___ftdiv:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           prodl	equ	0xFF3
  3578                           intcon	equ	0xFF2
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function ___ftpack *****************
  3584 ;; Defined at:
  3585 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  arg             3   14[COMRAM] unsigned um
  3588 ;;  exp             1   17[COMRAM] unsigned char 
  3589 ;;  sign            1   18[COMRAM] unsigned char 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  3   14[COMRAM] float 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3601 ;;      Params:         5       0       0       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0
  3603 ;;      Temps:          3       0       0       0       0       0       0
  3604 ;;      Totals:         8       0       0       0       0       0       0
  3605 ;;Total ram usage:        8 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    1
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		___ftadd
  3612 ;;		___ftdiv
  3613 ;;		___ftmul
  3614 ;;		___lwtoft
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text19
  3619  0011F8                     __ptext19:
  3620                           	opt stack 0
  3621  0011F8                     ___ftpack:
  3622                           	opt stack 28
  3623                           
  3624                           ;incstack = 0
  3625  0011F8  5012               	movf	___ftpack@exp,w,c
  3626  0011FA  B4D8               	btfsc	status,2,c
  3627  0011FC  D005               	goto	l1669
  3628  0011FE  500F               	movf	___ftpack@arg,w,c
  3629  001200  1010               	iorwf	___ftpack@arg+1,w,c
  3630  001202  1011               	iorwf	___ftpack@arg+2,w,c
  3631  001204  A4D8               	btfss	status,2,c
  3632  001206  D00C               	goto	l1675
  3633  001208                     l1669:
  3634  001208  0E00               	movlw	0
  3635  00120A  6E0F               	movwf	?___ftpack,c
  3636  00120C  0E00               	movlw	0
  3637  00120E  6E10               	movwf	?___ftpack+1,c
  3638  001210  0E00               	movlw	0
  3639  001212  6E11               	movwf	?___ftpack+2,c
  3640  001214  0012               	return	
  3641  001216                     l1673:
  3642  001216  2A12               	incf	___ftpack@exp,f,c
  3643  001218  90D8               	bcf	status,0,c
  3644  00121A  3211               	rrcf	___ftpack@arg+2,f,c
  3645  00121C  3210               	rrcf	___ftpack@arg+1,f,c
  3646  00121E  320F               	rrcf	___ftpack@arg,f,c
  3647  001220                     l1675:
  3648  001220  0E00               	movlw	0
  3649  001222  140F               	andwf	___ftpack@arg,w,c
  3650  001224  6E14               	movwf	??___ftpack& (0+255),c
  3651  001226  0E00               	movlw	0
  3652  001228  1410               	andwf	___ftpack@arg+1,w,c
  3653  00122A  6E15               	movwf	(??___ftpack+1)& (0+255),c
  3654  00122C  0EFE               	movlw	254
  3655  00122E  1411               	andwf	___ftpack@arg+2,w,c
  3656  001230  6E16               	movwf	(??___ftpack+2)& (0+255),c
  3657  001232  5014               	movf	??___ftpack,w,c
  3658  001234  1015               	iorwf	??___ftpack+1,w,c
  3659  001236  1016               	iorwf	??___ftpack+2,w,c
  3660  001238  B4D8               	btfsc	status,2,c
  3661  00123A  D00C               	goto	l1681
  3662  00123C  D7EC               	goto	l1673
  3663  00123E                     l1677:
  3664  00123E  2A12               	incf	___ftpack@exp,f,c
  3665  001240  0E01               	movlw	1
  3666  001242  260F               	addwf	___ftpack@arg,f,c
  3667  001244  0E00               	movlw	0
  3668  001246  2210               	addwfc	___ftpack@arg+1,f,c
  3669  001248  0E00               	movlw	0
  3670  00124A  2211               	addwfc	___ftpack@arg+2,f,c
  3671  00124C  90D8               	bcf	status,0,c
  3672  00124E  3211               	rrcf	___ftpack@arg+2,f,c
  3673  001250  3210               	rrcf	___ftpack@arg+1,f,c
  3674  001252  320F               	rrcf	___ftpack@arg,f,c
  3675  001254                     l1681:
  3676  001254  0E00               	movlw	0
  3677  001256  140F               	andwf	___ftpack@arg,w,c
  3678  001258  6E14               	movwf	??___ftpack& (0+255),c
  3679  00125A  0E00               	movlw	0
  3680  00125C  1410               	andwf	___ftpack@arg+1,w,c
  3681  00125E  6E15               	movwf	(??___ftpack+1)& (0+255),c
  3682  001260  0EFF               	movlw	255
  3683  001262  1411               	andwf	___ftpack@arg+2,w,c
  3684  001264  6E16               	movwf	(??___ftpack+2)& (0+255),c
  3685  001266  5014               	movf	??___ftpack,w,c
  3686  001268  1015               	iorwf	??___ftpack+1,w,c
  3687  00126A  1016               	iorwf	??___ftpack+2,w,c
  3688  00126C  B4D8               	btfsc	status,2,c
  3689  00126E  D006               	goto	l1685
  3690  001270  D7E6               	goto	l1677
  3691  001272                     l1683:
  3692  001272  0612               	decf	___ftpack@exp,f,c
  3693  001274  90D8               	bcf	status,0,c
  3694  001276  360F               	rlcf	___ftpack@arg,f,c
  3695  001278  3610               	rlcf	___ftpack@arg+1,f,c
  3696  00127A  3611               	rlcf	___ftpack@arg+2,f,c
  3697  00127C                     l1685:
  3698  00127C  AE10               	btfss	___ftpack@arg+1,7,c
  3699  00127E  D7F9               	goto	l1683
  3700  001280  A012               	btfss	___ftpack@exp,0,c
  3701  001282  9E10               	bcf	___ftpack@arg+1,7,c
  3702  001284  90D8               	bcf	status,0,c
  3703  001286  3212               	rrcf	___ftpack@exp,f,c
  3704  001288  5012               	movf	___ftpack@exp,w,c
  3705  00128A  1211               	iorwf	___ftpack@arg+2,f,c
  3706  00128C  5013               	movf	___ftpack@sign,w,c
  3707  00128E  A4D8               	btfss	status,2,c
  3708  001290  8E11               	bsf	___ftpack@arg+2,7,c
  3709  001292  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  3710  001296  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  3711  00129A  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  3712  00129E  0012               	return	
  3713  0012A0                     __end_of___ftpack:
  3714                           	opt stack 0
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           prodl	equ	0xFF3
  3718                           intcon	equ	0xFF2
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _UART_INIT *****************
  3724 ;; Defined at:
  3725 ;;		line 314 in file "main.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;		None
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;		None
  3730 ;; Return value:  Size  Location     Type
  3731 ;;		None               void
  3732 ;; Registers used:
  3733 ;;		wreg, status,2
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3739 ;;      Params:         0       0       0       0       0       0       0
  3740 ;;      Locals:         0       0       0       0       0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0       0
  3742 ;;      Totals:         0       0       0       0       0       0       0
  3743 ;;Total ram usage:        0 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    1
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text20
  3754  001812                     __ptext20:
  3755                           	opt stack 0
  3756  001812                     _UART_INIT:
  3757                           	opt stack 29
  3758                           
  3759                           ;main.c: 316: TRISCbits.TRISC6 = 1;
  3760                           
  3761                           ;incstack = 0
  3762  001812  8C94               	bsf	3988,6,c	;volatile
  3763                           
  3764                           ;main.c: 317: TRISCbits.TRISC7 = 1;
  3765  001814  8E94               	bsf	3988,7,c	;volatile
  3766                           
  3767                           ;main.c: 318: ANSELCbits.ANSC6 = 0;
  3768  001816  010F               	movlb	15	; () banked
  3769  001818  9D3A               	bcf	58,6,b	;volatile
  3770                           
  3771                           ;main.c: 319: ANSELCbits.ANSC7 = 0;
  3772  00181A  010F               	movlb	15	; () banked
  3773  00181C  9F3A               	bcf	58,7,b	;volatile
  3774                           
  3775                           ; BSR set to: 15
  3776                           ;main.c: 320: SPBRG1 = 12;
  3777  00181E  0E0C               	movlw	12
  3778  001820  6EAF               	movwf	4015,c	;volatile
  3779                           
  3780                           ;main.c: 321: SPBRGH1 = 0;
  3781  001822  0E00               	movlw	0
  3782  001824  6EB0               	movwf	4016,c	;volatile
  3783                           
  3784                           ; BSR set to: 15
  3785                           ;main.c: 324: BAUDCON1bits.BRG16 = 1;
  3786  001826  86B8               	bsf	4024,3,c	;volatile
  3787                           
  3788                           ; BSR set to: 15
  3789                           ;main.c: 326: TXSTAbits.BRGH = 0;
  3790  001828  94AC               	bcf	4012,2,c	;volatile
  3791                           
  3792                           ; BSR set to: 15
  3793                           ;main.c: 327: TXSTAbits.SYNC = 0;
  3794  00182A  98AC               	bcf	4012,4,c	;volatile
  3795                           
  3796                           ; BSR set to: 15
  3797                           ;main.c: 328: TXSTAbits.TXEN = 1;
  3798  00182C  8AAC               	bsf	4012,5,c	;volatile
  3799                           
  3800                           ; BSR set to: 15
  3801                           ;main.c: 329: RCSTAbits.SPEN = 1;
  3802  00182E  8EAB               	bsf	4011,7,c	;volatile
  3803                           
  3804                           ; BSR set to: 15
  3805  001830  0012               	return	
  3806  001832                     __end_of_UART_INIT:
  3807                           	opt stack 0
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           prodl	equ	0xFF3
  3811                           intcon	equ	0xFF2
  3812                           postinc0	equ	0xFEE
  3813                           wreg	equ	0xFE8
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function _PWM_OUT *****************
  3817 ;; Defined at:
  3818 ;;		line 248 in file "main.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;  duty_cycle      2   52[COMRAM] unsigned int 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;		None               void
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3832 ;;      Params:         2       0       0       0       0       0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0
  3834 ;;      Temps:          2       0       0       0       0       0       0
  3835 ;;      Totals:         4       0       0       0       0       0       0
  3836 ;;Total ram usage:        4 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    1
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_main
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text21
  3847  001702                     __ptext21:
  3848                           	opt stack 0
  3849  001702                     _PWM_OUT:
  3850                           	opt stack 29
  3851                           
  3852                           ;main.c: 250: PWM_HB = duty_cycle>>2;
  3853                           
  3854                           ; BSR set to: 15
  3855                           ;incstack = 0
  3856  001702  C035  F037         	movff	PWM_OUT@duty_cycle,??_PWM_OUT
  3857  001706  C036  F038         	movff	PWM_OUT@duty_cycle+1,??_PWM_OUT+1
  3858  00170A  90D8               	bcf	status,0,c
  3859  00170C  3238               	rrcf	??_PWM_OUT+1,f,c
  3860  00170E  3237               	rrcf	??_PWM_OUT,f,c
  3861  001710  90D8               	bcf	status,0,c
  3862  001712  3238               	rrcf	??_PWM_OUT+1,f,c
  3863  001714  3237               	rrcf	??_PWM_OUT,f,c
  3864  001716  C037  F043         	movff	??_PWM_OUT,_PWM_HB
  3865  00171A  C038  F044         	movff	??_PWM_OUT+1,_PWM_HB+1
  3866                           
  3867                           ;main.c: 251: PWM_LB = duty_cycle & 0x0003;
  3868  00171E  0E03               	movlw	3
  3869  001720  1435               	andwf	PWM_OUT@duty_cycle,w,c
  3870  001722  6E45               	movwf	_PWM_LB,c
  3871  001724  6A46               	clrf	_PWM_LB+1,c
  3872                           
  3873                           ;main.c: 252: CCPR5L = PWM_HB;
  3874  001726  C043  FF55         	movff	_PWM_HB,3925	;volatile
  3875                           
  3876                           ;main.c: 253: CCP5CON = (CCP5CON & 0b11001111)|(PWM_LB<<4);
  3877  00172A  C045  F037         	movff	_PWM_LB,??_PWM_OUT
  3878  00172E  3A37               	swapf	??_PWM_OUT,f,c
  3879  001730  0EF0               	movlw	240
  3880  001732  1637               	andwf	??_PWM_OUT,f,c
  3881  001734  010F               	movlb	15	; () banked
  3882  001736  5154               	movf	84,w,b	;volatile
  3883  001738  0BCF               	andlw	207
  3884  00173A  1037               	iorwf	??_PWM_OUT,w,c
  3885  00173C  010F               	movlb	15	; () banked
  3886  00173E  6F54               	movwf	84,b	;volatile
  3887                           
  3888                           ; BSR set to: 15
  3889  001740  0012               	return	
  3890  001742                     __end_of_PWM_OUT:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           prodl	equ	0xFF3
  3895                           intcon	equ	0xFF2
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _LOW_BATTERY *****************
  3901 ;; Defined at:
  3902 ;;		line 292 in file "main.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  delayy          1   18[COMRAM] unsigned char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;		None               void
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3916 ;;      Params:         0       0       0       0       0       0       0
  3917 ;;      Locals:         1       0       0       0       0       0       0
  3918 ;;      Temps:          1       0       0       0       0       0       0
  3919 ;;      Totals:         2       0       0       0       0       0       0
  3920 ;;Total ram usage:        2 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    3
  3923 ;; This function calls:
  3924 ;;		_lcd_goto
  3925 ;;		_lcd_writesc
  3926 ;; This function is called by:
  3927 ;;		_main
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text22
  3932  0015CC                     __ptext22:
  3933                           	opt stack 0
  3934  0015CC                     _LOW_BATTERY:
  3935                           	opt stack 27
  3936                           
  3937                           ;main.c: 294: if(CM1CON0bits.C1OUT){
  3938                           
  3939                           ; BSR set to: 15
  3940                           ;incstack = 0
  3941  0015CC  AC79               	btfss	3961,6,c	;volatile
  3942  0015CE  0012               	return	
  3943                           
  3944                           ;main.c: 296: lcd_goto(0x40);
  3945  0015D0  0E40               	movlw	64
  3946  0015D2  EC26  F00C         	call	_lcd_goto
  3947                           
  3948                           ;main.c: 297: lcd_writesc("Low battery     ");
  3949  0015D6  0E06               	movlw	high STR_5
  3950  0015D8  6E11               	movwf	lcd_writesc@s+1,c
  3951  0015DA  0E12               	movlw	low STR_5
  3952  0015DC  6E10               	movwf	lcd_writesc@s,c
  3953  0015DE  ECBC  F00B         	call	_lcd_writesc	;wreg free
  3954                           
  3955                           ;main.c: 298: char delayy = 10;
  3956  0015E2  0E0A               	movlw	10
  3957  0015E4  6E13               	movwf	LOW_BATTERY@delayy,c
  3958                           
  3959                           ;main.c: 299: if(delayy){
  3960  0015E6  5013               	movf	LOW_BATTERY@delayy,w,c
  3961  0015E8  B4D8               	btfsc	status,2,c
  3962  0015EA  D008               	goto	l2075
  3963                           
  3964                           ;main.c: 300: _delay((unsigned long)((100)*(4000000/4000.0)));
  3965  0015EC  0E82               	movlw	130
  3966  0015EE  6E12               	movwf	??_LOW_BATTERY& (0+255),c
  3967  0015F0  0EDE               	movlw	222
  3968  0015F2                     u2327:
  3969  0015F2  2EE8               	decfsz	wreg,f,c
  3970  0015F4  D7FE               	goto	u2327
  3971  0015F6  2E12               	decfsz	??_LOW_BATTERY& (0+255),f,c
  3972  0015F8  D7FC               	goto	u2327
  3973                           
  3974                           ;main.c: 301: delayy--;
  3975  0015FA  0613               	decf	LOW_BATTERY@delayy,f,c
  3976  0015FC                     l2075:
  3977                           
  3978                           ;main.c: 302: }
  3979                           ;main.c: 303: lcd_goto(0x40);
  3980  0015FC  0E40               	movlw	64
  3981  0015FE  EC26  F00C         	call	_lcd_goto
  3982                           
  3983                           ;main.c: 304: lcd_writesc("                ");
  3984  001602  0E06               	movlw	high STR_6
  3985  001604  6E11               	movwf	lcd_writesc@s+1,c
  3986  001606  0E01               	movlw	low STR_6
  3987  001608  6E10               	movwf	lcd_writesc@s,c
  3988  00160A  ECBC  F00B         	call	_lcd_writesc	;wreg free
  3989                           
  3990                           ;main.c: 305: char delayy = 10;
  3991  00160E  0E0A               	movlw	10
  3992  001610  6E13               	movwf	LOW_BATTERY@delayy,c
  3993                           
  3994                           ;main.c: 306: if(delayy){
  3995  001612  5013               	movf	LOW_BATTERY@delayy,w,c
  3996  001614  B4D8               	btfsc	status,2,c
  3997  001616  0012               	return	
  3998                           
  3999                           ;main.c: 307: _delay((unsigned long)((100)*(4000000/4000.0)));
  4000  001618  0E82               	movlw	130
  4001  00161A  6E12               	movwf	??_LOW_BATTERY& (0+255),c
  4002  00161C  0EDE               	movlw	222
  4003  00161E                     u2337:
  4004  00161E  2EE8               	decfsz	wreg,f,c
  4005  001620  D7FE               	goto	u2337
  4006  001622  2E12               	decfsz	??_LOW_BATTERY& (0+255),f,c
  4007  001624  D7FC               	goto	u2337
  4008                           
  4009                           ;main.c: 308: delayy--;
  4010  001626  0613               	decf	LOW_BATTERY@delayy,f,c
  4011  001628  0012               	return	
  4012  00162A                     __end_of_LOW_BATTERY:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           prodl	equ	0xFF3
  4017                           intcon	equ	0xFF2
  4018                           postinc0	equ	0xFEE
  4019                           wreg	equ	0xFE8
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _lcd_writesc *****************
  4023 ;; Defined at:
  4024 ;;		line 65 in file "lcd.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  s               2   15[COMRAM] PTR const unsigned char 
  4027 ;;		 -> STR_6(17), STR_5(17), STR_4(4), STR_3(7), 
  4028 ;;		 -> STR_2(7), STR_1(7), 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;		None               void
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4040 ;;      Params:         2       0       0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0
  4043 ;;      Totals:         2       0       0       0       0       0       0
  4044 ;;Total ram usage:        2 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    2
  4047 ;; This function calls:
  4048 ;;		_lcd_write
  4049 ;; This function is called by:
  4050 ;;		_main
  4051 ;;		_show_values
  4052 ;;		_LOW_BATTERY
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text23
  4057  001778                     __ptext23:
  4058                           	opt stack 0
  4059  001778                     _lcd_writesc:
  4060                           	opt stack 27
  4061                           
  4062                           ;incstack = 0
  4063  001778  D00A               	goto	l1711
  4064  00177A                     l1707:
  4065                           
  4066                           ;lcd.c: 67: lcd_write(*s++);
  4067  00177A  C010  FFF6         	movff	lcd_writesc@s,tblptrl
  4068  00177E  C011  FFF7         	movff	lcd_writesc@s+1,tblptrh
  4069  001782                     	if	0	;tblptru may be non-zero
  4070  001782                     	endif
  4071  001782                     	if	0	;tblptru may be non-zero
  4072  001782                     	endif
  4073  001782  0008               	tblrd		*
  4074  001784  50F5               	movf	tablat,w,c
  4075  001786  ECB2  F00A         	call	_lcd_write
  4076  00178A  4A10               	infsnz	lcd_writesc@s,f,c
  4077  00178C  2A11               	incf	lcd_writesc@s+1,f,c
  4078  00178E                     l1711:
  4079  00178E  C010  FFF6         	movff	lcd_writesc@s,tblptrl
  4080  001792  C011  FFF7         	movff	lcd_writesc@s+1,tblptrh
  4081  001796                     	if	0	;tblptru may be non-zero
  4082  001796                     	endif
  4083  001796                     	if	0	;tblptru may be non-zero
  4084  001796                     	endif
  4085  001796  0008               	tblrd		*
  4086  001798  50F5               	movf	tablat,w,c
  4087  00179A  0900               	iorlw	0
  4088  00179C  B4D8               	btfsc	status,2,c
  4089  00179E  0012               	return	
  4090  0017A0  D7EC               	goto	l1707
  4091  0017A2                     __end_of_lcd_writesc:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           postinc0	equ	0xFEE
  4100                           wreg	equ	0xFE8
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _lcd_goto *****************
  4104 ;; Defined at:
  4105 ;;		line 79 in file "lcd.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  pos             1    wreg     unsigned char 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  pos             1   15[COMRAM] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4119 ;;      Params:         0       0       0       0       0       0       0
  4120 ;;      Locals:         1       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0
  4122 ;;      Totals:         1       0       0       0       0       0       0
  4123 ;;Total ram usage:        1 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    2
  4126 ;; This function calls:
  4127 ;;		_lcd_write
  4128 ;; This function is called by:
  4129 ;;		_main
  4130 ;;		_show_values
  4131 ;;		_show_clock
  4132 ;;		_LOW_BATTERY
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           	psect	text24
  4137  00184C                     __ptext24:
  4138                           	opt stack 0
  4139  00184C                     _lcd_goto:
  4140                           	opt stack 27
  4141                           
  4142                           ;incstack = 0
  4143                           ;lcd_goto@pos stored from wreg
  4144  00184C  6E10               	movwf	lcd_goto@pos,c
  4145  00184E  9A8A               	bcf	3978,5,c	;volatile
  4146                           
  4147                           ;lcd.c: 81: lcd_write(0x80+pos);
  4148  001850  5010               	movf	lcd_goto@pos,w,c
  4149  001852  0F80               	addlw	128
  4150  001854  ECB2  F00A         	call	_lcd_write
  4151                           
  4152                           ;lcd.c: 82: LATBbits.LATB5=1;
  4153  001858  8A8A               	bsf	3978,5,c	;volatile
  4154  00185A  0012               	return	
  4155  00185C                     __end_of_lcd_goto:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function _lcd_write *****************
  4168 ;; Defined at:
  4169 ;;		line 40 in file "lcd.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  c               1    wreg     unsigned char 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  c               1   14[COMRAM] unsigned char 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;		None               void
  4176 ;; Registers used:
  4177 ;;		wreg, status,2, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4183 ;;      Params:         0       0       0       0       0       0       0
  4184 ;;      Locals:         1       0       0       0       0       0       0
  4185 ;;      Temps:          0       0       0       0       0       0       0
  4186 ;;      Totals:         1       0       0       0       0       0       0
  4187 ;;Total ram usage:        1 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_show_values
  4194 ;;		_show_clock
  4195 ;;		_lcd_clear
  4196 ;;		_lcd_writesc
  4197 ;;		_lcd_goto
  4198 ;;		_lcd_cmd
  4199 ;;		_lcd_writesv
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text25
  4204  001564                     __ptext25:
  4205                           	opt stack 0
  4206  001564                     _lcd_write:
  4207                           	opt stack 27
  4208                           
  4209                           ;incstack = 0
  4210                           ;lcd_write@c stored from wreg
  4211  001564  6E0F               	movwf	lcd_write@c,c
  4212  001566  AE0F               	btfss	lcd_write@c,7,c
  4213  001568  D002               	goto	l209
  4214  00156A  868B               	bsf	3979,3,c	;volatile
  4215  00156C  D001               	goto	l1635
  4216  00156E                     l209:
  4217  00156E  968B               	bcf	3979,3,c	;volatile
  4218  001570                     l1635:
  4219                           
  4220                           ;lcd.c: 42: if(c & 0x40) LATBbits.LATB2=1; else LATBbits.LATB2=0;
  4221  001570  AC0F               	btfss	lcd_write@c,6,c
  4222  001572  D002               	goto	l211
  4223  001574  848A               	bsf	3978,2,c	;volatile
  4224  001576  D001               	goto	l1639
  4225  001578                     l211:
  4226  001578  948A               	bcf	3978,2,c	;volatile
  4227  00157A                     l1639:
  4228                           
  4229                           ;lcd.c: 43: if(c & 0x20) LATBbits.LATB1=1; else LATBbits.LATB1=0;
  4230  00157A  AA0F               	btfss	lcd_write@c,5,c
  4231  00157C  D002               	goto	l213
  4232  00157E  828A               	bsf	3978,1,c	;volatile
  4233  001580  D001               	goto	l1643
  4234  001582                     l213:
  4235  001582  928A               	bcf	3978,1,c	;volatile
  4236  001584                     l1643:
  4237                           
  4238                           ;lcd.c: 44: if(c & 0x10) LATBbits.LATB0=1; else LATBbits.LATB0=0;
  4239  001584  A80F               	btfss	lcd_write@c,4,c
  4240  001586  D002               	goto	l215
  4241  001588  808A               	bsf	3978,0,c	;volatile
  4242  00158A  D001               	goto	l216
  4243  00158C                     l215:
  4244  00158C  908A               	bcf	3978,0,c	;volatile
  4245  00158E                     l216:
  4246                           
  4247                           ;lcd.c: 45: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbit
      +                          s.LATB4=0;};
  4248  00158E  888A               	bsf	3978,4,c	;volatile
  4249  001590  F000               	nop	
  4250  001592  988A               	bcf	3978,4,c	;volatile
  4251                           
  4252                           ;lcd.c: 46: if(c & 0x08) LATCbits.LATC3=1; else LATCbits.LATC3=0;
  4253  001594  A60F               	btfss	lcd_write@c,3,c
  4254  001596  D002               	goto	l217
  4255  001598  868B               	bsf	3979,3,c	;volatile
  4256  00159A  D001               	goto	l1651
  4257  00159C                     l217:
  4258  00159C  968B               	bcf	3979,3,c	;volatile
  4259  00159E                     l1651:
  4260                           
  4261                           ;lcd.c: 47: if(c & 0x04) LATBbits.LATB2=1; else LATBbits.LATB2=0;
  4262  00159E  A40F               	btfss	lcd_write@c,2,c
  4263  0015A0  D002               	goto	l219
  4264  0015A2  848A               	bsf	3978,2,c	;volatile
  4265  0015A4  D001               	goto	l1655
  4266  0015A6                     l219:
  4267  0015A6  948A               	bcf	3978,2,c	;volatile
  4268  0015A8                     l1655:
  4269                           
  4270                           ;lcd.c: 48: if(c & 0x02) LATBbits.LATB1=1; else LATBbits.LATB1=0;
  4271  0015A8  A20F               	btfss	lcd_write@c,1,c
  4272  0015AA  D002               	goto	l221
  4273  0015AC  828A               	bsf	3978,1,c	;volatile
  4274  0015AE  D001               	goto	l1659
  4275  0015B0                     l221:
  4276  0015B0  928A               	bcf	3978,1,c	;volatile
  4277  0015B2                     l1659:
  4278                           
  4279                           ;lcd.c: 49: if(c & 0x01) LATBbits.LATB0=1; else LATBbits.LATB0=0;
  4280  0015B2  A00F               	btfss	lcd_write@c,0,c
  4281  0015B4  D002               	goto	l223
  4282  0015B6  808A               	bsf	3978,0,c	;volatile
  4283  0015B8  D001               	goto	l224
  4284  0015BA                     l223:
  4285  0015BA  908A               	bcf	3978,0,c	;volatile
  4286  0015BC                     l224:
  4287                           
  4288                           ;lcd.c: 50: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbit
      +                          s.LATB4=0;};
  4289  0015BC  888A               	bsf	3978,4,c	;volatile
  4290  0015BE  F000               	nop	
  4291  0015C0  988A               	bcf	3978,4,c	;volatile
  4292                           
  4293                           ;lcd.c: 51: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4294  0015C2  0E10               	movlw	16
  4295  0015C4                     u2347:
  4296  0015C4  2EE8               	decfsz	wreg,f,c
  4297  0015C6  D7FE               	goto	u2347
  4298  0015C8  D000               	nop2		;nop
  4299  0015CA  0012               	return	
  4300  0015CC                     __end_of_lcd_write:
  4301                           	opt stack 0
  4302                           tblptru	equ	0xFF8
  4303                           tblptrh	equ	0xFF7
  4304                           tblptrl	equ	0xFF6
  4305                           tablat	equ	0xFF5
  4306                           prodl	equ	0xFF3
  4307                           intcon	equ	0xFF2
  4308                           postinc0	equ	0xFEE
  4309                           wreg	equ	0xFE8
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function _ADC_10bit *****************
  4313 ;; Defined at:
  4314 ;;		line 237 in file "main.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  channel         1    wreg     unsigned char 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  channel         1   18[COMRAM] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  2   14[COMRAM] unsigned int 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4328 ;;      Params:         2       0       0       0       0       0       0
  4329 ;;      Locals:         1       0       0       0       0       0       0
  4330 ;;      Temps:          2       0       0       0       0       0       0
  4331 ;;      Totals:         5       0       0       0       0       0       0
  4332 ;;Total ram usage:        5 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    1
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text26
  4343  00167C                     __ptext26:
  4344                           	opt stack 0
  4345  00167C                     _ADC_10bit:
  4346                           	opt stack 29
  4347                           
  4348                           ;incstack = 0
  4349                           ;ADC_10bit@channel stored from wreg
  4350  00167C  6E13               	movwf	ADC_10bit@channel,c
  4351                           
  4352                           ;main.c: 238: ADCON0 = (ADCON0 & 0b10000011)|(channel<<2);
  4353  00167E  C013  F011         	movff	ADC_10bit@channel,??_ADC_10bit
  4354  001682  90D8               	bcf	status,0,c
  4355  001684  3611               	rlcf	??_ADC_10bit,f,c
  4356  001686  90D8               	bcf	status,0,c
  4357  001688  3611               	rlcf	??_ADC_10bit,f,c
  4358  00168A  50C2               	movf	4034,w,c	;volatile
  4359  00168C  0B83               	andlw	131
  4360  00168E  1011               	iorwf	??_ADC_10bit,w,c
  4361  001690  6EC2               	movwf	4034,c	;volatile
  4362                           
  4363                           ;main.c: 239: _delay((unsigned long)((8)*(4000000/4000000.0)));
  4364  001692  0E02               	movlw	2
  4365  001694                     u2357:
  4366  001694  2EE8               	decfsz	wreg,f,c
  4367  001696  D7FE               	goto	u2357
  4368  001698  D000               	nop2		;nop
  4369                           
  4370                           ;main.c: 240: ADCON0bits.GO = 1;
  4371  00169A  82C2               	bsf	4034,1,c	;volatile
  4372  00169C                     l179:
  4373  00169C  B2C2               	btfsc	4034,1,c	;volatile
  4374  00169E  D7FE               	goto	l179
  4375                           
  4376                           ;main.c: 243: ADC_HB = ADRESH;
  4377  0016A0  CFC4 F03F          	movff	4036,_ADC_HB	;volatile
  4378  0016A4  6A40               	clrf	_ADC_HB+1,c
  4379                           
  4380                           ;main.c: 244: ADC_LB = ADRESL;
  4381  0016A6  CFC3 F041          	movff	4035,_ADC_LB	;volatile
  4382  0016AA  6A42               	clrf	_ADC_LB+1,c
  4383                           
  4384                           ;main.c: 245: return (ADC_HB<<8|ADC_LB);
  4385  0016AC  503F               	movf	_ADC_HB,w,c
  4386  0016AE  6E12               	movwf	(??_ADC_10bit+1)& (0+255),c
  4387  0016B0  6A11               	clrf	??_ADC_10bit& (0+255),c
  4388  0016B2  5041               	movf	_ADC_LB,w,c
  4389  0016B4  1011               	iorwf	??_ADC_10bit,w,c
  4390  0016B6  6E0F               	movwf	?_ADC_10bit,c
  4391  0016B8  5042               	movf	_ADC_LB+1,w,c
  4392  0016BA  1012               	iorwf	??_ADC_10bit+1,w,c
  4393  0016BC  6E10               	movwf	?_ADC_10bit+1,c
  4394  0016BE  0012               	return	
  4395  0016C0                     __end_of_ADC_10bit:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodl	equ	0xFF3
  4402                           intcon	equ	0xFF2
  4403                           postinc0	equ	0xFEE
  4404                           wreg	equ	0xFE8
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _isr *****************
  4408 ;; Defined at:
  4409 ;;		line 214 in file "main.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;		None
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;		None
  4414 ;; Return value:  Size  Location     Type
  4415 ;;		None               void
  4416 ;; Registers used:
  4417 ;;		wreg, status,2, status,0
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4423 ;;      Params:         0       0       0       0       0       0       0
  4424 ;;      Locals:         0       0       0       0       0       0       0
  4425 ;;      Temps:         14       0       0       0       0       0       0
  4426 ;;      Totals:        14       0       0       0       0       0       0
  4427 ;;Total ram usage:       14 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		Interrupt level 2
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	intcode
  4437  000008                     __pintcode:
  4438                           	opt stack 0
  4439  000008                     _isr:
  4440                           	opt stack 27
  4441                           
  4442                           ;incstack = 0
  4443  000008  CFFA F001          	movff	pclath,??_isr
  4444  00000C  CFFB F002          	movff	pclatu,??_isr+1
  4445  000010  CFE9 F003          	movff	fsr0l,??_isr+2
  4446  000014  CFEA F004          	movff	fsr0h,??_isr+3
  4447  000018  CFE1 F005          	movff	fsr1l,??_isr+4
  4448  00001C  CFE2 F006          	movff	fsr1h,??_isr+5
  4449  000020  CFD9 F007          	movff	fsr2l,??_isr+6
  4450  000024  CFDA F008          	movff	fsr2h,??_isr+7
  4451  000028  CFF3 F009          	movff	prodl,??_isr+8
  4452  00002C  CFF4 F00A          	movff	prodh,??_isr+9
  4453  000030  CFF6 F00B          	movff	tblptrl,??_isr+10
  4454  000034  CFF7 F00C          	movff	tblptrh,??_isr+11
  4455  000038  CFF8 F00D          	movff	tblptru,??_isr+12
  4456  00003C  CFF5 F00E          	movff	tablat,??_isr+13
  4457                           
  4458                           ;main.c: 216: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
  4459  000040  B09E               	btfsc	3998,0,c	;volatile
  4460  000042  A09D               	btfss	3997,0,c	;volatile
  4461  000044  D023               	goto	i2l176
  4462                           
  4463                           ;main.c: 217: {
  4464                           ;main.c: 219: TMR1H=60;
  4465  000046  0E3C               	movlw	60
  4466  000048  6ECF               	movwf	4047,c	;volatile
  4467                           
  4468                           ;main.c: 220: TMR1L=237;
  4469  00004A  0EED               	movlw	237
  4470  00004C  6ECE               	movwf	4046,c	;volatile
  4471                           
  4472                           ;main.c: 223: if(++tiondel>=10)
  4473  00004E  2A4C               	incf	_tiondel,f,c
  4474  000050  0E09               	movlw	9
  4475  000052  644C               	cpfsgt	_tiondel& (0+255),c
  4476  000054  D01A               	goto	i2l2403
  4477                           
  4478                           ;main.c: 224: { tiondel=0;
  4479  000056  0E00               	movlw	0
  4480  000058  6E4C               	movwf	_tiondel,c
  4481                           
  4482                           ;main.c: 225: if(++sec>=60)
  4483  00005A  2A4B               	incf	_sec,f,c
  4484  00005C  0E3B               	movlw	59
  4485  00005E  644B               	cpfsgt	_sec& (0+255),c
  4486  000060  D014               	goto	i2l2403
  4487                           
  4488                           ;main.c: 226: { sec=0;
  4489  000062  0E00               	movlw	0
  4490  000064  6E4B               	movwf	_sec,c
  4491                           
  4492                           ;main.c: 227: if(++min>=60)
  4493  000066  0100               	movlb	0	; () banked
  4494  000068  2B7E               	incf	_min& (0+255),f,b
  4495  00006A  0E3B               	movlw	59
  4496  00006C  0100               	movlb	0	; () banked
  4497  00006E  657E               	cpfsgt	_min& (0+255),b
  4498  000070  D00C               	goto	i2l2403
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;main.c: 228: { min=0;
  4502  000072  0E00               	movlw	0
  4503  000074  0100               	movlb	0	; () banked
  4504  000076  6F7E               	movwf	_min& (0+255),b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;main.c: 229: if(++hr>=24)
  4508  000078  0100               	movlb	0	; () banked
  4509  00007A  2B7D               	incf	_hr& (0+255),f,b
  4510  00007C  0E17               	movlw	23
  4511  00007E  0100               	movlb	0	; () banked
  4512  000080  657D               	cpfsgt	_hr& (0+255),b
  4513  000082  D003               	goto	i2l2403
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;main.c: 230: hr=0;
  4517  000084  0E00               	movlw	0
  4518  000086  0100               	movlb	0	; () banked
  4519  000088  6F7D               	movwf	_hr& (0+255),b
  4520  00008A                     i2l2403:
  4521                           
  4522                           ;main.c: 231: }
  4523                           ;main.c: 232: }
  4524                           ;main.c: 233: }
  4525                           ;main.c: 234: PIR1bits.TMR1IF = 0;
  4526  00008A  909E               	bcf	3998,0,c	;volatile
  4527  00008C                     i2l176:
  4528  00008C  C00E  FFF5         	movff	??_isr+13,tablat
  4529  000090  C00D  FFF8         	movff	??_isr+12,tblptru
  4530  000094  C00C  FFF7         	movff	??_isr+11,tblptrh
  4531  000098  C00B  FFF6         	movff	??_isr+10,tblptrl
  4532  00009C  C00A  FFF4         	movff	??_isr+9,prodh
  4533  0000A0  C009  FFF3         	movff	??_isr+8,prodl
  4534  0000A4  C008  FFDA         	movff	??_isr+7,fsr2h
  4535  0000A8  C007  FFD9         	movff	??_isr+6,fsr2l
  4536  0000AC  C006  FFE2         	movff	??_isr+5,fsr1h
  4537  0000B0  C005  FFE1         	movff	??_isr+4,fsr1l
  4538  0000B4  C004  FFEA         	movff	??_isr+3,fsr0h
  4539  0000B8  C003  FFE9         	movff	??_isr+2,fsr0l
  4540  0000BC  C002  FFFB         	movff	??_isr+1,pclatu
  4541  0000C0  C001  FFFA         	movff	??_isr,pclath
  4542  0000C4  0011               	retfie		f
  4543  0000C6                     __end_of_isr:
  4544                           	opt stack 0
  4545                           pclatu	equ	0xFFB
  4546                           pclath	equ	0xFFA
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           intcon	equ	0xFF2
  4554                           postinc0	equ	0xFEE
  4555                           fsr0h	equ	0xFEA
  4556                           fsr0l	equ	0xFE9
  4557                           wreg	equ	0xFE8
  4558                           fsr1h	equ	0xFE2
  4559                           fsr1l	equ	0xFE1
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           pclatu	equ	0xFFB
  4564                           pclath	equ	0xFFA
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           postinc0	equ	0xFEE
  4573                           fsr0h	equ	0xFEA
  4574                           fsr0l	equ	0xFE9
  4575                           wreg	equ	0xFE8
  4576                           fsr1h	equ	0xFE2
  4577                           fsr1l	equ	0xFE1
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582                           	psect	rparam
  4583  0000                     pclatu	equ	0xFFB
  4584                           pclath	equ	0xFFA
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           postinc0	equ	0xFEE
  4593                           fsr0h	equ	0xFEA
  4594                           fsr0l	equ	0xFE9
  4595                           wreg	equ	0xFE8
  4596                           fsr1h	equ	0xFE2
  4597                           fsr1l	equ	0xFE1
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    0
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     62      76
    BANK0           160     20      34
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_writesc@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[4]), STR_3(CODE[7]), 
		 -> STR_2(CODE[7]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->___ftsub
    _show_values->___lwdiv
    _show_clock->___awdiv
    _lcd_init->_lcd_clear
    _lcd_init->_lcd_cmd
    _lcd_cmd->_lcd_write
    _lcd_clear->_lcd_write
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    _PWM_OUT->___fttol
    _LOW_BATTERY->_lcd_writesc
    _lcd_writesc->_lcd_write
    _lcd_goto->_lcd_write

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   21050
                                             58 COMRAM     4     4      0
                                              0 BANK0     20    20      0
                          _ADC_10bit
                        _LOW_BATTERY
                            _PWM_OUT
                          _UART_INIT
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lwtoft
                               _init
                           _lcd_goto
                           _lcd_init
                        _lcd_writesc
                         _show_clock
                        _show_values
 ---------------------------------------------------------------------------------
 (1) _show_values                                          8     4      4    1898
                                             21 COMRAM     8     4      4
                            ___lwdiv
                            ___lwmod
                           _lcd_goto
                          _lcd_write
                        _lcd_writesc
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     371
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _show_clock                                           0     0      0    1606
                            ___awdiv
                            ___awmod
                           _lcd_goto
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     614
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     618
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     374
                                             16 COMRAM     1     1      0
                          _lcd_clear
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     198
                                             15 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            1     1      0     176
                                             15 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1813
                                             22 COMRAM     3     0      3
                          _ADC_10bit (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     517
                                             37 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftsub                                              6     0      6    3472
                                             52 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3241
                                             40 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     204
                                             37 COMRAM     3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2727
                                             22 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     666
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2257
                                             22 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1685
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _UART_INIT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_OUT                                              4     2      2      97
                                             52 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _LOW_BATTERY                                          2     2      0     785
                                             17 COMRAM     2     2      0
                           _lcd_goto
                        _lcd_writesc
 ---------------------------------------------------------------------------------
 (2) _lcd_writesc                                          2     0      2     539
                                             15 COMRAM     2     0      2
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_goto                                             1     1      0     198
                                             15 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _lcd_write                                            1     1      0     176
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_10bit                                            5     3      2      22
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_10bit
   _LOW_BATTERY
     _lcd_goto
       _lcd_write
     _lcd_writesc
       _lcd_write
   _PWM_OUT
     ___fttol (ARG)
       ___ftmul (ARG)
         ___ftpack
   _UART_INIT
   ___ftadd
     ___ftmul (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___ftmul (ARG)
         ___ftpack
     ___ftpack (ARG)
   ___ftdiv
     ___ftpack
   ___ftge
   ___ftmul
     ___ftpack
   ___ftneg
     ___ftmul (ARG)
       ___ftpack
   ___ftsub
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___ftpack
       ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___ftpack
   ___lwtoft
     _ADC_10bit (ARG)
     ___ftpack (ARG)
   _init
   _lcd_goto
     _lcd_write
   _lcd_init
     _lcd_clear
       _lcd_write
     _lcd_cmd
       _lcd_write
   _lcd_writesc
     _lcd_write
   _show_clock
     ___awdiv
     ___awmod
     _lcd_goto
       _lcd_write
     _lcd_write
   _show_values
     ___lwdiv
     ___lwmod
     _lcd_goto
       _lcd_write
     _lcd_write
     _lcd_writesc
       _lcd_write

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      22       4       21.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3E      4C       1       80.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6E       9        0.0%
DATA                 0      0      6E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 05 16:17:49 2016

           ___awdiv@sign 0014                       _hr 007D        LOW_BATTERY@delayy 0013  
           ?_lcd_writesc 0010             ___ftadd@exp1 0034             ___ftadd@exp2 0033  
           ___ftadd@sign 0032                      l211 1578                      l221 15B0  
                    l213 1582                      l223 15BA                      l215 158C  
                    l143 091A                      l224 15BC                      l216 158E  
                    l160 0C0E                      l217 159C                      l209 156E  
                    l153 0C06                      l219 15A6                      l155 0C00  
                    l147 0BE8           lcd_cmd@command 0010                      l149 0BE2  
                    l610 0D32                      l179 169C                      l630 1056  
                    l619 0D4E                      l652 17E0                      l595 0C5A  
                    l764 1672                      l774 16F8                      l599 0C86  
                    _PR2 000FBB                      _fel 007F                      _min 007E  
                    _sec 004B                      _isr 0008             ___awmod@sign 0014  
            lcd_goto@pos 0010                      wreg 000FE8             __CFG_FOSC$XT 000000  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 0020             ___ftdiv@sign 0025  
                   l2101 0FCC                     l2107 0FF2                     l2203 1434  
                   l2127 1030                     l2223 0DEA                     l2303 0898  
                   l2209 1460                     l2153 0F02                     l2241 0E56  
                   l2313 0926                     l2075 15FC                     l2171 0F44  
                   l2147 0EDC                     l2251 0E7E                     l2181 0F6C  
                   l2253 0E8A                     l2245 0E66                     l1711 178E  
                   l2167 0F34                     l2255 0E8E                     l2327 0A08  
                   l2177 0F5C                     l2345 0B0C                     l2273 065A  
                   l1651 159E                     l1643 1584                     l1635 1570  
                   l1707 177A                     l2259 0EA4                     l1811 12E4  
                   l1741 0C94                     l1821 1306                     l1805 12C4  
                   l2349 0B3E                     l2285 07C4                     l1655 15A8  
                   l1639 157A                     l2199 1404                     l1735 0C68  
                   l1911 16EE                     l1903 16CE                     l1681 1254  
                   l1673 1216                     l1817 12FA                     l1833 132C  
                   l1905 16D6                     l2297 0864                     l2289 07E0  
                   l1659 15B2                     l1683 1272                     l1675 1220  
                   l1763 0CE6                     l1819 1302                     l1907 16DA  
                   l1685 127C                     l1677 123E                     l1669 1208  
                   l1765 0CF0                     l1757 0CC4                     l1837 133A  
                   l1829 1322                     l1861 139E                     l1853 1384  
                   l1783 0D6A                     l1775 0D22                     l1767 0CF8  
                   l1793 0D9A                     l1777 0D2C                     l1769 0D00  
                   l1873 13CA                     l1865 13B2                     l1857 1392  
                   l1849 1368                     l1859 139A                     l1883 1640  
                   l1869 13BC                     l1885 1648                     l1895 1668  
                   l1887 164C                     ?_isr 0001                     STR_1 0623  
                   STR_2 060B                     STR_3 060B                     STR_4 062A  
                   STR_5 0612                     STR_6 0601                     u2025 0904  
                   u1271 0C24                     u1281 0C38                     u2217 0B88  
                   u2307 14C8                     u2227 0B96                     u1701 0FB6  
                   u2317 1842                     u2237 0BA4                     u2327 15F2  
                   u2247 0BB2                     u2337 161E                     u1721 0FDC  
                   u2257 0BC0                     u2347 15C4                     u2267 146E  
                   u2357 1694                     u2277 148A                     _IPR1 000F9F  
                   u1751 0EC6                     u2287 149E                     _PIE1 000F9D  
                   u2297 14B2                     u1771 0EEC                     u1851 0DD0  
                   u1870 0E08                     u1945 07AE                     u1875 0E00  
                   u1995 0880                     _main 0630             ___ftpack@arg 000F  
                   _init 14E8             ___ftpack@exp 0012                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     fsr2l 000FD9          __end_of_PWM_OUT 1742  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 00C6            __CFG_IESO$OFF 000000             ___ftmul@cntr 0024  
           ___ftmul@sign 0025             ___fttol@exp1 0034             ___fttol@lval 0030  
                  ??_isr 0001             main@ar_varde 006B             _BAUDCON1bits 000FB8  
                  ?_main 0001                    ?_init 0001          __end_of___awdiv 1344  
        __end_of___ftadd 0DC0          __end_of___awmod 13D4          __end_of___ftdiv 1088  
        __end_of___ftneg 17EE          __end_of___ftmul 0FA6          ___awdiv@divisor 0011  
                  _T1CON 000FCD          __end_of___ftsub 1778          __end_of___fttol 0EB6  
                  _T2CON 000FBA           __CFG_DEBUG$OFF 000000          __end_of___lwdiv 167C  
        __end_of___lwmod 1702                    i2l176 008C          ___awdiv@counter 0013  
                  _TMR1H 000FCF                    _TMR1L 000FCE                    _TRISB 000F93  
     __size_of_UART_INIT 0020        __end_of_ADC_10bit 16C0           __CFG_FCMEN$OFF 000000  
        __end_of_lcd_cmd 186A       __CFG_MCLRE$EXTMCLR 000000            ___ftpack@sign 0013  
                  main@b 0063                    _pwmut 007A           __CFG_BOREN$OFF 000000  
                  tablat 000FF5                    status 000FD8            show_values@PV 0018  
          show_values@SP 0016             lcd_writesc@s 0010          __initialization 17A2  
           __end_of_main 0C14             __end_of_init 1564                   ??_main 003B  
          ___fttol@sign1 002F                   ??_init 000F             ?_LOW_BATTERY 0001  
          __activetblptr 000001            main@bor_varde 006E                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADC_HB 003F  
                 _ADC_LB 0041                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 _CCPR5L 000F55         ___awdiv@dividend 000F                ??_PWM_OUT 0037  
                 _ANSELA 000F38                   _ANSELB 000F39                   _ANSELC 000F3A  
       __end_of___ftpack 12A0                   i2l2403 008A           __CFG_WDTEN$OFF 000000  
                 _INTCON 000FF2         __end_of___lwtoft 1812                   _SPBRG1 000FAF  
                 _PWM_HB 0043                   _PWM_LB 0045                   _TXREG1 000FAD  
         __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000        __end_of_UART_INIT 1832  
       __end_of_lcd_init 14E8         __end_of_lcd_goto 185C                   ___ftge 13D4  
              ??___awdiv 0013                ??___ftadd 002F           __CFG_STVREN$ON 000000  
              ??___awmod 0013                ??___ftdiv 001D                ??___ftneg 0029  
              ??___ftmul 001D                ??___ftsub 003B                ??___fttol 002A  
              ??___lwdiv 0013                ??___lwmod 0013                   clear_0 17A8  
                 clear_1 17B4         ___awdiv@quotient 0015          ___awmod@divisor 0011  
        ___awmod@counter 0013                   main@PV 0067                   main@SP 0065  
              ??_lcd_cmd 0010                   main@bv 0071    ___ftmul@f3_as_product 0021  
   __size_of_lcd_writesc 002A             __mediumconst 0000        PWM_OUT@duty_cycle 0035  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
        __CFG_HFOFST$OFF 000000           show_values@PV1 001C           show_values@SP1 001A  
           ?_show_values 0016               __accesstop 0060  __end_of__initialization 17BA  
             ___ftadd@f1 0029               ___ftadd@f2 002C               ___ftge@ff1 000F  
             ___ftge@ff2 0012               ___ftdiv@f1 0017               ___ftdiv@f2 001A  
             ___ftdiv@f3 0021               ___ftneg@f1 0026               ___ftmul@f1 0017  
             ___ftmul@f2 001A               ___ftsub@f1 0035               ___ftsub@f2 0038  
             ___fttol@f1 0026           __pcstackCOMRAM 0001               ___lwtoft@c 0017  
     __size_of_lcd_clear 001A       __size_of_lcd_write 0068               __pbssBANK0 0074  
        __CFG_PLLCFG$OFF 000000                  ?___ftge 000F               _gammal_fel 0074  
                _CCP5CON 000F54                ?___ftpack 000F                ?___lwtoft 0017  
   __size_of_LOW_BATTERY 005E                  _SPBRGH1 000FB0                ?_lcd_init 0001  
              ?_lcd_goto 0001             _gammal_pwmut 0077                  _PWM_OUT 1702  
              _ADC_10bit 167C                  __Hparam 0000                  __Lparam 0000  
      __end_of_lcd_clear 184C          __size_of___ftge 0090                  ___awdiv 12A0  
                ___ftadd 0C14                  ___awmod 1344                  ___ftdiv 0FA6  
      __end_of_lcd_write 15CC                  ___ftneg 17C8                  ___ftmul 0EB6  
                ___ftsub 1742                  ___fttol 0DC0                  ___lwdiv 162A  
                ___lwmod 16C0             __psmallconst 0600                  _channel 0049  
                __pcinit 17A2               ??___ftpack 0014                  __ramtop 0600  
                __ptext0 0630                  __ptext1 1088                  __ptext2 16C0  
                __ptext3 162A                  __ptext4 1140                  __ptext5 1344  
                __ptext6 12A0                  __ptext7 1464                  __ptext8 185C  
                __ptext9 1832                  _lcd_cmd 185C               ??___lwtoft 001A  
           __size_of_isr 00BE         ___awmod@dividend 000F               _duty_cycle 0047  
                _raknare 004A                  _tiondel 004C               ??_lcd_init 0011  
             ??_lcd_goto 0010               ?_ADC_10bit 000F     end_of_initialization 17BA  
   __size_of_show_values 00B8                _RCSTAbits 000FAB                  postinc0 000FEE  
              _UART_INIT 1812                _PORTAbits 000F80                _PORTCbits 000F82  
             _show_clock 1140                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94              _CM1CON0bits 000F79              _CM2CON1bits 000F77  
            ___ftdiv@exp 0024                _TXSTAbits 000FAC               lcd_write@c 000F  
            ___ftmul@exp 0020           __end_of___ftge 1464               ?_UART_INIT 0001  
          ??_lcd_writesc 0012      start_initialization 17A2              __end_of_isr 00C6  
            ??_ADC_10bit 0011         ADC_10bit@channel 0013                 ??___ftge 0015  
            ?_show_clock 0001        __size_of___ftpack 00A8              __pbssCOMRAM 003F  
      __size_of___lwtoft 0024      __end_of_lcd_writesc 17A2            __pcstackBANK0 0060  
    __end_of__stringdata 062E                 ?_PWM_OUT 0035        __size_of_lcd_init 0084  
      __size_of_lcd_goto 0010                _main$1938 0060         ___lwdiv@dividend 000F  
              __pintcode 0008                 ?___awdiv 000F                 ?___ftadd 0029  
               ?___awmod 000F                 ?___ftdiv 0017                 ?___ftneg 0026  
               ?___ftmul 0017                 ?___ftsub 0035                 ?___fttol 0026  
               ?___lwdiv 000F                 ?___lwmod 000F              ??_UART_INIT 000F  
              _lcd_clear 1832         __CFG_PRICLKEN$ON 000000            ??_LOW_BATTERY 0012  
               ?_lcd_cmd 0001                _lcd_write 1564              __smallconst 0600  
               _CCPTMRS1 000F48         ___lwdiv@quotient 0013                 _LATBbits 000F8A  
               _LATCbits 000F8B      __size_of_show_clock 00B8                 _PIE1bits 000F9D  
               _PIR1bits 000F9E               ?_lcd_clear 0001              _lcd_writesc 1778  
             _ADCON0bits 000FC2              __stringdata 0601               ?_lcd_write 0001  
              main@count 0069      __end_of_LOW_BATTERY 162A            ??_show_values 001A  
       __size_of_PWM_OUT 0040                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600         __size_of___awdiv 00A4         __size_of___ftadd 01AC  
       __size_of___awmod 0090         __size_of___ftdiv 00E2         __size_of___ftneg 0026  
       __size_of___ftmul 00F0         __size_of___ftsub 0036         __size_of___fttol 00F6  
       __size_of___lwdiv 0052         __size_of___lwmod 0042                 ___ftpack 11F8  
               ___lwtoft 17EE               _ANSELCbits 000F3A         __size_of_lcd_cmd 000E  
        ___lwdiv@divisor 0011          ___lwdiv@counter 0015                 __ptext10 14E8  
               __ptext11 17EE                 __ptext20 1812                 __ptext12 0DC0  
               __ptext21 1702                 __ptext13 1742                 __ptext22 15CC  
               __ptext14 0C14                 __ptext23 1778                 __ptext15 17C8  
               __ptext24 184C                 __ptext16 0EB6                 __ptext25 1564  
               __ptext17 13D4                 __ptext26 167C                 __ptext18 0FA6  
               __ptext19 11F8                 _lcd_init 1464                 _lcd_goto 184C  
          __size_of_main 05E4            __size_of_init 007C      __end_of_show_values 1140  
            ??_lcd_clear 0010             ??_show_clock 0017              ??_lcd_write 000F  
            _LOW_BATTERY 15CC                 intlevel2 0000         ___lwmod@dividend 000F  
           _VREFCON0bits 000F42       __end_of_show_clock 11F8          ___lwmod@divisor 0011  
        ___lwmod@counter 0013              _show_values 1088       __size_of_ADC_10bit 0044  
