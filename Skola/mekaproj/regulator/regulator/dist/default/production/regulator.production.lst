

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Oct 05 16:54:44 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     _ADCON0	set	4034
    42  0000                     _ADCON0bits	set	4034
    43  0000                     _ADCON1	set	4033
    44  0000                     _ADCON2	set	4032
    45  0000                     _ADRESH	set	4036
    46  0000                     _ADRESL	set	4035
    47  0000                     _ANSELA	set	3896
    48  0000                     _ANSELB	set	3897
    49  0000                     _ANSELC	set	3898
    50  0000                     _ANSELCbits	set	3898
    51  0000                     _BAUDCON1bits	set	4024
    52  0000                     _CCP5CON	set	3924
    53  0000                     _CCPR5L	set	3925
    54  0000                     _CCPTMRS1	set	3912
    55  0000                     _CM1CON0bits	set	3961
    56  0000                     _CM2CON1bits	set	3959
    57  0000                     _INTCON	set	4082
    58  0000                     _IPR1	set	3999
    59  0000                     _LATBbits	set	3978
    60  0000                     _LATCbits	set	3979
    61  0000                     _PIE1	set	3997
    62  0000                     _PIE1bits	set	3997
    63  0000                     _PIR1bits	set	3998
    64  0000                     _PORTAbits	set	3968
    65  0000                     _PORTCbits	set	3970
    66  0000                     _PR2	set	4027
    67  0000                     _RCSTAbits	set	4011
    68  0000                     _SPBRG1	set	4015
    69  0000                     _SPBRGH1	set	4016
    70  0000                     _T1CON	set	4045
    71  0000                     _T2CON	set	4026
    72  0000                     _TMR1H	set	4047
    73  0000                     _TMR1L	set	4046
    74  0000                     _TRISAbits	set	3986
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISBbits	set	3987
    77  0000                     _TRISCbits	set	3988
    78  0000                     _TXREG1	set	4013
    79  0000                     _TXSTAbits	set	4012
    80  0000                     _VREFCON0bits	set	3906
    81                           
    82                           	psect	smallconst
    83  000600                     __psmallconst:
    84                           	opt stack 0
    85  000600  00                 	db	0
    86  000601                     __stringdata:
    87                           	opt stack 0
    88  000601                     STR_6:
    89  000601  20                 	db	32
    90  000602  20                 	db	32
    91  000603  20                 	db	32
    92  000604  20                 	db	32
    93  000605  20                 	db	32
    94  000606  20                 	db	32
    95  000607  20                 	db	32
    96  000608  20                 	db	32
    97  000609  20                 	db	32
    98  00060A  20                 	db	32
    99  00060B  20                 	db	32
   100  00060C  20                 	db	32
   101  00060D  20                 	db	32
   102  00060E  20                 	db	32
   103  00060F  20                 	db	32
   104  000610  20                 	db	32
   105  000611  00                 	db	0
   106  000612                     STR_5:
   107  000612  4C                 	db	76	;'L'
   108  000613  6F                 	db	111	;'o'
   109  000614  77                 	db	119	;'w'
   110  000615  20                 	db	32
   111  000616  62                 	db	98	;'b'
   112  000617  61                 	db	97	;'a'
   113  000618  74                 	db	116	;'t'
   114  000619  74                 	db	116	;'t'
   115  00061A  65                 	db	101	;'e'
   116  00061B  72                 	db	114	;'r'
   117  00061C  79                 	db	121	;'y'
   118  00061D  20                 	db	32
   119  00061E  20                 	db	32
   120  00061F  20                 	db	32
   121  000620  20                 	db	32
   122  000621  20                 	db	32
   123  000622  00                 	db	0
   124  000623                     STR_1:
   125  000623  52                 	db	82	;'R'
   126  000624  41                 	db	65	;'A'
   127  000625  4D                 	db	77	;'M'
   128  000626  50                 	db	80	;'P'
   129  000627  41                 	db	65	;'A'
   130  000628  52                 	db	82	;'R'
   131  000629  00                 	db	0
   132  00062A                     STR_4:
   133  00062A  50                 	db	80	;'P'
   134  00062B  56                 	db	86	;'V'
   135  00062C  3A                 	db	58	;':'
   136  00062D  00                 	db	0
   137  00062E                     __end_of__stringdata:
   138                           	opt stack 0
   139                           
   140                           ; #config settings
   141  00062E  00                 	db	0	; dummy byte at the end
   142  0000                     
   143                           	psect	cinit
   144  00185E                     __pcinit:
   145                           	opt stack 0
   146  00185E                     start_initialization:
   147                           	opt stack 0
   148  00185E                     __initialization:
   149                           	opt stack 0
   150                           
   151                           ; Clear objects allocated to BANK0 (14 bytes)
   152  00185E  EE00  F080         	lfsr	0,__pbssBANK0
   153  001862  0E0E               	movlw	14
   154  001864                     clear_0:
   155  001864  6AEE               	clrf	postinc0,c
   156  001866  06E8               	decf	wreg,f,c
   157  001868  E1FD               	bnz	clear_0
   158                           
   159                           ; Clear objects allocated to COMRAM (14 bytes)
   160  00186A  EE00  F043         	lfsr	0,__pbssCOMRAM
   161  00186E  0E0E               	movlw	14
   162  001870                     clear_1:
   163  001870  6AEE               	clrf	postinc0,c
   164  001872  06E8               	decf	wreg,f,c
   165  001874  E1FD               	bnz	clear_1
   166  001876                     end_of_initialization:
   167                           	opt stack 0
   168  001876                     __end_of__initialization:
   169                           	opt stack 0
   170  001876  0E00               	movlw	low (__Lsmallconst shr (0+16))
   171  001878  6EF8               	movwf	tblptru,c
   172  00187A  0E06               	movlw	high __Lsmallconst
   173  00187C  6EF7               	movwf	tblptrh,c
   174  00187E  0100               	movlb	0
   175  001880  EF18  F003         	goto	_main	;jump to C main() function
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           postinc0	equ	0xFEE
   179                           wreg	equ	0xFE8
   180                           
   181                           	psect	bssCOMRAM
   182  000043                     __pbssCOMRAM:
   183                           	opt stack 0
   184  000043                     _ADC_HB:
   185                           	opt stack 0
   186  000043                     	ds	2
   187  000045                     _ADC_LB:
   188                           	opt stack 0
   189  000045                     	ds	2
   190  000047                     _PWM_HB:
   191                           	opt stack 0
   192  000047                     	ds	2
   193  000049                     _PWM_LB:
   194                           	opt stack 0
   195  000049                     	ds	2
   196  00004B                     _duty_cycle:
   197                           	opt stack 0
   198  00004B                     	ds	2
   199  00004D                     _channel:
   200                           	opt stack 0
   201  00004D                     	ds	1
   202  00004E                     _raknare:
   203                           	opt stack 0
   204  00004E                     	ds	1
   205  00004F                     _sec:
   206                           	opt stack 0
   207  00004F                     	ds	1
   208  000050                     _tiondel:
   209                           	opt stack 0
   210  000050                     	ds	1
   211                           tblptru	equ	0xFF8
   212                           tblptrh	equ	0xFF7
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssBANK0
   217  000080                     __pbssBANK0:
   218                           	opt stack 0
   219  000080                     _gammal_fel:
   220                           	opt stack 0
   221  000080                     	ds	3
   222  000083                     _gammal_pwmut:
   223                           	opt stack 0
   224  000083                     	ds	3
   225  000086                     _pwmut:
   226                           	opt stack 0
   227  000086                     	ds	3
   228  000089                     _hr:
   229                           	opt stack 0
   230  000089                     	ds	1
   231  00008A                     _min:
   232                           	opt stack 0
   233  00008A                     	ds	1
   234  00008B                     _fel:
   235                           	opt stack 0
   236  00008B                     	ds	3
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	cstackBANK0
   243  000060                     __pcstackBANK0:
   244                           	opt stack 0
   245  000060                     ___fttol@sign1:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x0
   249  000060                     	ds	1
   250  000061                     ___fttol@lval:
   251                           	opt stack 0
   252                           
   253                           ; 4 bytes @ 0x1
   254  000061                     	ds	4
   255  000065                     ___fttol@exp1:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x5
   259  000065                     	ds	1
   260  000066                     ??_PWM_OUT:
   261                           
   262                           ; 0 bytes @ 0x6
   263  000066                     	ds	2
   264  000068                     ??_main:
   265                           
   266                           ; 0 bytes @ 0x8
   267  000068                     	ds	4
   268  00006C                     _main$1938:
   269                           	opt stack 0
   270                           
   271                           ; 3 bytes @ 0xC
   272  00006C                     	ds	3
   273  00006F                     main@b:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0xF
   277  00006F                     	ds	2
   278  000071                     main@SP:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x11
   282  000071                     	ds	2
   283  000073                     main@PV:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x13
   287  000073                     	ds	2
   288  000075                     main@count:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x15
   292  000075                     	ds	2
   293  000077                     main@ar_varde:
   294                           	opt stack 0
   295                           
   296                           ; 3 bytes @ 0x17
   297  000077                     	ds	3
   298  00007A                     main@bor_varde:
   299                           	opt stack 0
   300                           
   301                           ; 3 bytes @ 0x1A
   302  00007A                     	ds	3
   303  00007D                     main@bv:
   304                           	opt stack 0
   305                           
   306                           ; 3 bytes @ 0x1D
   307  00007D                     	ds	3
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	cstackCOMRAM
   314  000001                     __pcstackCOMRAM:
   315                           	opt stack 0
   316  000001                     ??_isr:
   317  000001                     
   318                           ; 0 bytes @ 0x0
   319  000001                     	ds	14
   320  00000F                     ?_ADC_10bit:
   321                           	opt stack 0
   322  00000F                     ?___awdiv:
   323                           	opt stack 0
   324  00000F                     ?___awmod:
   325                           	opt stack 0
   326  00000F                     ?___lwdiv:
   327                           	opt stack 0
   328  00000F                     ?___lwmod:
   329                           	opt stack 0
   330  00000F                     ?___ftpack:
   331                           	opt stack 0
   332  00000F                     lcd_write@c:
   333                           	opt stack 0
   334  00000F                     ___awdiv@dividend:
   335                           	opt stack 0
   336  00000F                     ___awmod@dividend:
   337                           	opt stack 0
   338  00000F                     ___lwdiv@dividend:
   339                           	opt stack 0
   340  00000F                     ___lwmod@dividend:
   341                           	opt stack 0
   342  00000F                     ___ftpack@arg:
   343                           	opt stack 0
   344  00000F                     ___ftge@ff1:
   345                           	opt stack 0
   346                           
   347                           ; 3 bytes @ 0xE
   348  00000F                     	ds	1
   349  000010                     ??_lcd_clear:
   350  000010                     lcd_goto@pos:
   351                           	opt stack 0
   352  000010                     lcd_cmd@command:
   353                           	opt stack 0
   354  000010                     lcd_writesc@s:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0xF
   358  000010                     	ds	1
   359  000011                     ??_lcd_init:
   360  000011                     ??_ADC_10bit:
   361  000011                     ___awdiv@divisor:
   362                           	opt stack 0
   363  000011                     ___awmod@divisor:
   364                           	opt stack 0
   365  000011                     ___lwdiv@divisor:
   366                           	opt stack 0
   367  000011                     ___lwmod@divisor:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x10
   371  000011                     	ds	1
   372  000012                     ??_LOW_BATTERY:
   373  000012                     ___ftpack@exp:
   374                           	opt stack 0
   375  000012                     ___ftge@ff2:
   376                           	opt stack 0
   377                           
   378                           ; 3 bytes @ 0x11
   379  000012                     	ds	1
   380  000013                     ADC_10bit@channel:
   381                           	opt stack 0
   382  000013                     LOW_BATTERY@delayy:
   383                           	opt stack 0
   384  000013                     ___awdiv@counter:
   385                           	opt stack 0
   386  000013                     ___awmod@counter:
   387                           	opt stack 0
   388  000013                     ___ftpack@sign:
   389                           	opt stack 0
   390  000013                     ___lwmod@counter:
   391                           	opt stack 0
   392  000013                     ___lwdiv@quotient:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x12
   396  000013                     	ds	1
   397  000014                     ??___ftpack:
   398  000014                     ___awdiv@sign:
   399                           	opt stack 0
   400  000014                     ___awmod@sign:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x13
   404  000014                     	ds	1
   405  000015                     ??___ftge:
   406  000015                     ___lwdiv@counter:
   407                           	opt stack 0
   408  000015                     ___awdiv@quotient:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x14
   412  000015                     	ds	1
   413  000016                     show_values@SP:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x15
   417  000016                     	ds	1
   418  000017                     ?___lwtoft:
   419                           	opt stack 0
   420  000017                     ___lwtoft@c:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x16
   424  000017                     	ds	1
   425  000018                     show_values@PV:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x17
   429  000018                     	ds	2
   430  00001A                     ?___ftmul:
   431                           	opt stack 0
   432  00001A                     show_values@SP1:
   433                           	opt stack 0
   434  00001A                     ___ftmul@f1:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0x19
   438  00001A                     	ds	2
   439  00001C                     show_values@PV1:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x1B
   443  00001C                     	ds	1
   444  00001D                     ___ftmul@f2:
   445                           	opt stack 0
   446                           
   447                           ; 3 bytes @ 0x1C
   448  00001D                     	ds	3
   449  000020                     ??___ftmul:
   450                           
   451                           ; 0 bytes @ 0x1F
   452  000020                     	ds	3
   453  000023                     ___ftmul@exp:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x22
   457  000023                     	ds	1
   458  000024                     ___ftmul@f3_as_product:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0x23
   462  000024                     	ds	3
   463  000027                     ___ftmul@cntr:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x26
   467  000027                     	ds	1
   468  000028                     ___ftmul@sign:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x27
   472  000028                     	ds	1
   473  000029                     ?___ftdiv:
   474                           	opt stack 0
   475  000029                     ?___ftneg:
   476                           	opt stack 0
   477  000029                     ___ftdiv@f1:
   478                           	opt stack 0
   479  000029                     ___ftneg@f1:
   480                           	opt stack 0
   481                           
   482                           ; 3 bytes @ 0x28
   483  000029                     	ds	3
   484  00002C                     ?___ftadd:
   485                           	opt stack 0
   486  00002C                     ___ftadd@f1:
   487                           	opt stack 0
   488  00002C                     ___ftdiv@f2:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x2B
   492  00002C                     	ds	3
   493  00002F                     ??___ftdiv:
   494  00002F                     ___ftadd@f2:
   495                           	opt stack 0
   496                           
   497                           ; 3 bytes @ 0x2E
   498  00002F                     	ds	3
   499  000032                     ??___ftadd:
   500  000032                     ___ftdiv@cntr:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x31
   504  000032                     	ds	1
   505  000033                     ___ftdiv@f3:
   506                           	opt stack 0
   507                           
   508                           ; 3 bytes @ 0x32
   509  000033                     	ds	2
   510  000035                     ___ftadd@sign:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x34
   514  000035                     	ds	1
   515  000036                     ___ftadd@exp2:
   516                           	opt stack 0
   517  000036                     ___ftdiv@exp:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x35
   521  000036                     	ds	1
   522  000037                     ___ftadd@exp1:
   523                           	opt stack 0
   524  000037                     ___ftdiv@sign:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x36
   528  000037                     	ds	1
   529  000038                     ?___ftsub:
   530                           	opt stack 0
   531  000038                     ?___fttol:
   532                           	opt stack 0
   533  000038                     ___ftsub@f1:
   534                           	opt stack 0
   535  000038                     ___fttol@f1:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x37
   539  000038                     	ds	3
   540  00003B                     ___ftsub@f2:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0x3A
   544  00003B                     	ds	1
   545  00003C                     ??___fttol:
   546                           
   547                           ; 0 bytes @ 0x3B
   548  00003C                     	ds	2
   549  00003E                     
   550                           ; 0 bytes @ 0x3D
   551  00003E                     	ds	3
   552  000041                     PWM_OUT@duty_cycle:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x40
   556  000041                     	ds	2
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 36 in file "main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  b               2   15[BANK0 ] int 
   572 ;;  bv              3   29[BANK0 ] float 
   573 ;;  bor_varde       3   26[BANK0 ] float 
   574 ;;  ar_varde        3   23[BANK0 ] float 
   575 ;;  count           2   21[BANK0 ] int 
   576 ;;  PV              2   19[BANK0 ] unsigned int 
   577 ;;  SP              2   17[BANK0 ] unsigned int 
   578 ;; Return value:  Size  Location     Type
   579 ;;		None               void
   580 ;; Registers used:
   581 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   587 ;;      Params:         0       0       0       0       0       0       0
   588 ;;      Locals:         0      20       0       0       0       0       0
   589 ;;      Temps:          0       4       0       0       0       0       0
   590 ;;      Totals:         0      24       0       0       0       0       0
   591 ;;Total ram usage:       24 bytes
   592 ;; Hardware stack levels required when called:    4
   593 ;; This function calls:
   594 ;;		_ADC_10bit
   595 ;;		_LOW_BATTERY
   596 ;;		_PWM_OUT
   597 ;;		_UART_INIT
   598 ;;		___ftadd
   599 ;;		___ftdiv
   600 ;;		___ftge
   601 ;;		___ftmul
   602 ;;		___ftneg
   603 ;;		___ftsub
   604 ;;		___fttol
   605 ;;		___lwtoft
   606 ;;		_init
   607 ;;		_lcd_goto
   608 ;;		_lcd_init
   609 ;;		_lcd_writesc
   610 ;;		_show_clock
   611 ;;		_show_values
   612 ;; This function is called by:
   613 ;;		Startup code after reset
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           	psect	text0
   618  000630                     __ptext0:
   619                           	opt stack 0
   620  000630                     _main:
   621                           	opt stack 27
   622                           
   623                           ;incstack = 0
   624  000630  ECCE  F00A         	call	_init	;wreg free
   625                           
   626                           ;main.c: 38: lcd_init();
   627  000634  EC8C  F00A         	call	_lcd_init	;wreg free
   628                           
   629                           ;main.c: 39: UART_INIT();
   630  000638  EC67  F00C         	call	_UART_INIT	;wreg free
   631                           
   632                           ;main.c: 41: int count = 0;
   633  00063C  0E00               	movlw	0
   634  00063E  0100               	movlb	0	; () banked
   635  000640  6F76               	movwf	(main@count+1)& (0+255),b
   636  000642  0E00               	movlw	0
   637  000644  0100               	movlb	0	; () banked
   638  000646  6F75               	movwf	main@count& (0+255),b
   639                           
   640                           ; BSR set to: 0
   641                           ;main.c: 47: unsigned int SP;
   642                           ;main.c: 48: unsigned int PV;
   643                           ;main.c: 49: float ar_varde;
   644                           ;main.c: 50: float bor_varde;
   645                           ;main.c: 51: float bv = 0;
   646  000648  0E00               	movlw	0
   647  00064A  0100               	movlb	0	; () banked
   648  00064C  6F7D               	movwf	main@bv& (0+255),b
   649  00064E  0E00               	movlw	0
   650  000650  0100               	movlb	0	; () banked
   651  000652  6F7E               	movwf	(main@bv+1)& (0+255),b
   652  000654  0E00               	movlw	0
   653  000656  0100               	movlb	0	; () banked
   654  000658  6F7F               	movwf	(main@bv+2)& (0+255),b
   655  00065A                     l2473:
   656                           
   657                           ;main.c: 56: ar_varde = ADC_10bit(4);
   658  00065A  0E04               	movlw	4
   659  00065C  ECBC  F00B         	call	_ADC_10bit
   660  000660  C00F  F017         	movff	?_ADC_10bit,___lwtoft@c
   661  000664  C010  F018         	movff	?_ADC_10bit+1,___lwtoft@c+1
   662  000668  EC55  F00C         	call	___lwtoft	;wreg free
   663  00066C  C017  F077         	movff	?___lwtoft,main@ar_varde
   664  000670  C018  F078         	movff	?___lwtoft+1,main@ar_varde+1
   665  000674  C019  F079         	movff	?___lwtoft+2,main@ar_varde+2
   666                           
   667                           ;main.c: 57: bor_varde = ADC_10bit(0);
   668  000678  0E00               	movlw	0
   669  00067A  ECBC  F00B         	call	_ADC_10bit
   670  00067E  C00F  F017         	movff	?_ADC_10bit,___lwtoft@c
   671  000682  C010  F018         	movff	?_ADC_10bit+1,___lwtoft@c+1
   672  000686  EC55  F00C         	call	___lwtoft	;wreg free
   673  00068A  C017  F07A         	movff	?___lwtoft,main@bor_varde
   674  00068E  C018  F07B         	movff	?___lwtoft+1,main@bor_varde+1
   675  000692  C019  F07C         	movff	?___lwtoft+2,main@bor_varde+2
   676                           
   677                           ;main.c: 59: if(PORTCbits.RC2){
   678  000696  A482               	btfss	3970,2,c	;volatile
   679  000698  D149               	goto	l2513
   680                           
   681                           ;main.c: 60: SP = bor_varde * (99./1023);
   682  00069A  0E32               	movlw	50
   683  00069C  6E1D               	movwf	___ftmul@f2,c
   684  00069E  0EC6               	movlw	198
   685  0006A0  6E1E               	movwf	___ftmul@f2+1,c
   686  0006A2  0E3D               	movlw	61
   687  0006A4  6E1F               	movwf	___ftmul@f2+2,c
   688  0006A6  C07A  F01A         	movff	main@bor_varde,___ftmul@f1
   689  0006AA  C07B  F01B         	movff	main@bor_varde+1,___ftmul@f1+1
   690  0006AE  C07C  F01C         	movff	main@bor_varde+2,___ftmul@f1+2
   691  0006B2  ECB5  F007         	call	___ftmul	;wreg free
   692  0006B6  C01A  F038         	movff	?___ftmul,___fttol@f1
   693  0006BA  C01B  F039         	movff	?___ftmul+1,___fttol@f1+1
   694  0006BE  C01C  F03A         	movff	?___ftmul+2,___fttol@f1+2
   695  0006C2  EC1A  F007         	call	___fttol	;wreg free
   696  0006C6  C038  F068         	movff	?___fttol,??_main
   697  0006CA  C039  F069         	movff	?___fttol+1,??_main+1
   698  0006CE  C03A  F06A         	movff	?___fttol+2,??_main+2
   699  0006D2  C03B  F06B         	movff	?___fttol+3,??_main+3
   700  0006D6  C068  F071         	movff	??_main,main@SP
   701  0006DA  C069  F072         	movff	??_main+1,main@SP+1
   702                           
   703                           ;main.c: 61: PV = ar_varde * (99./1023);
   704  0006DE  0E32               	movlw	50
   705  0006E0  6E1D               	movwf	___ftmul@f2,c
   706  0006E2  0EC6               	movlw	198
   707  0006E4  6E1E               	movwf	___ftmul@f2+1,c
   708  0006E6  0E3D               	movlw	61
   709  0006E8  6E1F               	movwf	___ftmul@f2+2,c
   710  0006EA  C077  F01A         	movff	main@ar_varde,___ftmul@f1
   711  0006EE  C078  F01B         	movff	main@ar_varde+1,___ftmul@f1+1
   712  0006F2  C079  F01C         	movff	main@ar_varde+2,___ftmul@f1+2
   713  0006F6  ECB5  F007         	call	___ftmul	;wreg free
   714  0006FA  C01A  F038         	movff	?___ftmul,___fttol@f1
   715  0006FE  C01B  F039         	movff	?___ftmul+1,___fttol@f1+1
   716  000702  C01C  F03A         	movff	?___ftmul+2,___fttol@f1+2
   717  000706  EC1A  F007         	call	___fttol	;wreg free
   718  00070A  C038  F068         	movff	?___fttol,??_main
   719  00070E  C039  F069         	movff	?___fttol+1,??_main+1
   720  000712  C03A  F06A         	movff	?___fttol+2,??_main+2
   721  000716  C03B  F06B         	movff	?___fttol+3,??_main+3
   722  00071A  C068  F073         	movff	??_main,main@PV
   723  00071E  C069  F074         	movff	??_main+1,main@PV+1
   724                           
   725                           ;main.c: 63: fel = bv - (ar_varde);
   726  000722  C077  F029         	movff	main@ar_varde,___ftneg@f1
   727  000726  C078  F02A         	movff	main@ar_varde+1,___ftneg@f1+1
   728  00072A  C079  F02B         	movff	main@ar_varde+2,___ftneg@f1+2
   729  00072E  EC42  F00C         	call	___ftneg	;wreg free
   730  000732  C029  F02C         	movff	?___ftneg,___ftadd@f1
   731  000736  C02A  F02D         	movff	?___ftneg+1,___ftadd@f1+1
   732  00073A  C02B  F02E         	movff	?___ftneg+2,___ftadd@f1+2
   733  00073E  C07D  F02F         	movff	main@bv,___ftadd@f2
   734  000742  C07E  F030         	movff	main@bv+1,___ftadd@f2+1
   735  000746  C07F  F031         	movff	main@bv+2,___ftadd@f2+2
   736  00074A  EC44  F006         	call	___ftadd	;wreg free
   737  00074E  C02C  F08B         	movff	?___ftadd,_fel
   738  000752  C02D  F08C         	movff	?___ftadd+1,_fel+1
   739  000756  C02E  F08D         	movff	?___ftadd+2,_fel+2
   740                           
   741                           ;main.c: 65: if((bv/1)!=(bor_varde/1)){
   742  00075A  C07D  F029         	movff	main@bv,___ftdiv@f1
   743  00075E  C07E  F02A         	movff	main@bv+1,___ftdiv@f1+1
   744  000762  C07F  F02B         	movff	main@bv+2,___ftdiv@f1+2
   745  000766  0E00               	movlw	0
   746  000768  6E2C               	movwf	___ftdiv@f2,c
   747  00076A  0E80               	movlw	128
   748  00076C  6E2D               	movwf	___ftdiv@f2+1,c
   749  00076E  0E3F               	movlw	63
   750  000770  6E2E               	movwf	___ftdiv@f2+2,c
   751  000772  EC2D  F008         	call	___ftdiv	;wreg free
   752  000776  C029  F068         	movff	?___ftdiv,??_main
   753  00077A  C02A  F069         	movff	?___ftdiv+1,??_main+1
   754  00077E  C02B  F06A         	movff	?___ftdiv+2,??_main+2
   755  000782  C07A  F029         	movff	main@bor_varde,___ftdiv@f1
   756  000786  C07B  F02A         	movff	main@bor_varde+1,___ftdiv@f1+1
   757  00078A  C07C  F02B         	movff	main@bor_varde+2,___ftdiv@f1+2
   758  00078E  0E00               	movlw	0
   759  000790  6E2C               	movwf	___ftdiv@f2,c
   760  000792  0E80               	movlw	128
   761  000794  6E2D               	movwf	___ftdiv@f2+1,c
   762  000796  0E3F               	movlw	63
   763  000798  6E2E               	movwf	___ftdiv@f2+2,c
   764  00079A  EC2D  F008         	call	___ftdiv	;wreg free
   765  00079E  502B               	movf	?___ftdiv+2,w,c
   766  0007A0  0100               	movlb	0	; () banked
   767  0007A2  196A               	xorwf	(??_main+2)& (0+255),w,b
   768  0007A4  E107               	bnz	u2305
   769  0007A6  502A               	movf	?___ftdiv+1,w,c
   770  0007A8  0100               	movlb	0	; () banked
   771  0007AA  1969               	xorwf	(??_main+1)& (0+255),w,b
   772  0007AC  E103               	bnz	u2305
   773  0007AE  5029               	movf	?___ftdiv,w,c
   774  0007B0  0100               	movlb	0	; () banked
   775  0007B2  1968               	xorwf	??_main& (0+255),w,b
   776  0007B4                     u2305:
   777  0007B4  B4D8               	btfsc	status,2,c
   778  0007B6  D009               	goto	l2485
   779                           
   780                           ; BSR set to: 0
   781                           ;main.c: 66: lcd_goto(0x00);
   782  0007B8  0E00               	movlw	0
   783  0007BA  EC84  F00C         	call	_lcd_goto
   784                           
   785                           ;main.c: 67: lcd_writesc("RAMPAR");
   786  0007BE  0E06               	movlw	high STR_1
   787  0007C0  6E11               	movwf	lcd_writesc@s+1,c
   788  0007C2  0E23               	movlw	low STR_1
   789  0007C4  6E10               	movwf	lcd_writesc@s,c
   790  0007C6  EC1A  F00C         	call	_lcd_writesc	;wreg free
   791  0007CA                     l2485:
   792                           
   793                           ;main.c: 68: }
   794                           ;main.c: 70: if(count < 4){
   795  0007CA  0100               	movlb	0	; () banked
   796  0007CC  5176               	movf	(main@count+1)& (0+255),w,b
   797  0007CE  0A80               	xorlw	128
   798  0007D0  6EF3               	movwf	prodl,c
   799  0007D2  0E80               	movlw	128
   800  0007D4  5CF3               	subwf	prodl,w,c
   801  0007D6  0E04               	movlw	4
   802  0007D8  B4D8               	btfsc	status,2,c
   803  0007DA  5D75               	subwf	main@count& (0+255),w,b
   804  0007DC  B0D8               	btfsc	status,0,c
   805  0007DE  D003               	goto	l2489
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 71: count++;
   809  0007E0  0100               	movlb	0	; () banked
   810  0007E2  4B75               	infsnz	main@count& (0+255),f,b
   811  0007E4  2B76               	incf	(main@count+1)& (0+255),f,b
   812  0007E6                     l2489:
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 72: }
   816                           ;main.c: 74: if((count == 4) && (bv < bor_varde)){
   817  0007E6  0100               	movlb	0	; () banked
   818  0007E8  5175               	movf	main@count& (0+255),w,b
   819  0007EA  0A04               	xorlw	4
   820  0007EC  1176               	iorwf	(main@count+1)& (0+255),w,b
   821  0007EE  A4D8               	btfss	status,2,c
   822  0007F0  D03C               	goto	l2497
   823                           
   824                           ; BSR set to: 0
   825  0007F2  C07D  F00F         	movff	main@bv,___ftge@ff1
   826  0007F6  C07E  F010         	movff	main@bv+1,___ftge@ff1+1
   827  0007FA  C07F  F011         	movff	main@bv+2,___ftge@ff1+2
   828  0007FE  C07A  F012         	movff	main@bor_varde,___ftge@ff2
   829  000802  C07B  F013         	movff	main@bor_varde+1,___ftge@ff2+1
   830  000806  C07C  F014         	movff	main@bor_varde+2,___ftge@ff2+2
   831  00080A  EC44  F00A         	call	___ftge	;wreg free
   832  00080E  B0D8               	btfsc	status,0,c
   833  000810  D02C               	goto	l2497
   834                           
   835                           ;main.c: 75: bv += 10;
   836  000812  C07D  F02C         	movff	main@bv,___ftadd@f1
   837  000816  C07E  F02D         	movff	main@bv+1,___ftadd@f1+1
   838  00081A  C07F  F02E         	movff	main@bv+2,___ftadd@f1+2
   839  00081E  0E00               	movlw	0
   840  000820  6E2F               	movwf	___ftadd@f2,c
   841  000822  0E20               	movlw	32
   842  000824  6E30               	movwf	___ftadd@f2+1,c
   843  000826  0E41               	movlw	65
   844  000828  6E31               	movwf	___ftadd@f2+2,c
   845  00082A  EC44  F006         	call	___ftadd	;wreg free
   846  00082E  C02C  F07D         	movff	?___ftadd,main@bv
   847  000832  C02D  F07E         	movff	?___ftadd+1,main@bv+1
   848  000836  C02E  F07F         	movff	?___ftadd+2,main@bv+2
   849                           
   850                           ;main.c: 76: if(bv > 1023){
   851  00083A  0EC0               	movlw	192
   852  00083C  6E0F               	movwf	___ftge@ff1,c
   853  00083E  0E7F               	movlw	127
   854  000840  6E10               	movwf	___ftge@ff1+1,c
   855  000842  0E44               	movlw	68
   856  000844  6E11               	movwf	___ftge@ff1+2,c
   857  000846  C07D  F012         	movff	main@bv,___ftge@ff2
   858  00084A  C07E  F013         	movff	main@bv+1,___ftge@ff2+1
   859  00084E  C07F  F014         	movff	main@bv+2,___ftge@ff2+2
   860  000852  EC44  F00A         	call	___ftge	;wreg free
   861  000856  B0D8               	btfsc	status,0,c
   862  000858  D063               	goto	l143
   863                           
   864                           ;main.c: 77: bv = 1023;
   865  00085A  0EC0               	movlw	192
   866  00085C  0100               	movlb	0	; () banked
   867  00085E  6F7D               	movwf	main@bv& (0+255),b
   868  000860  0E7F               	movlw	127
   869  000862  0100               	movlb	0	; () banked
   870  000864  6F7E               	movwf	(main@bv+1)& (0+255),b
   871  000866  0E44               	movlw	68
   872  000868  D059               	goto	L1
   873  00086A                     l2497:
   874                           
   875                           ;main.c: 81: else if (bv==bor_varde){
   876  00086A  0100               	movlb	0	; () banked
   877  00086C  517C               	movf	(main@bor_varde+2)& (0+255),w,b
   878  00086E  0100               	movlb	0	; () banked
   879  000870  197F               	xorwf	(main@bv+2)& (0+255),w,b
   880  000872  E109               	bnz	u2355
   881  000874  0100               	movlb	0	; () banked
   882  000876  517B               	movf	(main@bor_varde+1)& (0+255),w,b
   883  000878  0100               	movlb	0	; () banked
   884  00087A  197E               	xorwf	(main@bv+1)& (0+255),w,b
   885  00087C  E104               	bnz	u2355
   886  00087E  0100               	movlb	0	; () banked
   887  000880  517A               	movf	main@bor_varde& (0+255),w,b
   888  000882  0100               	movlb	0	; () banked
   889  000884  197D               	xorwf	main@bv& (0+255),w,b
   890  000886                     u2355:
   891  000886  A4D8               	btfss	status,2,c
   892  000888  D00A               	goto	l2503
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 82: lcd_goto(0x00);
   896  00088A  0E00               	movlw	0
   897  00088C  EC84  F00C         	call	_lcd_goto
   898                           
   899                           ;main.c: 83: lcd_writesc("      ");
   900  000890  0E06               	movlw	high (STR_6+10)
   901  000892  6E11               	movwf	lcd_writesc@s+1,c
   902  000894  0E0B               	movlw	low (STR_6+10)
   903  000896  6E10               	movwf	lcd_writesc@s,c
   904  000898  EC1A  F00C         	call	_lcd_writesc	;wreg free
   905                           
   906                           ;main.c: 84: }
   907  00089C  D047               	goto	l2513
   908  00089E                     l2503:
   909                           
   910                           ;main.c: 86: else if((count == 4) && (bv > bor_varde)){
   911  00089E  0100               	movlb	0	; () banked
   912  0008A0  5175               	movf	main@count& (0+255),w,b
   913  0008A2  0A04               	xorlw	4
   914  0008A4  1176               	iorwf	(main@count+1)& (0+255),w,b
   915  0008A6  A4D8               	btfss	status,2,c
   916  0008A8  D041               	goto	l2513
   917                           
   918                           ; BSR set to: 0
   919  0008AA  C07A  F00F         	movff	main@bor_varde,___ftge@ff1
   920  0008AE  C07B  F010         	movff	main@bor_varde+1,___ftge@ff1+1
   921  0008B2  C07C  F011         	movff	main@bor_varde+2,___ftge@ff1+2
   922  0008B6  C07D  F012         	movff	main@bv,___ftge@ff2
   923  0008BA  C07E  F013         	movff	main@bv+1,___ftge@ff2+1
   924  0008BE  C07F  F014         	movff	main@bv+2,___ftge@ff2+2
   925  0008C2  EC44  F00A         	call	___ftge	;wreg free
   926  0008C6  B0D8               	btfsc	status,0,c
   927  0008C8  D031               	goto	l2513
   928                           
   929                           ;main.c: 87: bv -= 10;
   930  0008CA  C07D  F038         	movff	main@bv,___ftsub@f1
   931  0008CE  C07E  F039         	movff	main@bv+1,___ftsub@f1+1
   932  0008D2  C07F  F03A         	movff	main@bv+2,___ftsub@f1+2
   933  0008D6  0E00               	movlw	0
   934  0008D8  6E3B               	movwf	___ftsub@f2,c
   935  0008DA  0E20               	movlw	32
   936  0008DC  6E3C               	movwf	___ftsub@f2+1,c
   937  0008DE  0E41               	movlw	65
   938  0008E0  6E3D               	movwf	___ftsub@f2+2,c
   939  0008E2  ECFF  F00B         	call	___ftsub	;wreg free
   940  0008E6  C038  F07D         	movff	?___ftsub,main@bv
   941  0008EA  C039  F07E         	movff	?___ftsub+1,main@bv+1
   942  0008EE  C03A  F07F         	movff	?___ftsub+2,main@bv+2
   943                           
   944                           ;main.c: 88: if(bv < 0){
   945  0008F2  0100               	movlb	0	; () banked
   946  0008F4  517F               	movf	(main@bv+2)& (0+255),w,b
   947  0008F6  0A80               	xorlw	128
   948  0008F8  0F80               	addlw	128
   949  0008FA  E107               	bnz	u2385
   950  0008FC  0E00               	movlw	0
   951  0008FE  0100               	movlb	0	; () banked
   952  000900  5D7E               	subwf	(main@bv+1)& (0+255),w,b
   953  000902  E103               	bnz	u2385
   954  000904  0E00               	movlw	0
   955  000906  0100               	movlb	0	; () banked
   956  000908  5D7D               	subwf	main@bv& (0+255),w,b
   957  00090A                     u2385:
   958  00090A  B0D8               	btfsc	status,0,c
   959  00090C  D009               	goto	l143
   960                           
   961                           ; BSR set to: 0
   962                           ;main.c: 89: bv = 0;
   963  00090E  0E00               	movlw	0
   964  000910  0100               	movlb	0	; () banked
   965  000912  6F7D               	movwf	main@bv& (0+255),b
   966  000914  0E00               	movlw	0
   967  000916  0100               	movlb	0	; () banked
   968  000918  6F7E               	movwf	(main@bv+1)& (0+255),b
   969  00091A  0E00               	movlw	0
   970  00091C                     L1:
   971  00091C  0100               	movlb	0	; () banked
   972  00091E  6F7F               	movwf	(main@bv+2)& (0+255),b
   973  000920                     l143:
   974                           
   975                           ; BSR set to: 0
   976                           ;main.c: 90: }
   977                           ;main.c: 91: count = 0;
   978  000920  0E00               	movlw	0
   979  000922  0100               	movlb	0	; () banked
   980  000924  6F76               	movwf	(main@count+1)& (0+255),b
   981  000926  0E00               	movlw	0
   982  000928  0100               	movlb	0	; () banked
   983  00092A  6F75               	movwf	main@count& (0+255),b
   984  00092C                     l2513:
   985                           
   986                           ;main.c: 93: }
   987                           ;main.c: 95: }
   988                           ;main.c: 97: if(!PORTCbits.RC2){
   989  00092C  B482               	btfsc	3970,2,c	;volatile
   990  00092E  D06F               	goto	l2527
   991                           
   992                           ;main.c: 98: lcd_goto(0x00);
   993  000930  0E00               	movlw	0
   994  000932  EC84  F00C         	call	_lcd_goto
   995                           
   996                           ;main.c: 99: lcd_writesc("      ");
   997  000936  0E06               	movlw	high (STR_6+10)
   998  000938  6E11               	movwf	lcd_writesc@s+1,c
   999  00093A  0E0B               	movlw	low (STR_6+10)
  1000  00093C  6E10               	movwf	lcd_writesc@s,c
  1001  00093E  EC1A  F00C         	call	_lcd_writesc	;wreg free
  1002                           
  1003                           ;main.c: 100: SP = bor_varde * (99./1023);
  1004  000942  0E32               	movlw	50
  1005  000944  6E1D               	movwf	___ftmul@f2,c
  1006  000946  0EC6               	movlw	198
  1007  000948  6E1E               	movwf	___ftmul@f2+1,c
  1008  00094A  0E3D               	movlw	61
  1009  00094C  6E1F               	movwf	___ftmul@f2+2,c
  1010  00094E  C07A  F01A         	movff	main@bor_varde,___ftmul@f1
  1011  000952  C07B  F01B         	movff	main@bor_varde+1,___ftmul@f1+1
  1012  000956  C07C  F01C         	movff	main@bor_varde+2,___ftmul@f1+2
  1013  00095A  ECB5  F007         	call	___ftmul	;wreg free
  1014  00095E  C01A  F038         	movff	?___ftmul,___fttol@f1
  1015  000962  C01B  F039         	movff	?___ftmul+1,___fttol@f1+1
  1016  000966  C01C  F03A         	movff	?___ftmul+2,___fttol@f1+2
  1017  00096A  EC1A  F007         	call	___fttol	;wreg free
  1018  00096E  C038  F068         	movff	?___fttol,??_main
  1019  000972  C039  F069         	movff	?___fttol+1,??_main+1
  1020  000976  C03A  F06A         	movff	?___fttol+2,??_main+2
  1021  00097A  C03B  F06B         	movff	?___fttol+3,??_main+3
  1022  00097E  C068  F071         	movff	??_main,main@SP
  1023  000982  C069  F072         	movff	??_main+1,main@SP+1
  1024                           
  1025                           ;main.c: 101: PV = ar_varde * (99./1023);
  1026  000986  0E32               	movlw	50
  1027  000988  6E1D               	movwf	___ftmul@f2,c
  1028  00098A  0EC6               	movlw	198
  1029  00098C  6E1E               	movwf	___ftmul@f2+1,c
  1030  00098E  0E3D               	movlw	61
  1031  000990  6E1F               	movwf	___ftmul@f2+2,c
  1032  000992  C077  F01A         	movff	main@ar_varde,___ftmul@f1
  1033  000996  C078  F01B         	movff	main@ar_varde+1,___ftmul@f1+1
  1034  00099A  C079  F01C         	movff	main@ar_varde+2,___ftmul@f1+2
  1035  00099E  ECB5  F007         	call	___ftmul	;wreg free
  1036  0009A2  C01A  F038         	movff	?___ftmul,___fttol@f1
  1037  0009A6  C01B  F039         	movff	?___ftmul+1,___fttol@f1+1
  1038  0009AA  C01C  F03A         	movff	?___ftmul+2,___fttol@f1+2
  1039  0009AE  EC1A  F007         	call	___fttol	;wreg free
  1040  0009B2  C038  F068         	movff	?___fttol,??_main
  1041  0009B6  C039  F069         	movff	?___fttol+1,??_main+1
  1042  0009BA  C03A  F06A         	movff	?___fttol+2,??_main+2
  1043  0009BE  C03B  F06B         	movff	?___fttol+3,??_main+3
  1044  0009C2  C068  F073         	movff	??_main,main@PV
  1045  0009C6  C069  F074         	movff	??_main+1,main@PV+1
  1046                           
  1047                           ;main.c: 102: fel = bor_varde - (ar_varde) ;
  1048  0009CA  C077  F029         	movff	main@ar_varde,___ftneg@f1
  1049  0009CE  C078  F02A         	movff	main@ar_varde+1,___ftneg@f1+1
  1050  0009D2  C079  F02B         	movff	main@ar_varde+2,___ftneg@f1+2
  1051  0009D6  EC42  F00C         	call	___ftneg	;wreg free
  1052  0009DA  C029  F02C         	movff	?___ftneg,___ftadd@f1
  1053  0009DE  C02A  F02D         	movff	?___ftneg+1,___ftadd@f1+1
  1054  0009E2  C02B  F02E         	movff	?___ftneg+2,___ftadd@f1+2
  1055  0009E6  C07A  F02F         	movff	main@bor_varde,___ftadd@f2
  1056  0009EA  C07B  F030         	movff	main@bor_varde+1,___ftadd@f2+1
  1057  0009EE  C07C  F031         	movff	main@bor_varde+2,___ftadd@f2+2
  1058  0009F2  EC44  F006         	call	___ftadd	;wreg free
  1059  0009F6  C02C  F08B         	movff	?___ftadd,_fel
  1060  0009FA  C02D  F08C         	movff	?___ftadd+1,_fel+1
  1061  0009FE  C02E  F08D         	movff	?___ftadd+2,_fel+2
  1062                           
  1063                           ;main.c: 103: bv = ar_varde;
  1064  000A02  C077  F07D         	movff	main@ar_varde,main@bv
  1065  000A06  C078  F07E         	movff	main@ar_varde+1,main@bv+1
  1066  000A0A  C079  F07F         	movff	main@ar_varde+2,main@bv+2
  1067  000A0E                     l2527:
  1068                           
  1069                           ;main.c: 104: }
  1070                           ;main.c: 105: int b = (ADC_10bit(4)>>2)*99./255;
  1071  000A0E  0E00               	movlw	0
  1072  000A10  6E2C               	movwf	___ftdiv@f2,c
  1073  000A12  0E7F               	movlw	127
  1074  000A14  6E2D               	movwf	___ftdiv@f2+1,c
  1075  000A16  0E43               	movlw	67
  1076  000A18  6E2E               	movwf	___ftdiv@f2+2,c
  1077  000A1A  0E00               	movlw	0
  1078  000A1C  6E1D               	movwf	___ftmul@f2,c
  1079  000A1E  0EC6               	movlw	198
  1080  000A20  6E1E               	movwf	___ftmul@f2+1,c
  1081  000A22  0E42               	movlw	66
  1082  000A24  6E1F               	movwf	___ftmul@f2+2,c
  1083  000A26  0E04               	movlw	4
  1084  000A28  ECBC  F00B         	call	_ADC_10bit
  1085  000A2C  90D8               	bcf	status,0,c
  1086  000A2E  3210               	rrcf	?_ADC_10bit+1,f,c
  1087  000A30  320F               	rrcf	?_ADC_10bit,f,c
  1088  000A32  90D8               	bcf	status,0,c
  1089  000A34  3210               	rrcf	?_ADC_10bit+1,f,c
  1090  000A36  320F               	rrcf	?_ADC_10bit,f,c
  1091  000A38  C00F  F017         	movff	?_ADC_10bit,___lwtoft@c
  1092  000A3C  C010  F018         	movff	?_ADC_10bit+1,___lwtoft@c+1
  1093  000A40  EC55  F00C         	call	___lwtoft	;wreg free
  1094  000A44  C017  F01A         	movff	?___lwtoft,___ftmul@f1
  1095  000A48  C018  F01B         	movff	?___lwtoft+1,___ftmul@f1+1
  1096  000A4C  C019  F01C         	movff	?___lwtoft+2,___ftmul@f1+2
  1097  000A50  ECB5  F007         	call	___ftmul	;wreg free
  1098  000A54  C01A  F029         	movff	?___ftmul,___ftdiv@f1
  1099  000A58  C01B  F02A         	movff	?___ftmul+1,___ftdiv@f1+1
  1100  000A5C  C01C  F02B         	movff	?___ftmul+2,___ftdiv@f1+2
  1101  000A60  EC2D  F008         	call	___ftdiv	;wreg free
  1102  000A64  C029  F038         	movff	?___ftdiv,___fttol@f1
  1103  000A68  C02A  F039         	movff	?___ftdiv+1,___fttol@f1+1
  1104  000A6C  C02B  F03A         	movff	?___ftdiv+2,___fttol@f1+2
  1105  000A70  EC1A  F007         	call	___fttol	;wreg free
  1106  000A74  C038  F068         	movff	?___fttol,??_main
  1107  000A78  C039  F069         	movff	?___fttol+1,??_main+1
  1108  000A7C  C03A  F06A         	movff	?___fttol+2,??_main+2
  1109  000A80  C03B  F06B         	movff	?___fttol+3,??_main+3
  1110  000A84  C068  F06F         	movff	??_main,main@b
  1111  000A88  C069  F070         	movff	??_main+1,main@b+1
  1112                           
  1113                           ;main.c: 106: TXREG1 = b;
  1114  000A8C  C06F  FFAD         	movff	main@b,4013	;volatile
  1115                           
  1116                           ;main.c: 107: show_values(SP,PV);
  1117  000A90  C071  F016         	movff	main@SP,show_values@SP
  1118  000A94  C072  F017         	movff	main@SP+1,show_values@SP+1
  1119  000A98  C073  F018         	movff	main@PV,show_values@PV
  1120  000A9C  C074  F019         	movff	main@PV+1,show_values@PV+1
  1121  000AA0  EC9E  F008         	call	_show_values	;wreg free
  1122                           
  1123                           ;main.c: 108: show_clock();
  1124  000AA4  ECFA  F008         	call	_show_clock	;wreg free
  1125                           
  1126                           ;main.c: 109: LOW_BATTERY();
  1127  000AA8  EC40  F00B         	call	_LOW_BATTERY	;wreg free
  1128                           
  1129                           ;main.c: 112: pwmut = (4.820924223288709*fel) - (4.671075776711291*gammal_fel) + gammal_
      +                          pwmut;
  1130  000AAC  0E79               	movlw	121
  1131  000AAE  6E1D               	movwf	___ftmul@f2,c
  1132  000AB0  0E95               	movlw	149
  1133  000AB2  6E1E               	movwf	___ftmul@f2+1,c
  1134  000AB4  0E40               	movlw	64
  1135  000AB6  6E1F               	movwf	___ftmul@f2+2,c
  1136  000AB8  C080  F01A         	movff	_gammal_fel,___ftmul@f1
  1137  000ABC  C081  F01B         	movff	_gammal_fel+1,___ftmul@f1+1
  1138  000AC0  C082  F01C         	movff	_gammal_fel+2,___ftmul@f1+2
  1139  000AC4  ECB5  F007         	call	___ftmul	;wreg free
  1140  000AC8  C01A  F029         	movff	?___ftmul,___ftneg@f1
  1141  000ACC  C01B  F02A         	movff	?___ftmul+1,___ftneg@f1+1
  1142  000AD0  C01C  F02B         	movff	?___ftmul+2,___ftneg@f1+2
  1143  000AD4  EC42  F00C         	call	___ftneg	;wreg free
  1144  000AD8  C029  F02F         	movff	?___ftneg,___ftadd@f2
  1145  000ADC  C02A  F030         	movff	?___ftneg+1,___ftadd@f2+1
  1146  000AE0  C02B  F031         	movff	?___ftneg+2,___ftadd@f2+2
  1147  000AE4  0E45               	movlw	69
  1148  000AE6  6E1D               	movwf	___ftmul@f2,c
  1149  000AE8  0E9A               	movlw	154
  1150  000AEA  6E1E               	movwf	___ftmul@f2+1,c
  1151  000AEC  0E40               	movlw	64
  1152  000AEE  6E1F               	movwf	___ftmul@f2+2,c
  1153  000AF0  C08B  F01A         	movff	_fel,___ftmul@f1
  1154  000AF4  C08C  F01B         	movff	_fel+1,___ftmul@f1+1
  1155  000AF8  C08D  F01C         	movff	_fel+2,___ftmul@f1+2
  1156  000AFC  ECB5  F007         	call	___ftmul	;wreg free
  1157  000B00  C01A  F02C         	movff	?___ftmul,___ftadd@f1
  1158  000B04  C01B  F02D         	movff	?___ftmul+1,___ftadd@f1+1
  1159  000B08  C01C  F02E         	movff	?___ftmul+2,___ftadd@f1+2
  1160  000B0C  EC44  F006         	call	___ftadd	;wreg free
  1161  000B10  C02C  F06C         	movff	?___ftadd,_main$1938
  1162  000B14  C02D  F06D         	movff	?___ftadd+1,_main$1938+1
  1163  000B18  C02E  F06E         	movff	?___ftadd+2,_main$1938+2
  1164                           
  1165                           ;main.c: 112: pwmut = (4.820924223288709*fel) - (4.671075776711291*gammal_fel) + gammal_
      +                          pwmut;
  1166  000B1C  C06C  F02C         	movff	_main$1938,___ftadd@f1
  1167  000B20  C06D  F02D         	movff	_main$1938+1,___ftadd@f1+1
  1168  000B24  C06E  F02E         	movff	_main$1938+2,___ftadd@f1+2
  1169  000B28  C083  F02F         	movff	_gammal_pwmut,___ftadd@f2
  1170  000B2C  C084  F030         	movff	_gammal_pwmut+1,___ftadd@f2+1
  1171  000B30  C085  F031         	movff	_gammal_pwmut+2,___ftadd@f2+2
  1172  000B34  EC44  F006         	call	___ftadd	;wreg free
  1173  000B38  C02C  F086         	movff	?___ftadd,_pwmut
  1174  000B3C  C02D  F087         	movff	?___ftadd+1,_pwmut+1
  1175  000B40  C02E  F088         	movff	?___ftadd+2,_pwmut+2
  1176                           
  1177                           ;main.c: 114: if(pwmut >= 1023.00){
  1178  000B44  C086  F00F         	movff	_pwmut,___ftge@ff1
  1179  000B48  C087  F010         	movff	_pwmut+1,___ftge@ff1+1
  1180  000B4C  C088  F011         	movff	_pwmut+2,___ftge@ff1+2
  1181  000B50  0EC0               	movlw	192
  1182  000B52  6E12               	movwf	___ftge@ff2,c
  1183  000B54  0E7F               	movlw	127
  1184  000B56  6E13               	movwf	___ftge@ff2+1,c
  1185  000B58  0E44               	movlw	68
  1186  000B5A  6E14               	movwf	___ftge@ff2+2,c
  1187  000B5C  EC44  F00A         	call	___ftge	;wreg free
  1188  000B60  A0D8               	btfss	status,0,c
  1189  000B62  D009               	goto	l2545
  1190                           
  1191                           ;main.c: 115: pwmut = 1023.00;
  1192  000B64  0EC0               	movlw	192
  1193  000B66  0100               	movlb	0	; () banked
  1194  000B68  6F86               	movwf	_pwmut& (0+255),b
  1195  000B6A  0E7F               	movlw	127
  1196  000B6C  0100               	movlb	0	; () banked
  1197  000B6E  6F87               	movwf	(_pwmut+1)& (0+255),b
  1198  000B70  0E44               	movlw	68
  1199  000B72  0100               	movlb	0	; () banked
  1200  000B74  6F88               	movwf	(_pwmut+2)& (0+255),b
  1201  000B76                     l2545:
  1202                           
  1203                           ;main.c: 117: }
  1204                           ;main.c: 118: if(pwmut <= 0.00){
  1205  000B76  0E00               	movlw	0
  1206  000B78  6E0F               	movwf	___ftge@ff1,c
  1207  000B7A  0E00               	movlw	0
  1208  000B7C  6E10               	movwf	___ftge@ff1+1,c
  1209  000B7E  0E00               	movlw	0
  1210  000B80  6E11               	movwf	___ftge@ff1+2,c
  1211  000B82  C086  F012         	movff	_pwmut,___ftge@ff2
  1212  000B86  C087  F013         	movff	_pwmut+1,___ftge@ff2+1
  1213  000B8A  C088  F014         	movff	_pwmut+2,___ftge@ff2+2
  1214  000B8E  EC44  F00A         	call	___ftge	;wreg free
  1215  000B92  A0D8               	btfss	status,0,c
  1216  000B94  D009               	goto	l2549
  1217                           
  1218                           ;main.c: 119: pwmut = 0.00;
  1219  000B96  0E00               	movlw	0
  1220  000B98  0100               	movlb	0	; () banked
  1221  000B9A  6F86               	movwf	_pwmut& (0+255),b
  1222  000B9C  0E00               	movlw	0
  1223  000B9E  0100               	movlb	0	; () banked
  1224  000BA0  6F87               	movwf	(_pwmut+1)& (0+255),b
  1225  000BA2  0E00               	movlw	0
  1226  000BA4  0100               	movlb	0	; () banked
  1227  000BA6  6F88               	movwf	(_pwmut+2)& (0+255),b
  1228  000BA8                     l2549:
  1229                           
  1230                           ;main.c: 121: }
  1231                           ;main.c: 124: PWM_OUT(pwmut);
  1232  000BA8  C086  F038         	movff	_pwmut,___fttol@f1
  1233  000BAC  C087  F039         	movff	_pwmut+1,___fttol@f1+1
  1234  000BB0  C088  F03A         	movff	_pwmut+2,___fttol@f1+2
  1235  000BB4  EC1A  F007         	call	___fttol	;wreg free
  1236  000BB8  C038  F068         	movff	?___fttol,??_main
  1237  000BBC  C039  F069         	movff	?___fttol+1,??_main+1
  1238  000BC0  C03A  F06A         	movff	?___fttol+2,??_main+2
  1239  000BC4  C03B  F06B         	movff	?___fttol+3,??_main+3
  1240  000BC8  C068  F041         	movff	??_main,PWM_OUT@duty_cycle
  1241  000BCC  C069  F042         	movff	??_main+1,PWM_OUT@duty_cycle+1
  1242  000BD0  EC98  F00B         	call	_PWM_OUT	;wreg free
  1243                           
  1244                           ;main.c: 125: gammal_fel = fel;
  1245  000BD4  C08B  F080         	movff	_fel,_gammal_fel
  1246  000BD8  C08C  F081         	movff	_fel+1,_gammal_fel+1
  1247  000BDC  C08D  F082         	movff	_fel+2,_gammal_fel+2
  1248                           
  1249                           ;main.c: 126: gammal_pwmut = pwmut;
  1250  000BE0  C086  F083         	movff	_pwmut,_gammal_pwmut
  1251  000BE4  C087  F084         	movff	_pwmut+1,_gammal_pwmut+1
  1252  000BE8  C088  F085         	movff	_pwmut+2,_gammal_pwmut+2
  1253                           
  1254                           ;main.c: 128: _delay((unsigned long)((100)*(4000000/4000.0)));
  1255  000BEC  0E82               	movlw	130
  1256  000BEE  0100               	movlb	0	; () banked
  1257  000BF0  6F68               	movwf	??_main& (0+255),b
  1258  000BF2  0EDE               	movlw	222
  1259  000BF4                     u2507:
  1260  000BF4  2EE8               	decfsz	wreg,f,c
  1261  000BF6  D7FE               	goto	u2507
  1262  000BF8  2F68               	decfsz	??_main& (0+255),f,b
  1263  000BFA  D7FC               	goto	u2507
  1264                           
  1265                           ;main.c: 129: _delay((unsigned long)((100)*(4000000/4000.0)));
  1266  000BFC  0E82               	movlw	130
  1267  000BFE  0100               	movlb	0	; () banked
  1268  000C00  6F68               	movwf	??_main& (0+255),b
  1269  000C02  0EDE               	movlw	222
  1270  000C04                     u2517:
  1271  000C04  2EE8               	decfsz	wreg,f,c
  1272  000C06  D7FE               	goto	u2517
  1273  000C08  2F68               	decfsz	??_main& (0+255),f,b
  1274  000C0A  D7FC               	goto	u2517
  1275                           
  1276                           ;main.c: 130: _delay((unsigned long)((100)*(4000000/4000.0)));
  1277  000C0C  0E82               	movlw	130
  1278  000C0E  0100               	movlb	0	; () banked
  1279  000C10  6F68               	movwf	??_main& (0+255),b
  1280  000C12  0EDE               	movlw	222
  1281  000C14                     u2527:
  1282  000C14  2EE8               	decfsz	wreg,f,c
  1283  000C16  D7FE               	goto	u2527
  1284  000C18  2F68               	decfsz	??_main& (0+255),f,b
  1285  000C1A  D7FC               	goto	u2527
  1286                           
  1287                           ;main.c: 131: _delay((unsigned long)((100)*(4000000/4000.0)));
  1288  000C1C  0E82               	movlw	130
  1289  000C1E  0100               	movlb	0	; () banked
  1290  000C20  6F68               	movwf	??_main& (0+255),b
  1291  000C22  0EDE               	movlw	222
  1292  000C24                     u2537:
  1293  000C24  2EE8               	decfsz	wreg,f,c
  1294  000C26  D7FE               	goto	u2537
  1295  000C28  2F68               	decfsz	??_main& (0+255),f,b
  1296  000C2A  D7FC               	goto	u2537
  1297                           
  1298                           ;main.c: 132: _delay((unsigned long)((89)*(4000000/4000.0)));
  1299  000C2C  0E74               	movlw	116
  1300  000C2E  0100               	movlb	0	; () banked
  1301  000C30  6F68               	movwf	??_main& (0+255),b
  1302  000C32  0E94               	movlw	148
  1303  000C34                     u2547:
  1304  000C34  2EE8               	decfsz	wreg,f,c
  1305  000C36  D7FE               	goto	u2547
  1306  000C38  2F68               	decfsz	??_main& (0+255),f,b
  1307  000C3A  D7FC               	goto	u2547
  1308  000C3C  D000               	nop2	
  1309                           
  1310                           ;main.c: 135: if(PORTAbits.RA1 == 1){
  1311  000C3E  A280               	btfss	3968,1,c	;volatile
  1312  000C40  D00D               	goto	l147
  1313                           
  1314                           ;main.c: 136: hr++;
  1315  000C42  0100               	movlb	0	; () banked
  1316  000C44  2B89               	incf	_hr& (0+255),f,b
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;main.c: 137: if(hr == 24){
  1320  000C46  0100               	movlb	0	; () banked
  1321  000C48  5189               	movf	_hr& (0+255),w,b
  1322  000C4A  0A18               	xorlw	24
  1323  000C4C  A4D8               	btfss	status,2,c
  1324  000C4E  D003               	goto	l149
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;main.c: 138: hr = 0;
  1328  000C50  0E00               	movlw	0
  1329  000C52  0100               	movlb	0	; () banked
  1330  000C54  6F89               	movwf	_hr& (0+255),b
  1331  000C56                     l149:
  1332  000C56  A280               	btfss	3968,1,c	;volatile
  1333  000C58  D500               	goto	l2473
  1334  000C5A  D7FD               	goto	l149
  1335  000C5C                     l147:
  1336                           
  1337                           ;main.c: 142: else if(PORTAbits.RA2 == 1){
  1338  000C5C  A480               	btfss	3968,2,c	;volatile
  1339  000C5E  D00D               	goto	l153
  1340                           
  1341                           ;main.c: 143: min++;
  1342  000C60  0100               	movlb	0	; () banked
  1343  000C62  2B8A               	incf	_min& (0+255),f,b
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;main.c: 144: if(min == 60){
  1347  000C64  0100               	movlb	0	; () banked
  1348  000C66  518A               	movf	_min& (0+255),w,b
  1349  000C68  0A3C               	xorlw	60
  1350  000C6A  A4D8               	btfss	status,2,c
  1351  000C6C  D003               	goto	l155
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 145: min = 0;
  1355  000C6E  0E00               	movlw	0
  1356  000C70  0100               	movlb	0	; () banked
  1357  000C72  6F8A               	movwf	_min& (0+255),b
  1358  000C74                     l155:
  1359  000C74  A480               	btfss	3968,2,c	;volatile
  1360  000C76  D4F1               	goto	l2473
  1361  000C78  D7FD               	goto	l155
  1362  000C7A                     l153:
  1363                           
  1364                           ;main.c: 149: else if(PORTAbits.RA3 == 1){
  1365  000C7A  A680               	btfss	3968,3,c	;volatile
  1366  000C7C  D4EE               	goto	l2473
  1367                           
  1368                           ;main.c: 150: sec = 0;
  1369  000C7E  0E00               	movlw	0
  1370  000C80  6E4F               	movwf	_sec,c
  1371  000C82                     l160:
  1372  000C82  A680               	btfss	3968,3,c	;volatile
  1373  000C84  D4EA               	goto	l2473
  1374  000C86  D7FD               	goto	l160
  1375  000C88                     __end_of_main:
  1376                           	opt stack 0
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           prodl	equ	0xFF3
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _show_values *****************
  1385 ;; Defined at:
  1386 ;;		line 256 in file "main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  SP              2   21[COMRAM] unsigned int 
  1389 ;;  PV              2   23[COMRAM] unsigned int 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  PV1             2   27[COMRAM] unsigned int 
  1392 ;;  SP1             2   25[COMRAM] unsigned int 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;		None               void
  1395 ;; Registers used:
  1396 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1402 ;;      Params:         4       0       0       0       0       0       0
  1403 ;;      Locals:         4       0       0       0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0
  1405 ;;      Totals:         8       0       0       0       0       0       0
  1406 ;;Total ram usage:        8 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    3
  1409 ;; This function calls:
  1410 ;;		___lwdiv
  1411 ;;		___lwmod
  1412 ;;		_lcd_goto
  1413 ;;		_lcd_write
  1414 ;;		_lcd_writesc
  1415 ;; This function is called by:
  1416 ;;		_main
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text1
  1421  00113C                     __ptext1:
  1422                           	opt stack 0
  1423  00113C                     _show_values:
  1424                           	opt stack 27
  1425                           
  1426                           ;main.c: 258: unsigned int SP1 = SP;
  1427                           
  1428                           ;incstack = 0
  1429  00113C  C016  F01A         	movff	show_values@SP,show_values@SP1
  1430  001140  C017  F01B         	movff	show_values@SP+1,show_values@SP1+1
  1431                           
  1432                           ;main.c: 259: unsigned int PV1 = PV;
  1433  001144  C018  F01C         	movff	show_values@PV,show_values@PV1
  1434  001148  C019  F01D         	movff	show_values@PV+1,show_values@PV1+1
  1435                           
  1436                           ;main.c: 262: lcd_goto(0x0A);
  1437  00114C  0E0A               	movlw	10
  1438  00114E  EC84  F00C         	call	_lcd_goto
  1439                           
  1440                           ;main.c: 263: lcd_write('S');
  1441  001152  0E53               	movlw	83
  1442  001154  EC0C  F00B         	call	_lcd_write
  1443                           
  1444                           ;main.c: 264: lcd_write('P');
  1445  001158  0E50               	movlw	80
  1446  00115A  EC0C  F00B         	call	_lcd_write
  1447                           
  1448                           ;main.c: 265: lcd_write(':');
  1449  00115E  0E3A               	movlw	58
  1450  001160  EC0C  F00B         	call	_lcd_write
  1451                           
  1452                           ;main.c: 266: lcd_write('0'+SP1/10);
  1453  001164  C01A  F00F         	movff	show_values@SP1,___lwdiv@dividend
  1454  001168  C01B  F010         	movff	show_values@SP1+1,___lwdiv@dividend+1
  1455  00116C  0E00               	movlw	0
  1456  00116E  6E12               	movwf	___lwdiv@divisor+1,c
  1457  001170  0E0A               	movlw	10
  1458  001172  6E11               	movwf	___lwdiv@divisor,c
  1459  001174  EC6F  F00B         	call	___lwdiv	;wreg free
  1460  001178  500F               	movf	?___lwdiv,w,c
  1461  00117A  0F30               	addlw	48
  1462  00117C  EC0C  F00B         	call	_lcd_write
  1463                           
  1464                           ;main.c: 267: lcd_write('0'+SP1%10);
  1465  001180  C01A  F00F         	movff	show_values@SP1,___lwmod@dividend
  1466  001184  C01B  F010         	movff	show_values@SP1+1,___lwmod@dividend+1
  1467  001188  0E00               	movlw	0
  1468  00118A  6E12               	movwf	___lwmod@divisor+1,c
  1469  00118C  0E0A               	movlw	10
  1470  00118E  6E11               	movwf	___lwmod@divisor,c
  1471  001190  ECDE  F00B         	call	___lwmod	;wreg free
  1472  001194  500F               	movf	?___lwmod,w,c
  1473  001196  0F30               	addlw	48
  1474  001198  EC0C  F00B         	call	_lcd_write
  1475                           
  1476                           ;main.c: 268: lcd_write('%');
  1477  00119C  0E25               	movlw	37
  1478  00119E  EC0C  F00B         	call	_lcd_write
  1479                           
  1480                           ;main.c: 270: lcd_goto(0x4A);
  1481  0011A2  0E4A               	movlw	74
  1482  0011A4  EC84  F00C         	call	_lcd_goto
  1483                           
  1484                           ;main.c: 271: lcd_writesc("PV:");
  1485  0011A8  0E06               	movlw	high STR_4
  1486  0011AA  6E11               	movwf	lcd_writesc@s+1,c
  1487  0011AC  0E2A               	movlw	low STR_4
  1488  0011AE  6E10               	movwf	lcd_writesc@s,c
  1489  0011B0  EC1A  F00C         	call	_lcd_writesc	;wreg free
  1490                           
  1491                           ;main.c: 272: lcd_write('0'+PV1/10);
  1492  0011B4  C01C  F00F         	movff	show_values@PV1,___lwdiv@dividend
  1493  0011B8  C01D  F010         	movff	show_values@PV1+1,___lwdiv@dividend+1
  1494  0011BC  0E00               	movlw	0
  1495  0011BE  6E12               	movwf	___lwdiv@divisor+1,c
  1496  0011C0  0E0A               	movlw	10
  1497  0011C2  6E11               	movwf	___lwdiv@divisor,c
  1498  0011C4  EC6F  F00B         	call	___lwdiv	;wreg free
  1499  0011C8  500F               	movf	?___lwdiv,w,c
  1500  0011CA  0F30               	addlw	48
  1501  0011CC  EC0C  F00B         	call	_lcd_write
  1502                           
  1503                           ;main.c: 273: lcd_write('0'+PV1%10);
  1504  0011D0  C01C  F00F         	movff	show_values@PV1,___lwmod@dividend
  1505  0011D4  C01D  F010         	movff	show_values@PV1+1,___lwmod@dividend+1
  1506  0011D8  0E00               	movlw	0
  1507  0011DA  6E12               	movwf	___lwmod@divisor+1,c
  1508  0011DC  0E0A               	movlw	10
  1509  0011DE  6E11               	movwf	___lwmod@divisor,c
  1510  0011E0  ECDE  F00B         	call	___lwmod	;wreg free
  1511  0011E4  500F               	movf	?___lwmod,w,c
  1512  0011E6  0F30               	addlw	48
  1513  0011E8  EC0C  F00B         	call	_lcd_write
  1514                           
  1515                           ;main.c: 274: lcd_write('%');
  1516  0011EC  0E25               	movlw	37
  1517  0011EE  EC0C  F00B         	call	_lcd_write
  1518  0011F2  0012               	return	
  1519  0011F4                     __end_of_show_values:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           prodl	equ	0xFF3
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function ___lwmod *****************
  1529 ;; Defined at:
  1530 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  dividend        2   14[COMRAM] unsigned int 
  1533 ;;  divisor         2   16[COMRAM] unsigned int 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  counter         1   18[COMRAM] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  2   14[COMRAM] unsigned int 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1545 ;;      Params:         4       0       0       0       0       0       0
  1546 ;;      Locals:         1       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0
  1548 ;;      Totals:         5       0       0       0       0       0       0
  1549 ;;Total ram usage:        5 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    1
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_show_values
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text2
  1560  0017BC                     __ptext2:
  1561                           	opt stack 0
  1562  0017BC                     ___lwmod:
  1563                           	opt stack 28
  1564                           
  1565                           ;incstack = 0
  1566  0017BC  5012               	movf	___lwmod@divisor+1,w,c
  1567  0017BE  1011               	iorwf	___lwmod@divisor,w,c
  1568  0017C0  B4D8               	btfsc	status,2,c
  1569  0017C2  D018               	goto	l774
  1570  0017C4  0E01               	movlw	1
  1571  0017C6  6E13               	movwf	___lwmod@counter,c
  1572  0017C8  D004               	goto	l1905
  1573  0017CA                     l1903:
  1574  0017CA  90D8               	bcf	status,0,c
  1575  0017CC  3611               	rlcf	___lwmod@divisor,f,c
  1576  0017CE  3612               	rlcf	___lwmod@divisor+1,f,c
  1577  0017D0  2A13               	incf	___lwmod@counter,f,c
  1578  0017D2                     l1905:
  1579  0017D2  AE12               	btfss	___lwmod@divisor+1,7,c
  1580  0017D4  D7FA               	goto	l1903
  1581  0017D6                     l1907:
  1582  0017D6  5011               	movf	___lwmod@divisor,w,c
  1583  0017D8  5C0F               	subwf	___lwmod@dividend,w,c
  1584  0017DA  5012               	movf	___lwmod@divisor+1,w,c
  1585  0017DC  5810               	subwfb	___lwmod@dividend+1,w,c
  1586  0017DE  A0D8               	btfss	status,0,c
  1587  0017E0  D004               	goto	l1911
  1588  0017E2  5011               	movf	___lwmod@divisor,w,c
  1589  0017E4  5E0F               	subwf	___lwmod@dividend,f,c
  1590  0017E6  5012               	movf	___lwmod@divisor+1,w,c
  1591  0017E8  5A10               	subwfb	___lwmod@dividend+1,f,c
  1592  0017EA                     l1911:
  1593  0017EA  90D8               	bcf	status,0,c
  1594  0017EC  3212               	rrcf	___lwmod@divisor+1,f,c
  1595  0017EE  3211               	rrcf	___lwmod@divisor,f,c
  1596  0017F0  2E13               	decfsz	___lwmod@counter,f,c
  1597  0017F2  D7F1               	goto	l1907
  1598  0017F4                     l774:
  1599  0017F4  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  1600  0017F8  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  1601  0017FC  0012               	return	
  1602  0017FE                     __end_of___lwmod:
  1603                           	opt stack 0
  1604                           tblptru	equ	0xFF8
  1605                           tblptrh	equ	0xFF7
  1606                           prodl	equ	0xFF3
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function ___lwdiv *****************
  1612 ;; Defined at:
  1613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  dividend        2   14[COMRAM] unsigned int 
  1616 ;;  divisor         2   16[COMRAM] unsigned int 
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;  quotient        2   18[COMRAM] unsigned int 
  1619 ;;  counter         1   20[COMRAM] unsigned char 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  2   14[COMRAM] unsigned int 
  1622 ;; Registers used:
  1623 ;;		wreg, status,2, status,0
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1629 ;;      Params:         4       0       0       0       0       0       0
  1630 ;;      Locals:         3       0       0       0       0       0       0
  1631 ;;      Temps:          0       0       0       0       0       0       0
  1632 ;;      Totals:         7       0       0       0       0       0       0
  1633 ;;Total ram usage:        7 bytes
  1634 ;; Hardware stack levels used:    1
  1635 ;; Hardware stack levels required when called:    1
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_show_values
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text3
  1644  0016DE                     __ptext3:
  1645                           	opt stack 0
  1646  0016DE                     ___lwdiv:
  1647                           	opt stack 28
  1648                           
  1649                           ;incstack = 0
  1650  0016DE  0E00               	movlw	0
  1651  0016E0  6E14               	movwf	___lwdiv@quotient+1,c
  1652  0016E2  0E00               	movlw	0
  1653  0016E4  6E13               	movwf	___lwdiv@quotient,c
  1654  0016E6  5012               	movf	___lwdiv@divisor+1,w,c
  1655  0016E8  1011               	iorwf	___lwdiv@divisor,w,c
  1656  0016EA  B4D8               	btfsc	status,2,c
  1657  0016EC  D01C               	goto	l764
  1658  0016EE  0E01               	movlw	1
  1659  0016F0  6E15               	movwf	___lwdiv@counter,c
  1660  0016F2  D004               	goto	l1885
  1661  0016F4                     l1883:
  1662  0016F4  90D8               	bcf	status,0,c
  1663  0016F6  3611               	rlcf	___lwdiv@divisor,f,c
  1664  0016F8  3612               	rlcf	___lwdiv@divisor+1,f,c
  1665  0016FA  2A15               	incf	___lwdiv@counter,f,c
  1666  0016FC                     l1885:
  1667  0016FC  AE12               	btfss	___lwdiv@divisor+1,7,c
  1668  0016FE  D7FA               	goto	l1883
  1669  001700                     l1887:
  1670  001700  90D8               	bcf	status,0,c
  1671  001702  3613               	rlcf	___lwdiv@quotient,f,c
  1672  001704  3614               	rlcf	___lwdiv@quotient+1,f,c
  1673  001706  5011               	movf	___lwdiv@divisor,w,c
  1674  001708  5C0F               	subwf	___lwdiv@dividend,w,c
  1675  00170A  5012               	movf	___lwdiv@divisor+1,w,c
  1676  00170C  5810               	subwfb	___lwdiv@dividend+1,w,c
  1677  00170E  A0D8               	btfss	status,0,c
  1678  001710  D005               	goto	l1895
  1679  001712  5011               	movf	___lwdiv@divisor,w,c
  1680  001714  5E0F               	subwf	___lwdiv@dividend,f,c
  1681  001716  5012               	movf	___lwdiv@divisor+1,w,c
  1682  001718  5A10               	subwfb	___lwdiv@dividend+1,f,c
  1683  00171A  8013               	bsf	___lwdiv@quotient,0,c
  1684  00171C                     l1895:
  1685  00171C  90D8               	bcf	status,0,c
  1686  00171E  3212               	rrcf	___lwdiv@divisor+1,f,c
  1687  001720  3211               	rrcf	___lwdiv@divisor,f,c
  1688  001722  2E15               	decfsz	___lwdiv@counter,f,c
  1689  001724  D7ED               	goto	l1887
  1690  001726                     l764:
  1691  001726  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  1692  00172A  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1693  00172E  0012               	return	
  1694  001730                     __end_of___lwdiv:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           prodl	equ	0xFF3
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _show_clock *****************
  1704 ;; Defined at:
  1705 ;;		line 278 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		wreg, status,2, status,0, prodl, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1719 ;;      Params:         0       0       0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		___awdiv
  1728 ;;		___awmod
  1729 ;;		_lcd_goto
  1730 ;;		_lcd_write
  1731 ;; This function is called by:
  1732 ;;		_main
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text4
  1737  0011F4                     __ptext4:
  1738                           	opt stack 0
  1739  0011F4                     _show_clock:
  1740                           	opt stack 27
  1741                           
  1742                           ;main.c: 280: lcd_goto(0x40);
  1743                           
  1744                           ;incstack = 0
  1745  0011F4  0E40               	movlw	64
  1746  0011F6  EC84  F00C         	call	_lcd_goto
  1747                           
  1748                           ;main.c: 281: lcd_write('0'+hr/10);
  1749  0011FA  0100               	movlb	0	; () banked
  1750  0011FC  C089  F00F         	movff	_hr,___awdiv@dividend
  1751  001200  6A10               	clrf	___awdiv@dividend+1,c
  1752  001202  0E00               	movlw	0
  1753  001204  6E12               	movwf	___awdiv@divisor+1,c
  1754  001206  0E0A               	movlw	10
  1755  001208  6E11               	movwf	___awdiv@divisor,c
  1756  00120A  ECAA  F009         	call	___awdiv	;wreg free
  1757  00120E  500F               	movf	?___awdiv,w,c
  1758  001210  0F30               	addlw	48
  1759  001212  EC0C  F00B         	call	_lcd_write
  1760                           
  1761                           ;main.c: 282: lcd_write('0'+hr%10);
  1762  001216  0100               	movlb	0	; () banked
  1763  001218  C089  F00F         	movff	_hr,___awmod@dividend
  1764  00121C  6A10               	clrf	___awmod@dividend+1,c
  1765  00121E  0E00               	movlw	0
  1766  001220  6E12               	movwf	___awmod@divisor+1,c
  1767  001222  0E0A               	movlw	10
  1768  001224  6E11               	movwf	___awmod@divisor,c
  1769  001226  ECFC  F009         	call	___awmod	;wreg free
  1770  00122A  500F               	movf	?___awmod,w,c
  1771  00122C  0F30               	addlw	48
  1772  00122E  EC0C  F00B         	call	_lcd_write
  1773                           
  1774                           ;main.c: 283: lcd_write(':');
  1775  001232  0E3A               	movlw	58
  1776  001234  EC0C  F00B         	call	_lcd_write
  1777                           
  1778                           ;main.c: 284: lcd_write('0'+min/10);
  1779  001238  0100               	movlb	0	; () banked
  1780  00123A  C08A  F00F         	movff	_min,___awdiv@dividend
  1781  00123E  6A10               	clrf	___awdiv@dividend+1,c
  1782  001240  0E00               	movlw	0
  1783  001242  6E12               	movwf	___awdiv@divisor+1,c
  1784  001244  0E0A               	movlw	10
  1785  001246  6E11               	movwf	___awdiv@divisor,c
  1786  001248  ECAA  F009         	call	___awdiv	;wreg free
  1787  00124C  500F               	movf	?___awdiv,w,c
  1788  00124E  0F30               	addlw	48
  1789  001250  EC0C  F00B         	call	_lcd_write
  1790                           
  1791                           ;main.c: 285: lcd_write('0'+min%10);
  1792  001254  0100               	movlb	0	; () banked
  1793  001256  C08A  F00F         	movff	_min,___awmod@dividend
  1794  00125A  6A10               	clrf	___awmod@dividend+1,c
  1795  00125C  0E00               	movlw	0
  1796  00125E  6E12               	movwf	___awmod@divisor+1,c
  1797  001260  0E0A               	movlw	10
  1798  001262  6E11               	movwf	___awmod@divisor,c
  1799  001264  ECFC  F009         	call	___awmod	;wreg free
  1800  001268  500F               	movf	?___awmod,w,c
  1801  00126A  0F30               	addlw	48
  1802  00126C  EC0C  F00B         	call	_lcd_write
  1803                           
  1804                           ;main.c: 286: lcd_write(':');
  1805  001270  0E3A               	movlw	58
  1806  001272  EC0C  F00B         	call	_lcd_write
  1807                           
  1808                           ;main.c: 287: lcd_write('0'+sec/10);
  1809  001276  C04F  F00F         	movff	_sec,___awdiv@dividend
  1810  00127A  6A10               	clrf	___awdiv@dividend+1,c
  1811  00127C  0E00               	movlw	0
  1812  00127E  6E12               	movwf	___awdiv@divisor+1,c
  1813  001280  0E0A               	movlw	10
  1814  001282  6E11               	movwf	___awdiv@divisor,c
  1815  001284  ECAA  F009         	call	___awdiv	;wreg free
  1816  001288  500F               	movf	?___awdiv,w,c
  1817  00128A  0F30               	addlw	48
  1818  00128C  EC0C  F00B         	call	_lcd_write
  1819                           
  1820                           ;main.c: 288: lcd_write('0'+sec%10);
  1821  001290  C04F  F00F         	movff	_sec,___awmod@dividend
  1822  001294  6A10               	clrf	___awmod@dividend+1,c
  1823  001296  0E00               	movlw	0
  1824  001298  6E12               	movwf	___awmod@divisor+1,c
  1825  00129A  0E0A               	movlw	10
  1826  00129C  6E11               	movwf	___awmod@divisor,c
  1827  00129E  ECFC  F009         	call	___awmod	;wreg free
  1828  0012A2  500F               	movf	?___awmod,w,c
  1829  0012A4  0F30               	addlw	48
  1830  0012A6  EC0C  F00B         	call	_lcd_write
  1831  0012AA  0012               	return	
  1832  0012AC                     __end_of_show_clock:
  1833                           	opt stack 0
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           prodl	equ	0xFF3
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function ___awmod *****************
  1842 ;; Defined at:
  1843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  dividend        2   14[COMRAM] int 
  1846 ;;  divisor         2   16[COMRAM] int 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  sign            1   19[COMRAM] unsigned char 
  1849 ;;  counter         1   18[COMRAM] unsigned char 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  2   14[COMRAM] int 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, prodl
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1859 ;;      Params:         4       0       0       0       0       0       0
  1860 ;;      Locals:         2       0       0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0       0       0
  1862 ;;      Totals:         6       0       0       0       0       0       0
  1863 ;;Total ram usage:        6 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    1
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_show_clock
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text5
  1874  0013F8                     __ptext5:
  1875                           	opt stack 0
  1876  0013F8                     ___awmod:
  1877                           	opt stack 28
  1878                           
  1879                           ;incstack = 0
  1880  0013F8  0E00               	movlw	0
  1881  0013FA  6E14               	movwf	___awmod@sign,c
  1882  0013FC  5010               	movf	___awmod@dividend+1,w,c
  1883  0013FE  0A80               	xorlw	128
  1884  001400  6EF3               	movwf	prodl,c
  1885  001402  0E80               	movlw	128
  1886  001404  5CF3               	subwf	prodl,w,c
  1887  001406  0E00               	movlw	0
  1888  001408  B4D8               	btfsc	status,2,c
  1889  00140A  5C0F               	subwf	___awmod@dividend,w,c
  1890  00140C  B0D8               	btfsc	status,0,c
  1891  00140E  D006               	goto	l1849
  1892  001410  6C0F               	negf	___awmod@dividend,c
  1893  001412  1E10               	comf	___awmod@dividend+1,f,c
  1894  001414  B0D8               	btfsc	status,0,c
  1895  001416  2A10               	incf	___awmod@dividend+1,f,c
  1896  001418  0E01               	movlw	1
  1897  00141A  6E14               	movwf	___awmod@sign,c
  1898  00141C                     l1849:
  1899  00141C  5012               	movf	___awmod@divisor+1,w,c
  1900  00141E  0A80               	xorlw	128
  1901  001420  6EF3               	movwf	prodl,c
  1902  001422  0E80               	movlw	128
  1903  001424  5CF3               	subwf	prodl,w,c
  1904  001426  0E00               	movlw	0
  1905  001428  B4D8               	btfsc	status,2,c
  1906  00142A  5C11               	subwf	___awmod@divisor,w,c
  1907  00142C  B0D8               	btfsc	status,0,c
  1908  00142E  D004               	goto	l1853
  1909  001430  6C11               	negf	___awmod@divisor,c
  1910  001432  1E12               	comf	___awmod@divisor+1,f,c
  1911  001434  B0D8               	btfsc	status,0,c
  1912  001436  2A12               	incf	___awmod@divisor+1,f,c
  1913  001438                     l1853:
  1914  001438  5012               	movf	___awmod@divisor+1,w,c
  1915  00143A  1011               	iorwf	___awmod@divisor,w,c
  1916  00143C  B4D8               	btfsc	status,2,c
  1917  00143E  D018               	goto	l1869
  1918  001440  0E01               	movlw	1
  1919  001442  6E13               	movwf	___awmod@counter,c
  1920  001444  D004               	goto	l1859
  1921  001446                     l1857:
  1922  001446  90D8               	bcf	status,0,c
  1923  001448  3611               	rlcf	___awmod@divisor,f,c
  1924  00144A  3612               	rlcf	___awmod@divisor+1,f,c
  1925  00144C  2A13               	incf	___awmod@counter,f,c
  1926  00144E                     l1859:
  1927  00144E  AE12               	btfss	___awmod@divisor+1,7,c
  1928  001450  D7FA               	goto	l1857
  1929  001452                     l1861:
  1930  001452  5011               	movf	___awmod@divisor,w,c
  1931  001454  5C0F               	subwf	___awmod@dividend,w,c
  1932  001456  5012               	movf	___awmod@divisor+1,w,c
  1933  001458  5810               	subwfb	___awmod@dividend+1,w,c
  1934  00145A  A0D8               	btfss	status,0,c
  1935  00145C  D004               	goto	l1865
  1936  00145E  5011               	movf	___awmod@divisor,w,c
  1937  001460  5E0F               	subwf	___awmod@dividend,f,c
  1938  001462  5012               	movf	___awmod@divisor+1,w,c
  1939  001464  5A10               	subwfb	___awmod@dividend+1,f,c
  1940  001466                     l1865:
  1941  001466  90D8               	bcf	status,0,c
  1942  001468  3212               	rrcf	___awmod@divisor+1,f,c
  1943  00146A  3211               	rrcf	___awmod@divisor,f,c
  1944  00146C  2E13               	decfsz	___awmod@counter,f,c
  1945  00146E  D7F1               	goto	l1861
  1946  001470                     l1869:
  1947  001470  5014               	movf	___awmod@sign,w,c
  1948  001472  B4D8               	btfsc	status,2,c
  1949  001474  D004               	goto	l1873
  1950  001476  6C0F               	negf	___awmod@dividend,c
  1951  001478  1E10               	comf	___awmod@dividend+1,f,c
  1952  00147A  B0D8               	btfsc	status,0,c
  1953  00147C  2A10               	incf	___awmod@dividend+1,f,c
  1954  00147E                     l1873:
  1955  00147E  C00F  F00F         	movff	___awmod@dividend,?___awmod
  1956  001482  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  1957  001486  0012               	return	
  1958  001488                     __end_of___awmod:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           prodl	equ	0xFF3
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function ___awdiv *****************
  1968 ;; Defined at:
  1969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  dividend        2   14[COMRAM] int 
  1972 ;;  divisor         2   16[COMRAM] int 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  quotient        2   20[COMRAM] int 
  1975 ;;  sign            1   19[COMRAM] unsigned char 
  1976 ;;  counter         1   18[COMRAM] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2   14[COMRAM] int 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, prodl
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1986 ;;      Params:         4       0       0       0       0       0       0
  1987 ;;      Locals:         4       0       0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0
  1989 ;;      Totals:         8       0       0       0       0       0       0
  1990 ;;Total ram usage:        8 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_show_clock
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text6
  2001  001354                     __ptext6:
  2002                           	opt stack 0
  2003  001354                     ___awdiv:
  2004                           	opt stack 28
  2005                           
  2006                           ;incstack = 0
  2007  001354  0E00               	movlw	0
  2008  001356  6E14               	movwf	___awdiv@sign,c
  2009  001358  5012               	movf	___awdiv@divisor+1,w,c
  2010  00135A  0A80               	xorlw	128
  2011  00135C  6EF3               	movwf	prodl,c
  2012  00135E  0E80               	movlw	128
  2013  001360  5CF3               	subwf	prodl,w,c
  2014  001362  0E00               	movlw	0
  2015  001364  B4D8               	btfsc	status,2,c
  2016  001366  5C11               	subwf	___awdiv@divisor,w,c
  2017  001368  B0D8               	btfsc	status,0,c
  2018  00136A  D006               	goto	l1805
  2019  00136C  6C11               	negf	___awdiv@divisor,c
  2020  00136E  1E12               	comf	___awdiv@divisor+1,f,c
  2021  001370  B0D8               	btfsc	status,0,c
  2022  001372  2A12               	incf	___awdiv@divisor+1,f,c
  2023  001374  0E01               	movlw	1
  2024  001376  6E14               	movwf	___awdiv@sign,c
  2025  001378                     l1805:
  2026  001378  5010               	movf	___awdiv@dividend+1,w,c
  2027  00137A  0A80               	xorlw	128
  2028  00137C  6EF3               	movwf	prodl,c
  2029  00137E  0E80               	movlw	128
  2030  001380  5CF3               	subwf	prodl,w,c
  2031  001382  0E00               	movlw	0
  2032  001384  B4D8               	btfsc	status,2,c
  2033  001386  5C0F               	subwf	___awdiv@dividend,w,c
  2034  001388  B0D8               	btfsc	status,0,c
  2035  00138A  D006               	goto	l1811
  2036  00138C  6C0F               	negf	___awdiv@dividend,c
  2037  00138E  1E10               	comf	___awdiv@dividend+1,f,c
  2038  001390  B0D8               	btfsc	status,0,c
  2039  001392  2A10               	incf	___awdiv@dividend+1,f,c
  2040  001394  0E01               	movlw	1
  2041  001396  1A14               	xorwf	___awdiv@sign,f,c
  2042  001398                     l1811:
  2043  001398  0E00               	movlw	0
  2044  00139A  6E16               	movwf	___awdiv@quotient+1,c
  2045  00139C  0E00               	movlw	0
  2046  00139E  6E15               	movwf	___awdiv@quotient,c
  2047  0013A0  5012               	movf	___awdiv@divisor+1,w,c
  2048  0013A2  1011               	iorwf	___awdiv@divisor,w,c
  2049  0013A4  B4D8               	btfsc	status,2,c
  2050  0013A6  D01C               	goto	l1833
  2051  0013A8  0E01               	movlw	1
  2052  0013AA  6E13               	movwf	___awdiv@counter,c
  2053  0013AC  D004               	goto	l1819
  2054  0013AE                     l1817:
  2055  0013AE  90D8               	bcf	status,0,c
  2056  0013B0  3611               	rlcf	___awdiv@divisor,f,c
  2057  0013B2  3612               	rlcf	___awdiv@divisor+1,f,c
  2058  0013B4  2A13               	incf	___awdiv@counter,f,c
  2059  0013B6                     l1819:
  2060  0013B6  AE12               	btfss	___awdiv@divisor+1,7,c
  2061  0013B8  D7FA               	goto	l1817
  2062  0013BA                     l1821:
  2063  0013BA  90D8               	bcf	status,0,c
  2064  0013BC  3615               	rlcf	___awdiv@quotient,f,c
  2065  0013BE  3616               	rlcf	___awdiv@quotient+1,f,c
  2066  0013C0  5011               	movf	___awdiv@divisor,w,c
  2067  0013C2  5C0F               	subwf	___awdiv@dividend,w,c
  2068  0013C4  5012               	movf	___awdiv@divisor+1,w,c
  2069  0013C6  5810               	subwfb	___awdiv@dividend+1,w,c
  2070  0013C8  A0D8               	btfss	status,0,c
  2071  0013CA  D005               	goto	l1829
  2072  0013CC  5011               	movf	___awdiv@divisor,w,c
  2073  0013CE  5E0F               	subwf	___awdiv@dividend,f,c
  2074  0013D0  5012               	movf	___awdiv@divisor+1,w,c
  2075  0013D2  5A10               	subwfb	___awdiv@dividend+1,f,c
  2076  0013D4  8015               	bsf	___awdiv@quotient,0,c
  2077  0013D6                     l1829:
  2078  0013D6  90D8               	bcf	status,0,c
  2079  0013D8  3212               	rrcf	___awdiv@divisor+1,f,c
  2080  0013DA  3211               	rrcf	___awdiv@divisor,f,c
  2081  0013DC  2E13               	decfsz	___awdiv@counter,f,c
  2082  0013DE  D7ED               	goto	l1821
  2083  0013E0                     l1833:
  2084  0013E0  5014               	movf	___awdiv@sign,w,c
  2085  0013E2  B4D8               	btfsc	status,2,c
  2086  0013E4  D004               	goto	l1837
  2087  0013E6  6C15               	negf	___awdiv@quotient,c
  2088  0013E8  1E16               	comf	___awdiv@quotient+1,f,c
  2089  0013EA  B0D8               	btfsc	status,0,c
  2090  0013EC  2A16               	incf	___awdiv@quotient+1,f,c
  2091  0013EE                     l1837:
  2092  0013EE  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2093  0013F2  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2094  0013F6  0012               	return	
  2095  0013F8                     __end_of___awdiv:
  2096                           	opt stack 0
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           prodl	equ	0xFF3
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           status	equ	0xFD8
  2103                           
  2104 ;; *************** function _lcd_init *****************
  2105 ;; Defined at:
  2106 ;;		line 95 in file "lcd.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;		None               void
  2113 ;; Registers used:
  2114 ;;		wreg, status,2, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2120 ;;      Params:         0       0       0       0       0       0       0
  2121 ;;      Locals:         0       0       0       0       0       0       0
  2122 ;;      Temps:          1       0       0       0       0       0       0
  2123 ;;      Totals:         1       0       0       0       0       0       0
  2124 ;;Total ram usage:        1 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    3
  2127 ;; This function calls:
  2128 ;;		_lcd_clear
  2129 ;;		_lcd_cmd
  2130 ;; This function is called by:
  2131 ;;		_main
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text7
  2136  001518                     __ptext7:
  2137                           	opt stack 0
  2138  001518                     _lcd_init:
  2139                           	opt stack 27
  2140                           
  2141                           ;incstack = 0
  2142  001518  9A8A               	bcf	3978,5,c	;volatile
  2143                           
  2144                           ;lcd.c: 97: LATBbits.LATB4 = 0;
  2145  00151A  988A               	bcf	3978,4,c	;volatile
  2146                           
  2147                           ;lcd.c: 98: _delay((unsigned long)((40)*(4000000/4000.0)));
  2148  00151C  0E34               	movlw	52
  2149  00151E  6E11               	movwf	??_lcd_init& (0+255),c
  2150  001520  0EF2               	movlw	242
  2151  001522                     u2557:
  2152  001522  2EE8               	decfsz	wreg,f,c
  2153  001524  D7FE               	goto	u2557
  2154  001526  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2155  001528  D7FC               	goto	u2557
  2156                           
  2157                           ;lcd.c: 99: LATBbits.LATB0 = 1;
  2158  00152A  808A               	bsf	3978,0,c	;volatile
  2159                           
  2160                           ;lcd.c: 100: LATBbits.LATB1 = 1;
  2161  00152C  828A               	bsf	3978,1,c	;volatile
  2162                           
  2163                           ;lcd.c: 101: LATBbits.LATB2 = 0;
  2164  00152E  948A               	bcf	3978,2,c	;volatile
  2165                           
  2166                           ;lcd.c: 102: LATCbits.LATC3 = 0;
  2167  001530  968B               	bcf	3979,3,c	;volatile
  2168                           
  2169                           ;lcd.c: 103: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2170  001532  888A               	bsf	3978,4,c	;volatile
  2171  001534  F000               	nop	
  2172  001536  988A               	bcf	3978,4,c	;volatile
  2173                           
  2174                           ;lcd.c: 104: _delay((unsigned long)((6)*(4000000/4000.0)));
  2175  001538  0E08               	movlw	8
  2176  00153A  6E11               	movwf	??_lcd_init& (0+255),c
  2177  00153C  0ECA               	movlw	202
  2178  00153E                     u2567:
  2179  00153E  2EE8               	decfsz	wreg,f,c
  2180  001540  D7FE               	goto	u2567
  2181  001542  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2182  001544  D7FC               	goto	u2567
  2183                           
  2184                           ;lcd.c: 105: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2185  001546  888A               	bsf	3978,4,c	;volatile
  2186  001548  F000               	nop	
  2187  00154A  988A               	bcf	3978,4,c	;volatile
  2188                           
  2189                           ;lcd.c: 106: _delay((unsigned long)((2)*(4000000/4000.0)));
  2190  00154C  0E03               	movlw	3
  2191  00154E  6E11               	movwf	??_lcd_init& (0+255),c
  2192  001550  0E98               	movlw	152
  2193  001552                     u2577:
  2194  001552  2EE8               	decfsz	wreg,f,c
  2195  001554  D7FE               	goto	u2577
  2196  001556  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2197  001558  D7FC               	goto	u2577
  2198                           
  2199                           ;lcd.c: 107: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2200  00155A  888A               	bsf	3978,4,c	;volatile
  2201  00155C  F000               	nop	
  2202  00155E  988A               	bcf	3978,4,c	;volatile
  2203                           
  2204                           ;lcd.c: 108: _delay((unsigned long)((2)*(4000000/4000.0)));
  2205  001560  0E03               	movlw	3
  2206  001562  6E11               	movwf	??_lcd_init& (0+255),c
  2207  001564  0E98               	movlw	152
  2208  001566                     u2587:
  2209  001566  2EE8               	decfsz	wreg,f,c
  2210  001568  D7FE               	goto	u2587
  2211  00156A  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2212  00156C  D7FC               	goto	u2587
  2213                           
  2214                           ;lcd.c: 109: LATBbits.LATB0 = 0;
  2215  00156E  908A               	bcf	3978,0,c	;volatile
  2216                           
  2217                           ;lcd.c: 110: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbi
      +                          ts.LATB4=0;};
  2218  001570  888A               	bsf	3978,4,c	;volatile
  2219  001572  F000               	nop	
  2220  001574  988A               	bcf	3978,4,c	;volatile
  2221                           
  2222                           ;lcd.c: 111: _delay((unsigned long)((2)*(4000000/4000.0)));
  2223  001576  0E03               	movlw	3
  2224  001578  6E11               	movwf	??_lcd_init& (0+255),c
  2225  00157A  0E98               	movlw	152
  2226  00157C                     u2597:
  2227  00157C  2EE8               	decfsz	wreg,f,c
  2228  00157E  D7FE               	goto	u2597
  2229  001580  2E11               	decfsz	??_lcd_init& (0+255),f,c
  2230  001582  D7FC               	goto	u2597
  2231                           
  2232                           ;lcd.c: 112: lcd_cmd(0b00101000);
  2233  001584  0E28               	movlw	40
  2234  001586  EC8C  F00C         	call	_lcd_cmd
  2235                           
  2236                           ;lcd.c: 113: lcd_cmd(0b00001100);
  2237  00158A  0E0C               	movlw	12
  2238  00158C  EC8C  F00C         	call	_lcd_cmd
  2239                           
  2240                           ;lcd.c: 114: lcd_cmd(0b00000110);
  2241  001590  0E06               	movlw	6
  2242  001592  EC8C  F00C         	call	_lcd_cmd
  2243                           
  2244                           ;lcd.c: 115: lcd_clear();
  2245  001596  EC77  F00C         	call	_lcd_clear	;wreg free
  2246  00159A  0012               	return	
  2247  00159C                     __end_of_lcd_init:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           prodl	equ	0xFF3
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _lcd_cmd *****************
  2257 ;; Defined at:
  2258 ;;		line 87 in file "lcd.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;  command         1    wreg     unsigned char 
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  command         1   15[COMRAM] unsigned char 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;		None               void
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2272 ;;      Params:         0       0       0       0       0       0       0
  2273 ;;      Locals:         1       0       0       0       0       0       0
  2274 ;;      Temps:          0       0       0       0       0       0       0
  2275 ;;      Totals:         1       0       0       0       0       0       0
  2276 ;;Total ram usage:        1 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    2
  2279 ;; This function calls:
  2280 ;;		_lcd_write
  2281 ;; This function is called by:
  2282 ;;		_lcd_init
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text8
  2287  001918                     __ptext8:
  2288                           	opt stack 0
  2289  001918                     _lcd_cmd:
  2290                           	opt stack 27
  2291                           
  2292                           ;incstack = 0
  2293                           ;lcd_cmd@command stored from wreg
  2294  001918  6E10               	movwf	lcd_cmd@command,c
  2295  00191A  9A8A               	bcf	3978,5,c	;volatile
  2296                           
  2297                           ;lcd.c: 89: lcd_write(command);
  2298  00191C  5010               	movf	lcd_cmd@command,w,c
  2299  00191E  EC0C  F00B         	call	_lcd_write
  2300                           
  2301                           ;lcd.c: 90: LATBbits.LATB5=1;
  2302  001922  8A8A               	bsf	3978,5,c	;volatile
  2303  001924  0012               	return	
  2304  001926                     __end_of_lcd_cmd:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           prodl	equ	0xFF3
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _lcd_clear *****************
  2314 ;; Defined at:
  2315 ;;		line 56 in file "lcd.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;		None               void
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2329 ;;      Params:         0       0       0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0
  2331 ;;      Temps:          1       0       0       0       0       0       0
  2332 ;;      Totals:         1       0       0       0       0       0       0
  2333 ;;Total ram usage:        1 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    2
  2336 ;; This function calls:
  2337 ;;		_lcd_write
  2338 ;; This function is called by:
  2339 ;;		_lcd_init
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text9
  2344  0018EE                     __ptext9:
  2345                           	opt stack 0
  2346  0018EE                     _lcd_clear:
  2347                           	opt stack 27
  2348                           
  2349                           ;incstack = 0
  2350  0018EE  9A8A               	bcf	3978,5,c	;volatile
  2351                           
  2352                           ;lcd.c: 58: lcd_write(0x01);
  2353  0018F0  0E01               	movlw	1
  2354  0018F2  EC0C  F00B         	call	_lcd_write
  2355                           
  2356                           ;lcd.c: 59: LATBbits.LATB5=1;
  2357  0018F6  8A8A               	bsf	3978,5,c	;volatile
  2358                           
  2359                           ;lcd.c: 60: _delay((unsigned long)((2)*(4000000/4000.0)));
  2360  0018F8  0E03               	movlw	3
  2361  0018FA  6E10               	movwf	??_lcd_clear& (0+255),c
  2362  0018FC  0E98               	movlw	152
  2363  0018FE                     u2607:
  2364  0018FE  2EE8               	decfsz	wreg,f,c
  2365  001900  D7FE               	goto	u2607
  2366  001902  2E10               	decfsz	??_lcd_clear& (0+255),f,c
  2367  001904  D7FC               	goto	u2607
  2368  001906  0012               	return	
  2369  001908                     __end_of_lcd_clear:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           prodl	equ	0xFF3
  2374                           postinc0	equ	0xFEE
  2375                           wreg	equ	0xFE8
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _init *****************
  2379 ;; Defined at:
  2380 ;;		line 157 in file "main.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;		None               void
  2387 ;; Registers used:
  2388 ;;		wreg, status,2
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2394 ;;      Params:         0       0       0       0       0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0
  2397 ;;      Totals:         0       0       0       0       0       0       0
  2398 ;;Total ram usage:        0 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text10
  2409  00159C                     __ptext10:
  2410                           	opt stack 0
  2411  00159C                     _init:
  2412                           	opt stack 29
  2413                           
  2414                           ;main.c: 159: ANSELA = 0b00100001;
  2415                           
  2416                           ;incstack = 0
  2417  00159C  0E21               	movlw	33
  2418  00159E  010F               	movlb	15	; () banked
  2419  0015A0  6F38               	movwf	56,b	;volatile
  2420                           
  2421                           ;main.c: 160: ANSELB = 0b00001000;
  2422  0015A2  0E08               	movlw	8
  2423  0015A4  010F               	movlb	15	; () banked
  2424  0015A6  6F39               	movwf	57,b	;volatile
  2425                           
  2426                           ;main.c: 161: ANSELC = 0;
  2427  0015A8  0E00               	movlw	0
  2428  0015AA  010F               	movlb	15	; () banked
  2429  0015AC  6F3A               	movwf	58,b	;volatile
  2430                           
  2431                           ; BSR set to: 15
  2432                           ;main.c: 163: TRISAbits.RA0 = 1;
  2433  0015AE  8092               	bsf	3986,0,c	;volatile
  2434                           
  2435                           ; BSR set to: 15
  2436                           ;main.c: 164: TRISAbits.RA1 = 1;
  2437  0015B0  8292               	bsf	3986,1,c	;volatile
  2438                           
  2439                           ; BSR set to: 15
  2440                           ;main.c: 165: TRISAbits.RA2 = 1;
  2441  0015B2  8492               	bsf	3986,2,c	;volatile
  2442                           
  2443                           ; BSR set to: 15
  2444                           ;main.c: 166: TRISAbits.RA3 = 1;
  2445  0015B4  8692               	bsf	3986,3,c	;volatile
  2446                           
  2447                           ; BSR set to: 15
  2448                           ;main.c: 167: TRISAbits.RA4 = 0;
  2449  0015B6  9892               	bcf	3986,4,c	;volatile
  2450                           
  2451                           ; BSR set to: 15
  2452                           ;main.c: 168: TRISAbits.RA5 = 1;
  2453  0015B8  8A92               	bsf	3986,5,c	;volatile
  2454                           
  2455                           ; BSR set to: 15
  2456                           ;main.c: 169: TRISCbits.RC3 = 0;
  2457  0015BA  9694               	bcf	3988,3,c	;volatile
  2458                           
  2459                           ; BSR set to: 15
  2460                           ;main.c: 170: TRISBbits.RB3 = 1;
  2461  0015BC  8693               	bsf	3987,3,c	;volatile
  2462                           
  2463                           ;main.c: 172: TRISB=0b00001000;
  2464  0015BE  0E08               	movlw	8
  2465  0015C0  6E93               	movwf	3987,c	;volatile
  2466                           
  2467                           ;main.c: 176: ADCON2 = 0b10001010;
  2468  0015C2  0E8A               	movlw	138
  2469  0015C4  6EC0               	movwf	4032,c	;volatile
  2470                           
  2471                           ;main.c: 179: ADCON1 = 0x00;
  2472  0015C6  0E00               	movlw	0
  2473  0015C8  6EC1               	movwf	4033,c	;volatile
  2474                           
  2475                           ;main.c: 180: ADCON0 = 0x01;
  2476  0015CA  0E01               	movlw	1
  2477  0015CC  6EC2               	movwf	4034,c	;volatile
  2478                           
  2479                           ;main.c: 183: T1CON=0b00010001;
  2480  0015CE  0E11               	movlw	17
  2481  0015D0  6ECD               	movwf	4045,c	;volatile
  2482                           
  2483                           ;main.c: 184: TMR1H=60;
  2484  0015D2  0E3C               	movlw	60
  2485  0015D4  6ECF               	movwf	4047,c	;volatile
  2486                           
  2487                           ;main.c: 185: TMR1L=237;
  2488  0015D6  0EED               	movlw	237
  2489  0015D8  6ECE               	movwf	4046,c	;volatile
  2490                           
  2491                           ;main.c: 187: CCPTMRS1 = 0x01;
  2492  0015DA  0E01               	movlw	1
  2493  0015DC  010F               	movlb	15	; () banked
  2494  0015DE  6F48               	movwf	72,b	;volatile
  2495                           
  2496                           ; BSR set to: 15
  2497                           ;main.c: 189: PR2 = 255;
  2498  0015E0  68BB               	setf	4027,c	;volatile
  2499                           
  2500                           ;main.c: 190: CCP5CON = 0x0C;
  2501  0015E2  0E0C               	movlw	12
  2502  0015E4  010F               	movlb	15	; () banked
  2503  0015E6  6F54               	movwf	84,b	;volatile
  2504                           
  2505                           ;main.c: 191: T2CON = 0x04;
  2506  0015E8  0E04               	movlw	4
  2507  0015EA  6EBA               	movwf	4026,c	;volatile
  2508                           
  2509                           ;main.c: 193: CM1CON0bits.C1CH = 0b10;
  2510  0015EC  5079               	movf	3961,w,c	;volatile
  2511  0015EE  0BFC               	andlw	-4
  2512  0015F0  0902               	iorlw	2
  2513  0015F2  6E79               	movwf	3961,c	;volatile
  2514                           
  2515                           ; BSR set to: 15
  2516                           ;main.c: 194: CM1CON0bits.C1R = 1;
  2517  0015F4  8479               	bsf	3961,2,c	;volatile
  2518                           
  2519                           ; BSR set to: 15
  2520                           ;main.c: 195: CM1CON0bits.C1OE = 0;
  2521  0015F6  9A79               	bcf	3961,5,c	;volatile
  2522                           
  2523                           ; BSR set to: 15
  2524                           ;main.c: 196: CM1CON0bits.C1ON = 1;
  2525  0015F8  8E79               	bsf	3961,7,c	;volatile
  2526                           
  2527                           ; BSR set to: 15
  2528                           ;main.c: 197: CM1CON0bits.C1POL = 0;
  2529  0015FA  9879               	bcf	3961,4,c	;volatile
  2530                           
  2531                           ; BSR set to: 15
  2532                           ;main.c: 198: CM1CON0bits.C1SP = 0;
  2533  0015FC  9679               	bcf	3961,3,c	;volatile
  2534                           
  2535                           ; BSR set to: 15
  2536                           ;main.c: 200: CM2CON1bits.C1RSEL = 1;
  2537  0015FE  8A77               	bsf	3959,5,c	;volatile
  2538                           
  2539                           ; BSR set to: 15
  2540                           ;main.c: 202: VREFCON0bits.FVREN = 1;
  2541  001600  010F               	movlb	15	; () banked
  2542  001602  8F42               	bsf	66,7,b	;volatile
  2543                           
  2544                           ;main.c: 204: VREFCON0bits.FVRS = 0b11;
  2545  001604  0E30               	movlw	48
  2546  001606  010F               	movlb	15	; () banked
  2547  001608  1342               	iorwf	66,f,b	;volatile
  2548                           
  2549                           ;main.c: 208: PIE1=0b00000001;
  2550  00160A  0E01               	movlw	1
  2551  00160C  6E9D               	movwf	3997,c	;volatile
  2552                           
  2553                           ;main.c: 209: IPR1=0b00000001;
  2554  00160E  0E01               	movlw	1
  2555  001610  6E9F               	movwf	3999,c	;volatile
  2556                           
  2557                           ;main.c: 210: INTCON=0b11000000;
  2558  001612  0EC0               	movlw	192
  2559  001614  6EF2               	movwf	intcon,c	;volatile
  2560                           
  2561                           ; BSR set to: 15
  2562  001616  0012               	return	
  2563  001618                     __end_of_init:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           prodl	equ	0xFF3
  2568                           intcon	equ	0xFF2
  2569                           postinc0	equ	0xFEE
  2570                           wreg	equ	0xFE8
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function ___lwtoft *****************
  2574 ;; Defined at:
  2575 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  c               2   22[COMRAM] unsigned int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  3   22[COMRAM] float 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2589 ;;      Params:         3       0       0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0
  2592 ;;      Totals:         3       0       0       0       0       0       0
  2593 ;;Total ram usage:        3 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    2
  2596 ;; This function calls:
  2597 ;;		___ftpack
  2598 ;; This function is called by:
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text11
  2604  0018AA                     __ptext11:
  2605                           	opt stack 0
  2606  0018AA                     ___lwtoft:
  2607                           	opt stack 28
  2608                           
  2609                           ; BSR set to: 15
  2610                           ;incstack = 0
  2611  0018AA  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
  2612  0018AE  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
  2613  0018B2  6A11               	clrf	___ftpack@arg+2,c
  2614  0018B4  0E8E               	movlw	142
  2615  0018B6  6E12               	movwf	___ftpack@exp,c
  2616  0018B8  0E00               	movlw	0
  2617  0018BA  6E13               	movwf	___ftpack@sign,c
  2618  0018BC  EC56  F009         	call	___ftpack	;wreg free
  2619  0018C0  C00F  F017         	movff	?___ftpack,?___lwtoft
  2620  0018C4  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  2621  0018C8  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  2622  0018CC  0012               	return	
  2623  0018CE                     __end_of___lwtoft:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           prodl	equ	0xFF3
  2628                           intcon	equ	0xFF2
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           status	equ	0xFD8
  2632                           
  2633 ;; *************** function ___fttol *****************
  2634 ;; Defined at:
  2635 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  f1              3   55[COMRAM] float 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  lval            4    1[BANK0 ] unsigned long 
  2640 ;;  exp1            1    5[BANK0 ] unsigned char 
  2641 ;;  sign1           1    0[BANK0 ] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  4   55[COMRAM] long 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2651 ;;      Params:         4       0       0       0       0       0       0
  2652 ;;      Locals:         0       6       0       0       0       0       0
  2653 ;;      Temps:          5       0       0       0       0       0       0
  2654 ;;      Totals:         9       6       0       0       0       0       0
  2655 ;;Total ram usage:       15 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    1
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_main
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text12
  2666  000E34                     __ptext12:
  2667                           	opt stack 0
  2668  000E34                     ___fttol:
  2669                           	opt stack 29
  2670                           
  2671                           ;incstack = 0
  2672  000E34  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  2673  000E38  6A3D               	clrf	(??___fttol+1)& (0+255),c
  2674  000E3A  6A3E               	clrf	(??___fttol+2)& (0+255),c
  2675  000E3C  3439               	rlcf	___fttol@f1+1,w,c
  2676  000E3E  363C               	rlcf	??___fttol& (0+255),f,c
  2677  000E40  E301               	bnc	u2211
  2678  000E42  803D               	bsf	(??___fttol+1)& (0+255),0,c
  2679  000E44                     u2211:
  2680  000E44  503C               	movf	??___fttol,w,c
  2681  000E46  0100               	movlb	0	; () banked
  2682  000E48  6F65               	movwf	___fttol@exp1& (0+255),b
  2683  000E4A  0100               	movlb	0	; () banked
  2684  000E4C  6765               	tstfsz	___fttol@exp1& (0+255),b
  2685  000E4E  D009               	goto	l2427
  2686                           
  2687                           ; BSR set to: 0
  2688  000E50  0E00               	movlw	0
  2689  000E52  6E38               	movwf	?___fttol,c
  2690  000E54  0E00               	movlw	0
  2691  000E56  6E39               	movwf	?___fttol+1,c
  2692  000E58  0E00               	movlw	0
  2693  000E5A  6E3A               	movwf	?___fttol+2,c
  2694  000E5C  0E00               	movlw	0
  2695  000E5E  6E3B               	movwf	?___fttol+3,c
  2696  000E60  0012               	return	
  2697  000E62                     l2427:
  2698                           
  2699                           ; BSR set to: 0
  2700  000E62  0E17               	movlw	23
  2701  000E64  6E3C               	movwf	??___fttol& (0+255),c
  2702  000E66  C038  F03D         	movff	___fttol@f1,??___fttol+1
  2703  000E6A  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  2704  000E6E  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  2705  000E72  283C               	incf	??___fttol,w,c
  2706  000E74  6E40               	movwf	(??___fttol+4)& (0+255),c
  2707  000E76  D004               	goto	u2230
  2708  000E78                     u2235:
  2709  000E78  90D8               	bcf	status,0,c
  2710  000E7A  323F               	rrcf	??___fttol+3,f,c
  2711  000E7C  323E               	rrcf	??___fttol+2,f,c
  2712  000E7E  323D               	rrcf	??___fttol+1,f,c
  2713  000E80                     u2230:
  2714  000E80  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  2715  000E82  D7FA               	goto	u2235
  2716  000E84  503D               	movf	??___fttol+1,w,c
  2717  000E86  0100               	movlb	0	; () banked
  2718  000E88  6F60               	movwf	___fttol@sign1& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721  000E8A  8E39               	bsf	___fttol@f1+1,7,c
  2722                           
  2723                           ; BSR set to: 0
  2724  000E8C  0EFF               	movlw	255
  2725  000E8E  1638               	andwf	___fttol@f1,f,c
  2726  000E90  0EFF               	movlw	255
  2727  000E92  1639               	andwf	___fttol@f1+1,f,c
  2728  000E94  0E00               	movlw	0
  2729  000E96  163A               	andwf	___fttol@f1+2,f,c
  2730                           
  2731                           ; BSR set to: 0
  2732  000E98  5038               	movf	___fttol@f1,w,c
  2733  000E9A  0100               	movlb	0	; () banked
  2734  000E9C  6F61               	movwf	___fttol@lval& (0+255),b
  2735  000E9E  5039               	movf	___fttol@f1+1,w,c
  2736  000EA0  0100               	movlb	0	; () banked
  2737  000EA2  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  2738  000EA4  503A               	movf	___fttol@f1+2,w,c
  2739  000EA6  0100               	movlb	0	; () banked
  2740  000EA8  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  2741  000EAA  0100               	movlb	0	; () banked
  2742  000EAC  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  2743                           
  2744                           ; BSR set to: 0
  2745  000EAE  0E8E               	movlw	142
  2746  000EB0  0100               	movlb	0	; () banked
  2747  000EB2  5F65               	subwf	___fttol@exp1& (0+255),f,b
  2748                           
  2749                           ; BSR set to: 0
  2750  000EB4  0100               	movlb	0	; () banked
  2751  000EB6  AF65               	btfss	___fttol@exp1& (0+255),7,b
  2752  000EB8  D020               	goto	l2449
  2753                           
  2754                           ; BSR set to: 0
  2755  000EBA  0100               	movlb	0	; () banked
  2756  000EBC  5165               	movf	___fttol@exp1& (0+255),w,b
  2757  000EBE  0A80               	xorlw	128
  2758  000EC0  6E3C               	movwf	??___fttol& (0+255),c
  2759  000EC2  0EF1               	movlw	241
  2760  000EC4  0A80               	xorlw	128
  2761  000EC6  5C3C               	subwf	??___fttol,w,c
  2762  000EC8  B0D8               	btfsc	status,0,c
  2763  000ECA  D009               	goto	l2445
  2764                           
  2765                           ; BSR set to: 0
  2766  000ECC  0E00               	movlw	0
  2767  000ECE  6E38               	movwf	?___fttol,c
  2768  000ED0  0E00               	movlw	0
  2769  000ED2  6E39               	movwf	?___fttol+1,c
  2770  000ED4  0E00               	movlw	0
  2771  000ED6  6E3A               	movwf	?___fttol+2,c
  2772  000ED8  0E00               	movlw	0
  2773  000EDA  6E3B               	movwf	?___fttol+3,c
  2774  000EDC  0012               	return	
  2775  000EDE                     l2445:
  2776                           
  2777                           ; BSR set to: 0
  2778  000EDE  0100               	movlb	0	; () banked
  2779  000EE0  90D8               	bcf	status,0,c
  2780  000EE2  0100               	movlb	0	; () banked
  2781  000EE4  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2782  000EE6  0100               	movlb	0	; () banked
  2783  000EE8  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2784  000EEA  0100               	movlb	0	; () banked
  2785  000EEC  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2786  000EEE  0100               	movlb	0	; () banked
  2787  000EF0  3361               	rrcf	___fttol@lval& (0+255),f,b
  2788                           
  2789                           ; BSR set to: 0
  2790  000EF2  0100               	movlb	0	; () banked
  2791  000EF4  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  2792  000EF6  D7F3               	goto	l2445
  2793  000EF8  D01C               	goto	l2459
  2794  000EFA                     l2449:
  2795                           
  2796                           ; BSR set to: 0
  2797  000EFA  0E17               	movlw	23
  2798  000EFC  0100               	movlb	0	; () banked
  2799  000EFE  6565               	cpfsgt	___fttol@exp1& (0+255),b
  2800  000F00  D015               	goto	l2457
  2801                           
  2802                           ; BSR set to: 0
  2803  000F02  0E00               	movlw	0
  2804  000F04  6E38               	movwf	?___fttol,c
  2805  000F06  0E00               	movlw	0
  2806  000F08  6E39               	movwf	?___fttol+1,c
  2807  000F0A  0E00               	movlw	0
  2808  000F0C  6E3A               	movwf	?___fttol+2,c
  2809  000F0E  0E00               	movlw	0
  2810  000F10  6E3B               	movwf	?___fttol+3,c
  2811  000F12  0012               	return	
  2812  000F14                     l2455:
  2813                           
  2814                           ; BSR set to: 0
  2815  000F14  0100               	movlb	0	; () banked
  2816  000F16  90D8               	bcf	status,0,c
  2817  000F18  0100               	movlb	0	; () banked
  2818  000F1A  3761               	rlcf	___fttol@lval& (0+255),f,b
  2819  000F1C  0100               	movlb	0	; () banked
  2820  000F1E  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2821  000F20  0100               	movlb	0	; () banked
  2822  000F22  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2823  000F24  0100               	movlb	0	; () banked
  2824  000F26  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2825  000F28  0100               	movlb	0	; () banked
  2826  000F2A  0765               	decf	___fttol@exp1& (0+255),f,b
  2827  000F2C                     l2457:
  2828                           
  2829                           ; BSR set to: 0
  2830  000F2C  0100               	movlb	0	; () banked
  2831  000F2E  6765               	tstfsz	___fttol@exp1& (0+255),b
  2832  000F30  D7F1               	goto	l2455
  2833  000F32                     l2459:
  2834                           
  2835                           ; BSR set to: 0
  2836  000F32  0100               	movlb	0	; () banked
  2837  000F34  5160               	movf	___fttol@sign1& (0+255),w,b
  2838  000F36  B4D8               	btfsc	status,2,c
  2839  000F38  D00F               	goto	l2463
  2840                           
  2841                           ; BSR set to: 0
  2842  000F3A  0100               	movlb	0	; () banked
  2843  000F3C  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  2844  000F3E  0100               	movlb	0	; () banked
  2845  000F40  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  2846  000F42  0100               	movlb	0	; () banked
  2847  000F44  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  2848  000F46  0100               	movlb	0	; () banked
  2849  000F48  6D61               	negf	___fttol@lval& (0+255),b
  2850  000F4A  0E00               	movlw	0
  2851  000F4C  0100               	movlb	0	; () banked
  2852  000F4E  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2853  000F50  0100               	movlb	0	; () banked
  2854  000F52  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2855  000F54  0100               	movlb	0	; () banked
  2856  000F56  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2857  000F58                     l2463:
  2858                           
  2859                           ; BSR set to: 0
  2860  000F58  C061  F038         	movff	___fttol@lval,?___fttol
  2861  000F5C  C062  F039         	movff	___fttol@lval+1,?___fttol+1
  2862  000F60  C063  F03A         	movff	___fttol@lval+2,?___fttol+2
  2863  000F64  C064  F03B         	movff	___fttol@lval+3,?___fttol+3
  2864  000F68  0012               	return	
  2865  000F6A                     __end_of___fttol:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function ___ftsub *****************
  2876 ;; Defined at:
  2877 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  f1              3   55[COMRAM] float 
  2880 ;;  f2              3   58[COMRAM] float 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;		None
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  3   55[COMRAM] float 
  2885 ;; Registers used:
  2886 ;;		wreg, status,2, status,0, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2892 ;;      Params:         6       0       0       0       0       0       0
  2893 ;;      Locals:         0       0       0       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0
  2895 ;;      Totals:         6       0       0       0       0       0       0
  2896 ;;Total ram usage:        6 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    3
  2899 ;; This function calls:
  2900 ;;		___ftadd
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text13
  2907  0017FE                     __ptext13:
  2908                           	opt stack 0
  2909  0017FE                     ___ftsub:
  2910                           	opt stack 27
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;incstack = 0
  2914  0017FE  0E00               	movlw	0
  2915  001800  1A3B               	xorwf	___ftsub@f2,f,c
  2916  001802  0E00               	movlw	0
  2917  001804  1A3C               	xorwf	___ftsub@f2+1,f,c
  2918  001806  0E80               	movlw	128
  2919  001808  1A3D               	xorwf	___ftsub@f2+2,f,c
  2920  00180A  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  2921  00180E  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  2922  001812  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  2923  001816  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  2924  00181A  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  2925  00181E  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  2926  001822  EC44  F006         	call	___ftadd	;wreg free
  2927  001826  C02C  F038         	movff	?___ftadd,?___ftsub
  2928  00182A  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  2929  00182E  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  2930  001832  0012               	return	
  2931  001834                     __end_of___ftsub:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           prodl	equ	0xFF3
  2936                           intcon	equ	0xFF2
  2937                           postinc0	equ	0xFEE
  2938                           wreg	equ	0xFE8
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function ___ftadd *****************
  2942 ;; Defined at:
  2943 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  f1              3   43[COMRAM] float 
  2946 ;;  f2              3   46[COMRAM] float 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  exp1            1   54[COMRAM] unsigned char 
  2949 ;;  exp2            1   53[COMRAM] unsigned char 
  2950 ;;  sign            1   52[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  3   43[COMRAM] float 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2960 ;;      Params:         6       0       0       0       0       0       0
  2961 ;;      Locals:         3       0       0       0       0       0       0
  2962 ;;      Temps:          3       0       0       0       0       0       0
  2963 ;;      Totals:        12       0       0       0       0       0       0
  2964 ;;Total ram usage:       12 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    2
  2967 ;; This function calls:
  2968 ;;		___ftpack
  2969 ;; This function is called by:
  2970 ;;		_main
  2971 ;;		___ftsub
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text14
  2976  000C88                     __ptext14:
  2977                           	opt stack 0
  2978  000C88                     ___ftadd:
  2979                           	opt stack 27
  2980                           
  2981                           ;incstack = 0
  2982  000C88  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  2983  000C8C  6A33               	clrf	(??___ftadd+1)& (0+255),c
  2984  000C8E  6A34               	clrf	(??___ftadd+2)& (0+255),c
  2985  000C90  342D               	rlcf	___ftadd@f1+1,w,c
  2986  000C92  3632               	rlcf	??___ftadd& (0+255),f,c
  2987  000C94  E301               	bnc	u1271
  2988  000C96  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  2989  000C98                     u1271:
  2990  000C98  5032               	movf	??___ftadd,w,c
  2991  000C9A  6E37               	movwf	___ftadd@exp1,c
  2992  000C9C  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  2993  000CA0  6A33               	clrf	(??___ftadd+1)& (0+255),c
  2994  000CA2  6A34               	clrf	(??___ftadd+2)& (0+255),c
  2995  000CA4  3430               	rlcf	___ftadd@f2+1,w,c
  2996  000CA6  3632               	rlcf	??___ftadd& (0+255),f,c
  2997  000CA8  E301               	bnc	u1281
  2998  000CAA  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  2999  000CAC                     u1281:
  3000  000CAC  5032               	movf	??___ftadd,w,c
  3001  000CAE  6E36               	movwf	___ftadd@exp2,c
  3002  000CB0  5037               	movf	___ftadd@exp1,w,c
  3003  000CB2  B4D8               	btfsc	status,2,c
  3004  000CB4  D00C               	goto	l595
  3005  000CB6  5036               	movf	___ftadd@exp2,w,c
  3006  000CB8  5C37               	subwf	___ftadd@exp1,w,c
  3007  000CBA  B0D8               	btfsc	status,0,c
  3008  000CBC  D00F               	goto	l1735
  3009  000CBE  5037               	movf	___ftadd@exp1,w,c
  3010  000CC0  0800               	sublw	0
  3011  000CC2  2436               	addwf	___ftadd@exp2,w,c
  3012  000CC4  6E32               	movwf	??___ftadd& (0+255),c
  3013  000CC6  0E19               	movlw	25
  3014  000CC8  5C32               	subwf	??___ftadd,w,c
  3015  000CCA  A0D8               	btfss	status,0,c
  3016  000CCC  D007               	goto	l1735
  3017  000CCE                     l595:
  3018  000CCE  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  3019  000CD2  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  3020  000CD6  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  3021  000CDA  0012               	return	
  3022  000CDC                     l1735:
  3023  000CDC  5036               	movf	___ftadd@exp2,w,c
  3024  000CDE  B4D8               	btfsc	status,2,c
  3025  000CE0  D00C               	goto	l599
  3026  000CE2  5037               	movf	___ftadd@exp1,w,c
  3027  000CE4  5C36               	subwf	___ftadd@exp2,w,c
  3028  000CE6  B0D8               	btfsc	status,0,c
  3029  000CE8  D00F               	goto	l1741
  3030  000CEA  5036               	movf	___ftadd@exp2,w,c
  3031  000CEC  0800               	sublw	0
  3032  000CEE  2437               	addwf	___ftadd@exp1,w,c
  3033  000CF0  6E32               	movwf	??___ftadd& (0+255),c
  3034  000CF2  0E19               	movlw	25
  3035  000CF4  5C32               	subwf	??___ftadd,w,c
  3036  000CF6  A0D8               	btfss	status,0,c
  3037  000CF8  D007               	goto	l1741
  3038  000CFA                     l599:
  3039  000CFA  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  3040  000CFE  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  3041  000D02  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  3042  000D06  0012               	return	
  3043  000D08                     l1741:
  3044  000D08  0E06               	movlw	6
  3045  000D0A  6E35               	movwf	___ftadd@sign,c
  3046  000D0C  BE2E               	btfsc	___ftadd@f1+2,7,c
  3047  000D0E  8E35               	bsf	___ftadd@sign,7,c
  3048  000D10  BE31               	btfsc	___ftadd@f2+2,7,c
  3049  000D12  8C35               	bsf	___ftadd@sign,6,c
  3050  000D14  8E2D               	bsf	___ftadd@f1+1,7,c
  3051  000D16  0EFF               	movlw	255
  3052  000D18  162C               	andwf	___ftadd@f1,f,c
  3053  000D1A  0EFF               	movlw	255
  3054  000D1C  162D               	andwf	___ftadd@f1+1,f,c
  3055  000D1E  0E00               	movlw	0
  3056  000D20  162E               	andwf	___ftadd@f1+2,f,c
  3057  000D22  8E30               	bsf	___ftadd@f2+1,7,c
  3058  000D24  0EFF               	movlw	255
  3059  000D26  162F               	andwf	___ftadd@f2,f,c
  3060  000D28  0EFF               	movlw	255
  3061  000D2A  1630               	andwf	___ftadd@f2+1,f,c
  3062  000D2C  0E00               	movlw	0
  3063  000D2E  1631               	andwf	___ftadd@f2+2,f,c
  3064  000D30  5036               	movf	___ftadd@exp2,w,c
  3065  000D32  5C37               	subwf	___ftadd@exp1,w,c
  3066  000D34  B0D8               	btfsc	status,0,c
  3067  000D36  D01A               	goto	l1767
  3068  000D38                     l1757:
  3069  000D38  90D8               	bcf	status,0,c
  3070  000D3A  362F               	rlcf	___ftadd@f2,f,c
  3071  000D3C  3630               	rlcf	___ftadd@f2+1,f,c
  3072  000D3E  3631               	rlcf	___ftadd@f2+2,f,c
  3073  000D40  0636               	decf	___ftadd@exp2,f,c
  3074  000D42  5036               	movf	___ftadd@exp2,w,c
  3075  000D44  1837               	xorwf	___ftadd@exp1,w,c
  3076  000D46  B4D8               	btfsc	status,2,c
  3077  000D48  D00D               	goto	l1765
  3078  000D4A  0635               	decf	___ftadd@sign,f,c
  3079  000D4C  C035  F032         	movff	___ftadd@sign,??___ftadd
  3080  000D50  0E07               	movlw	7
  3081  000D52  1632               	andwf	??___ftadd,f,c
  3082  000D54  B4D8               	btfsc	status,2,c
  3083  000D56  D006               	goto	l1765
  3084  000D58  D7EF               	goto	l1757
  3085  000D5A                     l1763:
  3086  000D5A  90D8               	bcf	status,0,c
  3087  000D5C  322E               	rrcf	___ftadd@f1+2,f,c
  3088  000D5E  322D               	rrcf	___ftadd@f1+1,f,c
  3089  000D60  322C               	rrcf	___ftadd@f1,f,c
  3090  000D62  2A37               	incf	___ftadd@exp1,f,c
  3091  000D64                     l1765:
  3092  000D64  5036               	movf	___ftadd@exp2,w,c
  3093  000D66  6237               	cpfseq	___ftadd@exp1,c
  3094  000D68  D7F8               	goto	l1763
  3095  000D6A  D01D               	goto	l610
  3096  000D6C                     l1767:
  3097  000D6C  5037               	movf	___ftadd@exp1,w,c
  3098  000D6E  5C36               	subwf	___ftadd@exp2,w,c
  3099  000D70  B0D8               	btfsc	status,0,c
  3100  000D72  D019               	goto	l610
  3101  000D74                     l1769:
  3102  000D74  90D8               	bcf	status,0,c
  3103  000D76  362C               	rlcf	___ftadd@f1,f,c
  3104  000D78  362D               	rlcf	___ftadd@f1+1,f,c
  3105  000D7A  362E               	rlcf	___ftadd@f1+2,f,c
  3106  000D7C  0637               	decf	___ftadd@exp1,f,c
  3107  000D7E  5036               	movf	___ftadd@exp2,w,c
  3108  000D80  1837               	xorwf	___ftadd@exp1,w,c
  3109  000D82  B4D8               	btfsc	status,2,c
  3110  000D84  D00D               	goto	l1777
  3111  000D86  0635               	decf	___ftadd@sign,f,c
  3112  000D88  C035  F032         	movff	___ftadd@sign,??___ftadd
  3113  000D8C  0E07               	movlw	7
  3114  000D8E  1632               	andwf	??___ftadd,f,c
  3115  000D90  B4D8               	btfsc	status,2,c
  3116  000D92  D006               	goto	l1777
  3117  000D94  D7EF               	goto	l1769
  3118  000D96                     l1775:
  3119  000D96  90D8               	bcf	status,0,c
  3120  000D98  3231               	rrcf	___ftadd@f2+2,f,c
  3121  000D9A  3230               	rrcf	___ftadd@f2+1,f,c
  3122  000D9C  322F               	rrcf	___ftadd@f2,f,c
  3123  000D9E  2A36               	incf	___ftadd@exp2,f,c
  3124  000DA0                     l1777:
  3125  000DA0  5036               	movf	___ftadd@exp2,w,c
  3126  000DA2  6237               	cpfseq	___ftadd@exp1,c
  3127  000DA4  D7F8               	goto	l1775
  3128  000DA6                     l610:
  3129  000DA6  AE35               	btfss	___ftadd@sign,7,c
  3130  000DA8  D00C               	goto	l619
  3131  000DAA  0EFF               	movlw	255
  3132  000DAC  1A2C               	xorwf	___ftadd@f1,f,c
  3133  000DAE  0EFF               	movlw	255
  3134  000DB0  1A2D               	xorwf	___ftadd@f1+1,f,c
  3135  000DB2  0EFF               	movlw	255
  3136  000DB4  1A2E               	xorwf	___ftadd@f1+2,f,c
  3137  000DB6  0E01               	movlw	1
  3138  000DB8  262C               	addwf	___ftadd@f1,f,c
  3139  000DBA  0E00               	movlw	0
  3140  000DBC  222D               	addwfc	___ftadd@f1+1,f,c
  3141  000DBE  0E00               	movlw	0
  3142  000DC0  222E               	addwfc	___ftadd@f1+2,f,c
  3143  000DC2                     l619:
  3144  000DC2  AC35               	btfss	___ftadd@sign,6,c
  3145  000DC4  D00C               	goto	l1783
  3146  000DC6  0EFF               	movlw	255
  3147  000DC8  1A2F               	xorwf	___ftadd@f2,f,c
  3148  000DCA  0EFF               	movlw	255
  3149  000DCC  1A30               	xorwf	___ftadd@f2+1,f,c
  3150  000DCE  0EFF               	movlw	255
  3151  000DD0  1A31               	xorwf	___ftadd@f2+2,f,c
  3152  000DD2  0E01               	movlw	1
  3153  000DD4  262F               	addwf	___ftadd@f2,f,c
  3154  000DD6  0E00               	movlw	0
  3155  000DD8  2230               	addwfc	___ftadd@f2+1,f,c
  3156  000DDA  0E00               	movlw	0
  3157  000DDC  2231               	addwfc	___ftadd@f2+2,f,c
  3158  000DDE                     l1783:
  3159  000DDE  0E00               	movlw	0
  3160  000DE0  6E35               	movwf	___ftadd@sign,c
  3161  000DE2  502C               	movf	___ftadd@f1,w,c
  3162  000DE4  262F               	addwf	___ftadd@f2,f,c
  3163  000DE6  502D               	movf	___ftadd@f1+1,w,c
  3164  000DE8  2230               	addwfc	___ftadd@f2+1,f,c
  3165  000DEA  502E               	movf	___ftadd@f1+2,w,c
  3166  000DEC  2231               	addwfc	___ftadd@f2+2,f,c
  3167  000DEE  AE31               	btfss	___ftadd@f2+2,7,c
  3168  000DF0  D00E               	goto	l1793
  3169  000DF2  0EFF               	movlw	255
  3170  000DF4  1A2F               	xorwf	___ftadd@f2,f,c
  3171  000DF6  0EFF               	movlw	255
  3172  000DF8  1A30               	xorwf	___ftadd@f2+1,f,c
  3173  000DFA  0EFF               	movlw	255
  3174  000DFC  1A31               	xorwf	___ftadd@f2+2,f,c
  3175  000DFE  0E01               	movlw	1
  3176  000E00  262F               	addwf	___ftadd@f2,f,c
  3177  000E02  0E00               	movlw	0
  3178  000E04  2230               	addwfc	___ftadd@f2+1,f,c
  3179  000E06  0E00               	movlw	0
  3180  000E08  2231               	addwfc	___ftadd@f2+2,f,c
  3181  000E0A  0E01               	movlw	1
  3182  000E0C  6E35               	movwf	___ftadd@sign,c
  3183  000E0E                     l1793:
  3184  000E0E  C02F  F00F         	movff	___ftadd@f2,___ftpack@arg
  3185  000E12  C030  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  3186  000E16  C031  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  3187  000E1A  C037  F012         	movff	___ftadd@exp1,___ftpack@exp
  3188  000E1E  C035  F013         	movff	___ftadd@sign,___ftpack@sign
  3189  000E22  EC56  F009         	call	___ftpack	;wreg free
  3190  000E26  C00F  F02C         	movff	?___ftpack,?___ftadd
  3191  000E2A  C010  F02D         	movff	?___ftpack+1,?___ftadd+1
  3192  000E2E  C011  F02E         	movff	?___ftpack+2,?___ftadd+2
  3193  000E32  0012               	return	
  3194  000E34                     __end_of___ftadd:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           status	equ	0xFD8
  3203                           
  3204 ;; *************** function ___ftneg *****************
  3205 ;; Defined at:
  3206 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  f1              3   40[COMRAM] float 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  3   40[COMRAM] float 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3220 ;;      Params:         3       0       0       0       0       0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0
  3223 ;;      Totals:         3       0       0       0       0       0       0
  3224 ;;Total ram usage:        3 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    1
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_main
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text15
  3235  001884                     __ptext15:
  3236                           	opt stack 0
  3237  001884                     ___ftneg:
  3238                           	opt stack 29
  3239                           
  3240                           ;incstack = 0
  3241  001884  0E7F               	movlw	127
  3242  001886  142B               	andwf	___ftneg@f1+2,w,c
  3243  001888  102A               	iorwf	___ftneg@f1+1,w,c
  3244  00188A  1029               	iorwf	___ftneg@f1,w,c
  3245  00188C  B4D8               	btfsc	status,2,c
  3246  00188E  D006               	goto	l652
  3247  001890  0E00               	movlw	0
  3248  001892  1A29               	xorwf	___ftneg@f1,f,c
  3249  001894  0E00               	movlw	0
  3250  001896  1A2A               	xorwf	___ftneg@f1+1,f,c
  3251  001898  0E80               	movlw	128
  3252  00189A  1A2B               	xorwf	___ftneg@f1+2,f,c
  3253  00189C                     l652:
  3254  00189C  C029  F029         	movff	___ftneg@f1,?___ftneg
  3255  0018A0  C02A  F02A         	movff	___ftneg@f1+1,?___ftneg+1
  3256  0018A4  C02B  F02B         	movff	___ftneg@f1+2,?___ftneg+2
  3257  0018A8  0012               	return	
  3258  0018AA                     __end_of___ftneg:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function ___ftmul *****************
  3269 ;; Defined at:
  3270 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  f1              3   25[COMRAM] float 
  3273 ;;  f2              3   28[COMRAM] float 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  f3_as_produc    3   35[COMRAM] unsigned um
  3276 ;;  sign            1   39[COMRAM] unsigned char 
  3277 ;;  cntr            1   38[COMRAM] unsigned char 
  3278 ;;  exp             1   34[COMRAM] unsigned char 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  3   25[COMRAM] float 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3288 ;;      Params:         6       0       0       0       0       0       0
  3289 ;;      Locals:         6       0       0       0       0       0       0
  3290 ;;      Temps:          3       0       0       0       0       0       0
  3291 ;;      Totals:        15       0       0       0       0       0       0
  3292 ;;Total ram usage:       15 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    2
  3295 ;; This function calls:
  3296 ;;		___ftpack
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text16
  3303  000F6A                     __ptext16:
  3304                           	opt stack 0
  3305  000F6A                     ___ftmul:
  3306                           	opt stack 28
  3307                           
  3308                           ;incstack = 0
  3309  000F6A  C01C  F020         	movff	___ftmul@f1+2,??___ftmul
  3310  000F6E  6A21               	clrf	(??___ftmul+1)& (0+255),c
  3311  000F70  6A22               	clrf	(??___ftmul+2)& (0+255),c
  3312  000F72  341B               	rlcf	___ftmul@f1+1,w,c
  3313  000F74  3620               	rlcf	??___ftmul& (0+255),f,c
  3314  000F76  E301               	bnc	u1751
  3315  000F78  8021               	bsf	(??___ftmul+1)& (0+255),0,c
  3316  000F7A                     u1751:
  3317  000F7A  5020               	movf	??___ftmul,w,c
  3318  000F7C  6E23               	movwf	___ftmul@exp,c
  3319  000F7E  6623               	tstfsz	___ftmul@exp& (0+255),c
  3320  000F80  D007               	goto	l2147
  3321  000F82  0E00               	movlw	0
  3322  000F84  6E1A               	movwf	?___ftmul,c
  3323  000F86  0E00               	movlw	0
  3324  000F88  6E1B               	movwf	?___ftmul+1,c
  3325  000F8A  0E00               	movlw	0
  3326  000F8C  6E1C               	movwf	?___ftmul+2,c
  3327  000F8E  0012               	return	
  3328  000F90                     l2147:
  3329  000F90  C01F  F020         	movff	___ftmul@f2+2,??___ftmul
  3330  000F94  6A21               	clrf	(??___ftmul+1)& (0+255),c
  3331  000F96  6A22               	clrf	(??___ftmul+2)& (0+255),c
  3332  000F98  341E               	rlcf	___ftmul@f2+1,w,c
  3333  000F9A  3620               	rlcf	??___ftmul& (0+255),f,c
  3334  000F9C  E301               	bnc	u1771
  3335  000F9E  8021               	bsf	(??___ftmul+1)& (0+255),0,c
  3336  000FA0                     u1771:
  3337  000FA0  5020               	movf	??___ftmul,w,c
  3338  000FA2  6E28               	movwf	___ftmul@sign,c
  3339  000FA4  6628               	tstfsz	___ftmul@sign& (0+255),c
  3340  000FA6  D007               	goto	l2153
  3341  000FA8  0E00               	movlw	0
  3342  000FAA  6E1A               	movwf	?___ftmul,c
  3343  000FAC  0E00               	movlw	0
  3344  000FAE  6E1B               	movwf	?___ftmul+1,c
  3345  000FB0  0E00               	movlw	0
  3346  000FB2  6E1C               	movwf	?___ftmul+2,c
  3347  000FB4  0012               	return	
  3348  000FB6                     l2153:
  3349  000FB6  5028               	movf	___ftmul@sign,w,c
  3350  000FB8  0F7B               	addlw	123
  3351  000FBA  2623               	addwf	___ftmul@exp,f,c
  3352  000FBC  C01C  F028         	movff	___ftmul@f1+2,___ftmul@sign
  3353  000FC0  501F               	movf	___ftmul@f2+2,w,c
  3354  000FC2  1A28               	xorwf	___ftmul@sign,f,c
  3355  000FC4  0E80               	movlw	128
  3356  000FC6  1628               	andwf	___ftmul@sign,f,c
  3357  000FC8  8E1B               	bsf	___ftmul@f1+1,7,c
  3358  000FCA  8E1E               	bsf	___ftmul@f2+1,7,c
  3359  000FCC  0EFF               	movlw	255
  3360  000FCE  161D               	andwf	___ftmul@f2,f,c
  3361  000FD0  0EFF               	movlw	255
  3362  000FD2  161E               	andwf	___ftmul@f2+1,f,c
  3363  000FD4  0E00               	movlw	0
  3364  000FD6  161F               	andwf	___ftmul@f2+2,f,c
  3365  000FD8  0E00               	movlw	0
  3366  000FDA  6E24               	movwf	___ftmul@f3_as_product,c
  3367  000FDC  0E00               	movlw	0
  3368  000FDE  6E25               	movwf	___ftmul@f3_as_product+1,c
  3369  000FE0  0E00               	movlw	0
  3370  000FE2  6E26               	movwf	___ftmul@f3_as_product+2,c
  3371  000FE4  0E07               	movlw	7
  3372  000FE6  6E27               	movwf	___ftmul@cntr,c
  3373  000FE8                     l2167:
  3374  000FE8  A01A               	btfss	___ftmul@f1,0,c
  3375  000FEA  D006               	goto	l2171
  3376  000FEC  501D               	movf	___ftmul@f2,w,c
  3377  000FEE  2624               	addwf	___ftmul@f3_as_product,f,c
  3378  000FF0  501E               	movf	___ftmul@f2+1,w,c
  3379  000FF2  2225               	addwfc	___ftmul@f3_as_product+1,f,c
  3380  000FF4  501F               	movf	___ftmul@f2+2,w,c
  3381  000FF6  2226               	addwfc	___ftmul@f3_as_product+2,f,c
  3382  000FF8                     l2171:
  3383  000FF8  90D8               	bcf	status,0,c
  3384  000FFA  321C               	rrcf	___ftmul@f1+2,f,c
  3385  000FFC  321B               	rrcf	___ftmul@f1+1,f,c
  3386  000FFE  321A               	rrcf	___ftmul@f1,f,c
  3387  001000  90D8               	bcf	status,0,c
  3388  001002  361D               	rlcf	___ftmul@f2,f,c
  3389  001004  361E               	rlcf	___ftmul@f2+1,f,c
  3390  001006  361F               	rlcf	___ftmul@f2+2,f,c
  3391  001008  2E27               	decfsz	___ftmul@cntr,f,c
  3392  00100A  D7EE               	goto	l2167
  3393  00100C  0E09               	movlw	9
  3394  00100E  6E27               	movwf	___ftmul@cntr,c
  3395  001010                     l2177:
  3396  001010  A01A               	btfss	___ftmul@f1,0,c
  3397  001012  D006               	goto	l2181
  3398  001014  501D               	movf	___ftmul@f2,w,c
  3399  001016  2624               	addwf	___ftmul@f3_as_product,f,c
  3400  001018  501E               	movf	___ftmul@f2+1,w,c
  3401  00101A  2225               	addwfc	___ftmul@f3_as_product+1,f,c
  3402  00101C  501F               	movf	___ftmul@f2+2,w,c
  3403  00101E  2226               	addwfc	___ftmul@f3_as_product+2,f,c
  3404  001020                     l2181:
  3405  001020  90D8               	bcf	status,0,c
  3406  001022  321C               	rrcf	___ftmul@f1+2,f,c
  3407  001024  321B               	rrcf	___ftmul@f1+1,f,c
  3408  001026  321A               	rrcf	___ftmul@f1,f,c
  3409  001028  90D8               	bcf	status,0,c
  3410  00102A  3226               	rrcf	___ftmul@f3_as_product+2,f,c
  3411  00102C  3225               	rrcf	___ftmul@f3_as_product+1,f,c
  3412  00102E  3224               	rrcf	___ftmul@f3_as_product,f,c
  3413  001030  2E27               	decfsz	___ftmul@cntr,f,c
  3414  001032  D7EE               	goto	l2177
  3415  001034  C024  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  3416  001038  C025  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3417  00103C  C026  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3418  001040  C023  F012         	movff	___ftmul@exp,___ftpack@exp
  3419  001044  C028  F013         	movff	___ftmul@sign,___ftpack@sign
  3420  001048  EC56  F009         	call	___ftpack	;wreg free
  3421  00104C  C00F  F01A         	movff	?___ftpack,?___ftmul
  3422  001050  C010  F01B         	movff	?___ftpack+1,?___ftmul+1
  3423  001054  C011  F01C         	movff	?___ftpack+2,?___ftmul+2
  3424  001058  0012               	return	
  3425  00105A                     __end_of___ftmul:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           prodl	equ	0xFF3
  3430                           intcon	equ	0xFF2
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function ___ftge *****************
  3436 ;; Defined at:
  3437 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  ff1             3   14[COMRAM] float 
  3440 ;;  ff2             3   17[COMRAM] float 
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;		None
  3443 ;; Return value:  Size  Location     Type
  3444 ;;		None               void
  3445 ;; Registers used:
  3446 ;;		wreg, status,2, status,0
  3447 ;; Tracked objects:
  3448 ;;		On entry : 0/0
  3449 ;;		On exit  : 0/0
  3450 ;;		Unchanged: 0/0
  3451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3452 ;;      Params:         6       0       0       0       0       0       0
  3453 ;;      Locals:         0       0       0       0       0       0       0
  3454 ;;      Temps:          3       0       0       0       0       0       0
  3455 ;;      Totals:         9       0       0       0       0       0       0
  3456 ;;Total ram usage:        9 bytes
  3457 ;; Hardware stack levels used:    1
  3458 ;; Hardware stack levels required when called:    1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_main
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text17
  3467  001488                     __ptext17:
  3468                           	opt stack 0
  3469  001488                     ___ftge:
  3470                           	opt stack 29
  3471                           
  3472                           ;incstack = 0
  3473  001488  AE11               	btfss	___ftge@ff1+2,7,c
  3474  00148A  D016               	goto	l2199
  3475  00148C  C00F  F015         	movff	___ftge@ff1,??___ftge
  3476  001490  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  3477  001494  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  3478  001498  1E15               	comf	??___ftge,f,c
  3479  00149A  1E16               	comf	??___ftge+1,f,c
  3480  00149C  1E17               	comf	??___ftge+2,f,c
  3481  00149E  2A15               	incf	??___ftge,f,c
  3482  0014A0  0E00               	movlw	0
  3483  0014A2  2216               	addwfc	??___ftge+1,f,c
  3484  0014A4  2217               	addwfc	??___ftge+2,f,c
  3485  0014A6  0E00               	movlw	0
  3486  0014A8  2415               	addwf	??___ftge,w,c
  3487  0014AA  6E0F               	movwf	___ftge@ff1,c
  3488  0014AC  0E00               	movlw	0
  3489  0014AE  2016               	addwfc	??___ftge+1,w,c
  3490  0014B0  6E10               	movwf	___ftge@ff1+1,c
  3491  0014B2  0E80               	movlw	128
  3492  0014B4  2017               	addwfc	??___ftge+2,w,c
  3493  0014B6  6E11               	movwf	___ftge@ff1+2,c
  3494  0014B8                     l2199:
  3495  0014B8  AE14               	btfss	___ftge@ff2+2,7,c
  3496  0014BA  D016               	goto	l2203
  3497  0014BC  C012  F015         	movff	___ftge@ff2,??___ftge
  3498  0014C0  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  3499  0014C4  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  3500  0014C8  1E15               	comf	??___ftge,f,c
  3501  0014CA  1E16               	comf	??___ftge+1,f,c
  3502  0014CC  1E17               	comf	??___ftge+2,f,c
  3503  0014CE  2A15               	incf	??___ftge,f,c
  3504  0014D0  0E00               	movlw	0
  3505  0014D2  2216               	addwfc	??___ftge+1,f,c
  3506  0014D4  2217               	addwfc	??___ftge+2,f,c
  3507  0014D6  0E00               	movlw	0
  3508  0014D8  2415               	addwf	??___ftge,w,c
  3509  0014DA  6E12               	movwf	___ftge@ff2,c
  3510  0014DC  0E00               	movlw	0
  3511  0014DE  2016               	addwfc	??___ftge+1,w,c
  3512  0014E0  6E13               	movwf	___ftge@ff2+1,c
  3513  0014E2  0E80               	movlw	128
  3514  0014E4  2017               	addwfc	??___ftge+2,w,c
  3515  0014E6  6E14               	movwf	___ftge@ff2+2,c
  3516  0014E8                     l2203:
  3517  0014E8  0E00               	movlw	0
  3518  0014EA  1A0F               	xorwf	___ftge@ff1,f,c
  3519  0014EC  0E00               	movlw	0
  3520  0014EE  1A10               	xorwf	___ftge@ff1+1,f,c
  3521  0014F0  0E80               	movlw	128
  3522  0014F2  1A11               	xorwf	___ftge@ff1+2,f,c
  3523  0014F4  0E00               	movlw	0
  3524  0014F6  1A12               	xorwf	___ftge@ff2,f,c
  3525  0014F8  0E00               	movlw	0
  3526  0014FA  1A13               	xorwf	___ftge@ff2+1,f,c
  3527  0014FC  0E80               	movlw	128
  3528  0014FE  1A14               	xorwf	___ftge@ff2+2,f,c
  3529  001500  5012               	movf	___ftge@ff2,w,c
  3530  001502  5C0F               	subwf	___ftge@ff1,w,c
  3531  001504  5013               	movf	___ftge@ff2+1,w,c
  3532  001506  5810               	subwfb	___ftge@ff1+1,w,c
  3533  001508  5014               	movf	___ftge@ff2+2,w,c
  3534  00150A  5811               	subwfb	___ftge@ff1+2,w,c
  3535  00150C  B0D8               	btfsc	status,0,c
  3536  00150E  D002               	goto	l2209
  3537  001510  90D8               	bcf	status,0,c
  3538  001512  0012               	return	
  3539  001514                     l2209:
  3540  001514  80D8               	bsf	status,0,c
  3541  001516  0012               	return	
  3542  001518                     __end_of___ftge:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           prodl	equ	0xFF3
  3547                           intcon	equ	0xFF2
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function ___ftdiv *****************
  3553 ;; Defined at:
  3554 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  f1              3   40[COMRAM] float 
  3557 ;;  f2              3   43[COMRAM] float 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  f3              3   50[COMRAM] float 
  3560 ;;  sign            1   54[COMRAM] unsigned char 
  3561 ;;  exp             1   53[COMRAM] unsigned char 
  3562 ;;  cntr            1   49[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  3   40[COMRAM] float 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         6       0       0       0       0       0       0
  3573 ;;      Locals:         6       0       0       0       0       0       0
  3574 ;;      Temps:          3       0       0       0       0       0       0
  3575 ;;      Totals:        15       0       0       0       0       0       0
  3576 ;;Total ram usage:       15 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    2
  3579 ;; This function calls:
  3580 ;;		___ftpack
  3581 ;; This function is called by:
  3582 ;;		_main
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text18
  3587  00105A                     __ptext18:
  3588                           	opt stack 0
  3589  00105A                     ___ftdiv:
  3590                           	opt stack 28
  3591                           
  3592                           ;incstack = 0
  3593  00105A  C02B  F02F         	movff	___ftdiv@f1+2,??___ftdiv
  3594  00105E  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  3595  001060  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  3596  001062  342A               	rlcf	___ftdiv@f1+1,w,c
  3597  001064  362F               	rlcf	??___ftdiv& (0+255),f,c
  3598  001066  E301               	bnc	u1701
  3599  001068  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  3600  00106A                     u1701:
  3601  00106A  502F               	movf	??___ftdiv,w,c
  3602  00106C  6E36               	movwf	___ftdiv@exp,c
  3603  00106E  6636               	tstfsz	___ftdiv@exp& (0+255),c
  3604  001070  D007               	goto	l2101
  3605  001072  0E00               	movlw	0
  3606  001074  6E29               	movwf	?___ftdiv,c
  3607  001076  0E00               	movlw	0
  3608  001078  6E2A               	movwf	?___ftdiv+1,c
  3609  00107A  0E00               	movlw	0
  3610  00107C  6E2B               	movwf	?___ftdiv+2,c
  3611  00107E  0012               	return	
  3612  001080                     l2101:
  3613  001080  C02E  F02F         	movff	___ftdiv@f2+2,??___ftdiv
  3614  001084  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  3615  001086  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  3616  001088  342D               	rlcf	___ftdiv@f2+1,w,c
  3617  00108A  362F               	rlcf	??___ftdiv& (0+255),f,c
  3618  00108C  E301               	bnc	u1721
  3619  00108E  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  3620  001090                     u1721:
  3621  001090  502F               	movf	??___ftdiv,w,c
  3622  001092  6E37               	movwf	___ftdiv@sign,c
  3623  001094  6637               	tstfsz	___ftdiv@sign& (0+255),c
  3624  001096  D007               	goto	l2107
  3625  001098  0E00               	movlw	0
  3626  00109A  6E29               	movwf	?___ftdiv,c
  3627  00109C  0E00               	movlw	0
  3628  00109E  6E2A               	movwf	?___ftdiv+1,c
  3629  0010A0  0E00               	movlw	0
  3630  0010A2  6E2B               	movwf	?___ftdiv+2,c
  3631  0010A4  0012               	return	
  3632  0010A6                     l2107:
  3633  0010A6  0E00               	movlw	0
  3634  0010A8  6E33               	movwf	___ftdiv@f3,c
  3635  0010AA  0E00               	movlw	0
  3636  0010AC  6E34               	movwf	___ftdiv@f3+1,c
  3637  0010AE  0E00               	movlw	0
  3638  0010B0  6E35               	movwf	___ftdiv@f3+2,c
  3639  0010B2  5037               	movf	___ftdiv@sign,w,c
  3640  0010B4  0F89               	addlw	137
  3641  0010B6  5E36               	subwf	___ftdiv@exp,f,c
  3642  0010B8  C02B  F037         	movff	___ftdiv@f1+2,___ftdiv@sign
  3643  0010BC  502E               	movf	___ftdiv@f2+2,w,c
  3644  0010BE  1A37               	xorwf	___ftdiv@sign,f,c
  3645  0010C0  0E80               	movlw	128
  3646  0010C2  1637               	andwf	___ftdiv@sign,f,c
  3647  0010C4  8E2A               	bsf	___ftdiv@f1+1,7,c
  3648  0010C6  0EFF               	movlw	255
  3649  0010C8  1629               	andwf	___ftdiv@f1,f,c
  3650  0010CA  0EFF               	movlw	255
  3651  0010CC  162A               	andwf	___ftdiv@f1+1,f,c
  3652  0010CE  0E00               	movlw	0
  3653  0010D0  162B               	andwf	___ftdiv@f1+2,f,c
  3654  0010D2  8E2D               	bsf	___ftdiv@f2+1,7,c
  3655  0010D4  0EFF               	movlw	255
  3656  0010D6  162C               	andwf	___ftdiv@f2,f,c
  3657  0010D8  0EFF               	movlw	255
  3658  0010DA  162D               	andwf	___ftdiv@f2+1,f,c
  3659  0010DC  0E00               	movlw	0
  3660  0010DE  162E               	andwf	___ftdiv@f2+2,f,c
  3661  0010E0  0E18               	movlw	24
  3662  0010E2  6E32               	movwf	___ftdiv@cntr,c
  3663  0010E4                     l2127:
  3664  0010E4  90D8               	bcf	status,0,c
  3665  0010E6  3633               	rlcf	___ftdiv@f3,f,c
  3666  0010E8  3634               	rlcf	___ftdiv@f3+1,f,c
  3667  0010EA  3635               	rlcf	___ftdiv@f3+2,f,c
  3668  0010EC  502C               	movf	___ftdiv@f2,w,c
  3669  0010EE  5C29               	subwf	___ftdiv@f1,w,c
  3670  0010F0  502D               	movf	___ftdiv@f2+1,w,c
  3671  0010F2  582A               	subwfb	___ftdiv@f1+1,w,c
  3672  0010F4  502E               	movf	___ftdiv@f2+2,w,c
  3673  0010F6  582B               	subwfb	___ftdiv@f1+2,w,c
  3674  0010F8  A0D8               	btfss	status,0,c
  3675  0010FA  D007               	goto	l630
  3676  0010FC  502C               	movf	___ftdiv@f2,w,c
  3677  0010FE  5E29               	subwf	___ftdiv@f1,f,c
  3678  001100  502D               	movf	___ftdiv@f2+1,w,c
  3679  001102  5A2A               	subwfb	___ftdiv@f1+1,f,c
  3680  001104  502E               	movf	___ftdiv@f2+2,w,c
  3681  001106  5A2B               	subwfb	___ftdiv@f1+2,f,c
  3682  001108  8033               	bsf	___ftdiv@f3,0,c
  3683  00110A                     l630:
  3684  00110A  90D8               	bcf	status,0,c
  3685  00110C  3629               	rlcf	___ftdiv@f1,f,c
  3686  00110E  362A               	rlcf	___ftdiv@f1+1,f,c
  3687  001110  362B               	rlcf	___ftdiv@f1+2,f,c
  3688  001112  2E32               	decfsz	___ftdiv@cntr,f,c
  3689  001114  D7E7               	goto	l2127
  3690  001116  C033  F00F         	movff	___ftdiv@f3,___ftpack@arg
  3691  00111A  C034  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3692  00111E  C035  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3693  001122  C036  F012         	movff	___ftdiv@exp,___ftpack@exp
  3694  001126  C037  F013         	movff	___ftdiv@sign,___ftpack@sign
  3695  00112A  EC56  F009         	call	___ftpack	;wreg free
  3696  00112E  C00F  F029         	movff	?___ftpack,?___ftdiv
  3697  001132  C010  F02A         	movff	?___ftpack+1,?___ftdiv+1
  3698  001136  C011  F02B         	movff	?___ftpack+2,?___ftdiv+2
  3699  00113A  0012               	return	
  3700  00113C                     __end_of___ftdiv:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           prodl	equ	0xFF3
  3705                           intcon	equ	0xFF2
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function ___ftpack *****************
  3711 ;; Defined at:
  3712 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;  arg             3   14[COMRAM] unsigned um
  3715 ;;  exp             1   17[COMRAM] unsigned char 
  3716 ;;  sign            1   18[COMRAM] unsigned char 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;		None
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  3   14[COMRAM] float 
  3721 ;; Registers used:
  3722 ;;		wreg, status,2, status,0
  3723 ;; Tracked objects:
  3724 ;;		On entry : 0/0
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3728 ;;      Params:         5       0       0       0       0       0       0
  3729 ;;      Locals:         0       0       0       0       0       0       0
  3730 ;;      Temps:          3       0       0       0       0       0       0
  3731 ;;      Totals:         8       0       0       0       0       0       0
  3732 ;;Total ram usage:        8 bytes
  3733 ;; Hardware stack levels used:    1
  3734 ;; Hardware stack levels required when called:    1
  3735 ;; This function calls:
  3736 ;;		Nothing
  3737 ;; This function is called by:
  3738 ;;		___ftadd
  3739 ;;		___ftdiv
  3740 ;;		___ftmul
  3741 ;;		___lwtoft
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           	psect	text19
  3746  0012AC                     __ptext19:
  3747                           	opt stack 0
  3748  0012AC                     ___ftpack:
  3749                           	opt stack 28
  3750                           
  3751                           ;incstack = 0
  3752  0012AC  5012               	movf	___ftpack@exp,w,c
  3753  0012AE  B4D8               	btfsc	status,2,c
  3754  0012B0  D005               	goto	l1669
  3755  0012B2  500F               	movf	___ftpack@arg,w,c
  3756  0012B4  1010               	iorwf	___ftpack@arg+1,w,c
  3757  0012B6  1011               	iorwf	___ftpack@arg+2,w,c
  3758  0012B8  A4D8               	btfss	status,2,c
  3759  0012BA  D00C               	goto	l1675
  3760  0012BC                     l1669:
  3761  0012BC  0E00               	movlw	0
  3762  0012BE  6E0F               	movwf	?___ftpack,c
  3763  0012C0  0E00               	movlw	0
  3764  0012C2  6E10               	movwf	?___ftpack+1,c
  3765  0012C4  0E00               	movlw	0
  3766  0012C6  6E11               	movwf	?___ftpack+2,c
  3767  0012C8  0012               	return	
  3768  0012CA                     l1673:
  3769  0012CA  2A12               	incf	___ftpack@exp,f,c
  3770  0012CC  90D8               	bcf	status,0,c
  3771  0012CE  3211               	rrcf	___ftpack@arg+2,f,c
  3772  0012D0  3210               	rrcf	___ftpack@arg+1,f,c
  3773  0012D2  320F               	rrcf	___ftpack@arg,f,c
  3774  0012D4                     l1675:
  3775  0012D4  0E00               	movlw	0
  3776  0012D6  140F               	andwf	___ftpack@arg,w,c
  3777  0012D8  6E14               	movwf	??___ftpack& (0+255),c
  3778  0012DA  0E00               	movlw	0
  3779  0012DC  1410               	andwf	___ftpack@arg+1,w,c
  3780  0012DE  6E15               	movwf	(??___ftpack+1)& (0+255),c
  3781  0012E0  0EFE               	movlw	254
  3782  0012E2  1411               	andwf	___ftpack@arg+2,w,c
  3783  0012E4  6E16               	movwf	(??___ftpack+2)& (0+255),c
  3784  0012E6  5014               	movf	??___ftpack,w,c
  3785  0012E8  1015               	iorwf	??___ftpack+1,w,c
  3786  0012EA  1016               	iorwf	??___ftpack+2,w,c
  3787  0012EC  B4D8               	btfsc	status,2,c
  3788  0012EE  D00C               	goto	l1681
  3789  0012F0  D7EC               	goto	l1673
  3790  0012F2                     l1677:
  3791  0012F2  2A12               	incf	___ftpack@exp,f,c
  3792  0012F4  0E01               	movlw	1
  3793  0012F6  260F               	addwf	___ftpack@arg,f,c
  3794  0012F8  0E00               	movlw	0
  3795  0012FA  2210               	addwfc	___ftpack@arg+1,f,c
  3796  0012FC  0E00               	movlw	0
  3797  0012FE  2211               	addwfc	___ftpack@arg+2,f,c
  3798  001300  90D8               	bcf	status,0,c
  3799  001302  3211               	rrcf	___ftpack@arg+2,f,c
  3800  001304  3210               	rrcf	___ftpack@arg+1,f,c
  3801  001306  320F               	rrcf	___ftpack@arg,f,c
  3802  001308                     l1681:
  3803  001308  0E00               	movlw	0
  3804  00130A  140F               	andwf	___ftpack@arg,w,c
  3805  00130C  6E14               	movwf	??___ftpack& (0+255),c
  3806  00130E  0E00               	movlw	0
  3807  001310  1410               	andwf	___ftpack@arg+1,w,c
  3808  001312  6E15               	movwf	(??___ftpack+1)& (0+255),c
  3809  001314  0EFF               	movlw	255
  3810  001316  1411               	andwf	___ftpack@arg+2,w,c
  3811  001318  6E16               	movwf	(??___ftpack+2)& (0+255),c
  3812  00131A  5014               	movf	??___ftpack,w,c
  3813  00131C  1015               	iorwf	??___ftpack+1,w,c
  3814  00131E  1016               	iorwf	??___ftpack+2,w,c
  3815  001320  B4D8               	btfsc	status,2,c
  3816  001322  D006               	goto	l1685
  3817  001324  D7E6               	goto	l1677
  3818  001326                     l1683:
  3819  001326  0612               	decf	___ftpack@exp,f,c
  3820  001328  90D8               	bcf	status,0,c
  3821  00132A  360F               	rlcf	___ftpack@arg,f,c
  3822  00132C  3610               	rlcf	___ftpack@arg+1,f,c
  3823  00132E  3611               	rlcf	___ftpack@arg+2,f,c
  3824  001330                     l1685:
  3825  001330  AE10               	btfss	___ftpack@arg+1,7,c
  3826  001332  D7F9               	goto	l1683
  3827  001334  A012               	btfss	___ftpack@exp,0,c
  3828  001336  9E10               	bcf	___ftpack@arg+1,7,c
  3829  001338  90D8               	bcf	status,0,c
  3830  00133A  3212               	rrcf	___ftpack@exp,f,c
  3831  00133C  5012               	movf	___ftpack@exp,w,c
  3832  00133E  1211               	iorwf	___ftpack@arg+2,f,c
  3833  001340  5013               	movf	___ftpack@sign,w,c
  3834  001342  A4D8               	btfss	status,2,c
  3835  001344  8E11               	bsf	___ftpack@arg+2,7,c
  3836  001346  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  3837  00134A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  3838  00134E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  3839  001352  0012               	return	
  3840  001354                     __end_of___ftpack:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           prodl	equ	0xFF3
  3845                           intcon	equ	0xFF2
  3846                           postinc0	equ	0xFEE
  3847                           wreg	equ	0xFE8
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function _UART_INIT *****************
  3851 ;; Defined at:
  3852 ;;		line 314 in file "main.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;		None               void
  3859 ;; Registers used:
  3860 ;;		wreg, status,2
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3866 ;;      Params:         0       0       0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0
  3869 ;;      Totals:         0       0       0       0       0       0       0
  3870 ;;Total ram usage:        0 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    1
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text20
  3881  0018CE                     __ptext20:
  3882                           	opt stack 0
  3883  0018CE                     _UART_INIT:
  3884                           	opt stack 29
  3885                           
  3886                           ;main.c: 316: TRISCbits.TRISC6 = 1;
  3887                           
  3888                           ;incstack = 0
  3889  0018CE  8C94               	bsf	3988,6,c	;volatile
  3890                           
  3891                           ;main.c: 317: TRISCbits.TRISC7 = 1;
  3892  0018D0  8E94               	bsf	3988,7,c	;volatile
  3893                           
  3894                           ;main.c: 318: ANSELCbits.ANSC6 = 0;
  3895  0018D2  010F               	movlb	15	; () banked
  3896  0018D4  9D3A               	bcf	58,6,b	;volatile
  3897                           
  3898                           ;main.c: 319: ANSELCbits.ANSC7 = 0;
  3899  0018D6  010F               	movlb	15	; () banked
  3900  0018D8  9F3A               	bcf	58,7,b	;volatile
  3901                           
  3902                           ; BSR set to: 15
  3903                           ;main.c: 320: SPBRG1 = 12;
  3904  0018DA  0E0C               	movlw	12
  3905  0018DC  6EAF               	movwf	4015,c	;volatile
  3906                           
  3907                           ;main.c: 321: SPBRGH1 = 0;
  3908  0018DE  0E00               	movlw	0
  3909  0018E0  6EB0               	movwf	4016,c	;volatile
  3910                           
  3911                           ; BSR set to: 15
  3912                           ;main.c: 324: BAUDCON1bits.BRG16 = 1;
  3913  0018E2  86B8               	bsf	4024,3,c	;volatile
  3914                           
  3915                           ; BSR set to: 15
  3916                           ;main.c: 326: TXSTAbits.BRGH = 0;
  3917  0018E4  94AC               	bcf	4012,2,c	;volatile
  3918                           
  3919                           ; BSR set to: 15
  3920                           ;main.c: 327: TXSTAbits.SYNC = 0;
  3921  0018E6  98AC               	bcf	4012,4,c	;volatile
  3922                           
  3923                           ; BSR set to: 15
  3924                           ;main.c: 328: TXSTAbits.TXEN = 1;
  3925  0018E8  8AAC               	bsf	4012,5,c	;volatile
  3926                           
  3927                           ; BSR set to: 15
  3928                           ;main.c: 329: RCSTAbits.SPEN = 1;
  3929  0018EA  8EAB               	bsf	4011,7,c	;volatile
  3930                           
  3931                           ; BSR set to: 15
  3932  0018EC  0012               	return	
  3933  0018EE                     __end_of_UART_INIT:
  3934                           	opt stack 0
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           prodl	equ	0xFF3
  3938                           intcon	equ	0xFF2
  3939                           postinc0	equ	0xFEE
  3940                           wreg	equ	0xFE8
  3941                           status	equ	0xFD8
  3942                           
  3943 ;; *************** function _PWM_OUT *****************
  3944 ;; Defined at:
  3945 ;;		line 248 in file "main.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  duty_cycle      2   64[COMRAM] unsigned int 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;		None               void
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3959 ;;      Params:         2       0       0       0       0       0       0
  3960 ;;      Locals:         0       0       0       0       0       0       0
  3961 ;;      Temps:          0       2       0       0       0       0       0
  3962 ;;      Totals:         2       2       0       0       0       0       0
  3963 ;;Total ram usage:        4 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    1
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text21
  3974  001730                     __ptext21:
  3975                           	opt stack 0
  3976  001730                     _PWM_OUT:
  3977                           	opt stack 29
  3978                           
  3979                           ;main.c: 250: PWM_HB = duty_cycle>>2;
  3980                           
  3981                           ; BSR set to: 15
  3982                           ;incstack = 0
  3983  001730  C041  F066         	movff	PWM_OUT@duty_cycle,??_PWM_OUT
  3984  001734  C042  F067         	movff	PWM_OUT@duty_cycle+1,??_PWM_OUT+1
  3985  001738  0100               	movlb	0	; () banked
  3986  00173A  90D8               	bcf	status,0,c
  3987  00173C  3367               	rrcf	(??_PWM_OUT+1)& (0+255),f,b
  3988  00173E  3366               	rrcf	??_PWM_OUT& (0+255),f,b
  3989  001740  0100               	movlb	0	; () banked
  3990  001742  90D8               	bcf	status,0,c
  3991  001744  3367               	rrcf	(??_PWM_OUT+1)& (0+255),f,b
  3992  001746  3366               	rrcf	??_PWM_OUT& (0+255),f,b
  3993  001748  C066  F047         	movff	??_PWM_OUT,_PWM_HB
  3994  00174C  C067  F048         	movff	??_PWM_OUT+1,_PWM_HB+1
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;main.c: 251: PWM_LB = duty_cycle & 0x0003;
  3998  001750  0E03               	movlw	3
  3999  001752  1441               	andwf	PWM_OUT@duty_cycle,w,c
  4000  001754  6E49               	movwf	_PWM_LB,c
  4001  001756  6A4A               	clrf	_PWM_LB+1,c
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 252: CCPR5L = PWM_HB;
  4005  001758  C047  FF55         	movff	_PWM_HB,3925	;volatile
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;main.c: 253: CCP5CON = (CCP5CON & 0b11001111)|(PWM_LB<<4);
  4009  00175C  C049  F066         	movff	_PWM_LB,??_PWM_OUT
  4010  001760  0100               	movlb	0	; () banked
  4011  001762  3B66               	swapf	??_PWM_OUT& (0+255),f,b
  4012  001764  0EF0               	movlw	240
  4013  001766  1766               	andwf	??_PWM_OUT& (0+255),f,b
  4014  001768  010F               	movlb	15	; () banked
  4015  00176A  5154               	movf	84,w,b	;volatile
  4016  00176C  0BCF               	andlw	207
  4017  00176E  0100               	movlb	0	; () banked
  4018  001770  1166               	iorwf	??_PWM_OUT& (0+255),w,b
  4019  001772  010F               	movlb	15	; () banked
  4020  001774  6F54               	movwf	84,b	;volatile
  4021                           
  4022                           ; BSR set to: 15
  4023  001776  0012               	return	
  4024  001778                     __end_of_PWM_OUT:
  4025                           	opt stack 0
  4026                           tblptru	equ	0xFF8
  4027                           tblptrh	equ	0xFF7
  4028                           prodl	equ	0xFF3
  4029                           intcon	equ	0xFF2
  4030                           postinc0	equ	0xFEE
  4031                           wreg	equ	0xFE8
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _LOW_BATTERY *****************
  4035 ;; Defined at:
  4036 ;;		line 292 in file "main.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  delayy          1   18[COMRAM] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;		None               void
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4050 ;;      Params:         0       0       0       0       0       0       0
  4051 ;;      Locals:         1       0       0       0       0       0       0
  4052 ;;      Temps:          1       0       0       0       0       0       0
  4053 ;;      Totals:         2       0       0       0       0       0       0
  4054 ;;Total ram usage:        2 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    3
  4057 ;; This function calls:
  4058 ;;		_lcd_goto
  4059 ;;		_lcd_writesc
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text22
  4066  001680                     __ptext22:
  4067                           	opt stack 0
  4068  001680                     _LOW_BATTERY:
  4069                           	opt stack 27
  4070                           
  4071                           ;main.c: 294: if(CM1CON0bits.C1OUT){
  4072                           
  4073                           ; BSR set to: 15
  4074                           ;incstack = 0
  4075  001680  AC79               	btfss	3961,6,c	;volatile
  4076  001682  0012               	return	
  4077                           
  4078                           ;main.c: 296: lcd_goto(0x40);
  4079  001684  0E40               	movlw	64
  4080  001686  EC84  F00C         	call	_lcd_goto
  4081                           
  4082                           ;main.c: 297: lcd_writesc("Low battery     ");
  4083  00168A  0E06               	movlw	high STR_5
  4084  00168C  6E11               	movwf	lcd_writesc@s+1,c
  4085  00168E  0E12               	movlw	low STR_5
  4086  001690  6E10               	movwf	lcd_writesc@s,c
  4087  001692  EC1A  F00C         	call	_lcd_writesc	;wreg free
  4088                           
  4089                           ;main.c: 298: char delayy = 10;
  4090  001696  0E0A               	movlw	10
  4091  001698  6E13               	movwf	LOW_BATTERY@delayy,c
  4092                           
  4093                           ;main.c: 299: if(delayy){
  4094  00169A  5013               	movf	LOW_BATTERY@delayy,w,c
  4095  00169C  B4D8               	btfsc	status,2,c
  4096  00169E  D008               	goto	l2075
  4097                           
  4098                           ;main.c: 300: _delay((unsigned long)((100)*(4000000/4000.0)));
  4099  0016A0  0E82               	movlw	130
  4100  0016A2  6E12               	movwf	??_LOW_BATTERY& (0+255),c
  4101  0016A4  0EDE               	movlw	222
  4102  0016A6                     u2617:
  4103  0016A6  2EE8               	decfsz	wreg,f,c
  4104  0016A8  D7FE               	goto	u2617
  4105  0016AA  2E12               	decfsz	??_LOW_BATTERY& (0+255),f,c
  4106  0016AC  D7FC               	goto	u2617
  4107                           
  4108                           ;main.c: 301: delayy--;
  4109  0016AE  0613               	decf	LOW_BATTERY@delayy,f,c
  4110  0016B0                     l2075:
  4111                           
  4112                           ;main.c: 302: }
  4113                           ;main.c: 303: lcd_goto(0x40);
  4114  0016B0  0E40               	movlw	64
  4115  0016B2  EC84  F00C         	call	_lcd_goto
  4116                           
  4117                           ;main.c: 304: lcd_writesc("                ");
  4118  0016B6  0E06               	movlw	high STR_6
  4119  0016B8  6E11               	movwf	lcd_writesc@s+1,c
  4120  0016BA  0E01               	movlw	low STR_6
  4121  0016BC  6E10               	movwf	lcd_writesc@s,c
  4122  0016BE  EC1A  F00C         	call	_lcd_writesc	;wreg free
  4123                           
  4124                           ;main.c: 305: char delayy = 10;
  4125  0016C2  0E0A               	movlw	10
  4126  0016C4  6E13               	movwf	LOW_BATTERY@delayy,c
  4127                           
  4128                           ;main.c: 306: if(delayy){
  4129  0016C6  5013               	movf	LOW_BATTERY@delayy,w,c
  4130  0016C8  B4D8               	btfsc	status,2,c
  4131  0016CA  0012               	return	
  4132                           
  4133                           ;main.c: 307: _delay((unsigned long)((100)*(4000000/4000.0)));
  4134  0016CC  0E82               	movlw	130
  4135  0016CE  6E12               	movwf	??_LOW_BATTERY& (0+255),c
  4136  0016D0  0EDE               	movlw	222
  4137  0016D2                     u2627:
  4138  0016D2  2EE8               	decfsz	wreg,f,c
  4139  0016D4  D7FE               	goto	u2627
  4140  0016D6  2E12               	decfsz	??_LOW_BATTERY& (0+255),f,c
  4141  0016D8  D7FC               	goto	u2627
  4142                           
  4143                           ;main.c: 308: delayy--;
  4144  0016DA  0613               	decf	LOW_BATTERY@delayy,f,c
  4145  0016DC  0012               	return	
  4146  0016DE                     __end_of_LOW_BATTERY:
  4147                           	opt stack 0
  4148                           tblptru	equ	0xFF8
  4149                           tblptrh	equ	0xFF7
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _lcd_writesc *****************
  4157 ;; Defined at:
  4158 ;;		line 65 in file "lcd.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  s               2   15[COMRAM] PTR const unsigned char 
  4161 ;;		 -> STR_6(17), STR_5(17), STR_4(4), STR_3(7), 
  4162 ;;		 -> STR_2(7), STR_1(7), 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;		None               void
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4174 ;;      Params:         2       0       0       0       0       0       0
  4175 ;;      Locals:         0       0       0       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0
  4177 ;;      Totals:         2       0       0       0       0       0       0
  4178 ;;Total ram usage:        2 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    2
  4181 ;; This function calls:
  4182 ;;		_lcd_write
  4183 ;; This function is called by:
  4184 ;;		_main
  4185 ;;		_show_values
  4186 ;;		_LOW_BATTERY
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text23
  4191  001834                     __ptext23:
  4192                           	opt stack 0
  4193  001834                     _lcd_writesc:
  4194                           	opt stack 27
  4195                           
  4196                           ;incstack = 0
  4197  001834  D00A               	goto	l1711
  4198  001836                     l1707:
  4199                           
  4200                           ;lcd.c: 67: lcd_write(*s++);
  4201  001836  C010  FFF6         	movff	lcd_writesc@s,tblptrl
  4202  00183A  C011  FFF7         	movff	lcd_writesc@s+1,tblptrh
  4203  00183E                     	if	0	;tblptru may be non-zero
  4204  00183E                     	endif
  4205  00183E                     	if	0	;tblptru may be non-zero
  4206  00183E                     	endif
  4207  00183E  0008               	tblrd		*
  4208  001840  50F5               	movf	tablat,w,c
  4209  001842  EC0C  F00B         	call	_lcd_write
  4210  001846  4A10               	infsnz	lcd_writesc@s,f,c
  4211  001848  2A11               	incf	lcd_writesc@s+1,f,c
  4212  00184A                     l1711:
  4213  00184A  C010  FFF6         	movff	lcd_writesc@s,tblptrl
  4214  00184E  C011  FFF7         	movff	lcd_writesc@s+1,tblptrh
  4215  001852                     	if	0	;tblptru may be non-zero
  4216  001852                     	endif
  4217  001852                     	if	0	;tblptru may be non-zero
  4218  001852                     	endif
  4219  001852  0008               	tblrd		*
  4220  001854  50F5               	movf	tablat,w,c
  4221  001856  0900               	iorlw	0
  4222  001858  B4D8               	btfsc	status,2,c
  4223  00185A  0012               	return	
  4224  00185C  D7EC               	goto	l1707
  4225  00185E                     __end_of_lcd_writesc:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodl	equ	0xFF3
  4232                           intcon	equ	0xFF2
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           status	equ	0xFD8
  4236                           
  4237 ;; *************** function _lcd_goto *****************
  4238 ;; Defined at:
  4239 ;;		line 79 in file "lcd.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  pos             1    wreg     unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  pos             1   15[COMRAM] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;		None               void
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4253 ;;      Params:         0       0       0       0       0       0       0
  4254 ;;      Locals:         1       0       0       0       0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0
  4256 ;;      Totals:         1       0       0       0       0       0       0
  4257 ;;Total ram usage:        1 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    2
  4260 ;; This function calls:
  4261 ;;		_lcd_write
  4262 ;; This function is called by:
  4263 ;;		_main
  4264 ;;		_show_values
  4265 ;;		_show_clock
  4266 ;;		_LOW_BATTERY
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text24
  4271  001908                     __ptext24:
  4272                           	opt stack 0
  4273  001908                     _lcd_goto:
  4274                           	opt stack 27
  4275                           
  4276                           ;incstack = 0
  4277                           ;lcd_goto@pos stored from wreg
  4278  001908  6E10               	movwf	lcd_goto@pos,c
  4279  00190A  9A8A               	bcf	3978,5,c	;volatile
  4280                           
  4281                           ;lcd.c: 81: lcd_write(0x80+pos);
  4282  00190C  5010               	movf	lcd_goto@pos,w,c
  4283  00190E  0F80               	addlw	128
  4284  001910  EC0C  F00B         	call	_lcd_write
  4285                           
  4286                           ;lcd.c: 82: LATBbits.LATB5=1;
  4287  001914  8A8A               	bsf	3978,5,c	;volatile
  4288  001916  0012               	return	
  4289  001918                     __end_of_lcd_goto:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _lcd_write *****************
  4302 ;; Defined at:
  4303 ;;		line 40 in file "lcd.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  c               1    wreg     unsigned char 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  c               1   14[COMRAM] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4317 ;;      Params:         0       0       0       0       0       0       0
  4318 ;;      Locals:         1       0       0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0
  4320 ;;      Totals:         1       0       0       0       0       0       0
  4321 ;;Total ram usage:        1 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    1
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_show_values
  4328 ;;		_show_clock
  4329 ;;		_lcd_clear
  4330 ;;		_lcd_writesc
  4331 ;;		_lcd_goto
  4332 ;;		_lcd_cmd
  4333 ;;		_lcd_writesv
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text25
  4338  001618                     __ptext25:
  4339                           	opt stack 0
  4340  001618                     _lcd_write:
  4341                           	opt stack 27
  4342                           
  4343                           ;incstack = 0
  4344                           ;lcd_write@c stored from wreg
  4345  001618  6E0F               	movwf	lcd_write@c,c
  4346  00161A  AE0F               	btfss	lcd_write@c,7,c
  4347  00161C  D002               	goto	l209
  4348  00161E  868B               	bsf	3979,3,c	;volatile
  4349  001620  D001               	goto	l1635
  4350  001622                     l209:
  4351  001622  968B               	bcf	3979,3,c	;volatile
  4352  001624                     l1635:
  4353                           
  4354                           ;lcd.c: 42: if(c & 0x40) LATBbits.LATB2=1; else LATBbits.LATB2=0;
  4355  001624  AC0F               	btfss	lcd_write@c,6,c
  4356  001626  D002               	goto	l211
  4357  001628  848A               	bsf	3978,2,c	;volatile
  4358  00162A  D001               	goto	l1639
  4359  00162C                     l211:
  4360  00162C  948A               	bcf	3978,2,c	;volatile
  4361  00162E                     l1639:
  4362                           
  4363                           ;lcd.c: 43: if(c & 0x20) LATBbits.LATB1=1; else LATBbits.LATB1=0;
  4364  00162E  AA0F               	btfss	lcd_write@c,5,c
  4365  001630  D002               	goto	l213
  4366  001632  828A               	bsf	3978,1,c	;volatile
  4367  001634  D001               	goto	l1643
  4368  001636                     l213:
  4369  001636  928A               	bcf	3978,1,c	;volatile
  4370  001638                     l1643:
  4371                           
  4372                           ;lcd.c: 44: if(c & 0x10) LATBbits.LATB0=1; else LATBbits.LATB0=0;
  4373  001638  A80F               	btfss	lcd_write@c,4,c
  4374  00163A  D002               	goto	l215
  4375  00163C  808A               	bsf	3978,0,c	;volatile
  4376  00163E  D001               	goto	l216
  4377  001640                     l215:
  4378  001640  908A               	bcf	3978,0,c	;volatile
  4379  001642                     l216:
  4380                           
  4381                           ;lcd.c: 45: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbit
      +                          s.LATB4=0;};
  4382  001642  888A               	bsf	3978,4,c	;volatile
  4383  001644  F000               	nop	
  4384  001646  988A               	bcf	3978,4,c	;volatile
  4385                           
  4386                           ;lcd.c: 46: if(c & 0x08) LATCbits.LATC3=1; else LATCbits.LATC3=0;
  4387  001648  A60F               	btfss	lcd_write@c,3,c
  4388  00164A  D002               	goto	l217
  4389  00164C  868B               	bsf	3979,3,c	;volatile
  4390  00164E  D001               	goto	l1651
  4391  001650                     l217:
  4392  001650  968B               	bcf	3979,3,c	;volatile
  4393  001652                     l1651:
  4394                           
  4395                           ;lcd.c: 47: if(c & 0x04) LATBbits.LATB2=1; else LATBbits.LATB2=0;
  4396  001652  A40F               	btfss	lcd_write@c,2,c
  4397  001654  D002               	goto	l219
  4398  001656  848A               	bsf	3978,2,c	;volatile
  4399  001658  D001               	goto	l1655
  4400  00165A                     l219:
  4401  00165A  948A               	bcf	3978,2,c	;volatile
  4402  00165C                     l1655:
  4403                           
  4404                           ;lcd.c: 48: if(c & 0x02) LATBbits.LATB1=1; else LATBbits.LATB1=0;
  4405  00165C  A20F               	btfss	lcd_write@c,1,c
  4406  00165E  D002               	goto	l221
  4407  001660  828A               	bsf	3978,1,c	;volatile
  4408  001662  D001               	goto	l1659
  4409  001664                     l221:
  4410  001664  928A               	bcf	3978,1,c	;volatile
  4411  001666                     l1659:
  4412                           
  4413                           ;lcd.c: 49: if(c & 0x01) LATBbits.LATB0=1; else LATBbits.LATB0=0;
  4414  001666  A00F               	btfss	lcd_write@c,0,c
  4415  001668  D002               	goto	l223
  4416  00166A  808A               	bsf	3978,0,c	;volatile
  4417  00166C  D001               	goto	l224
  4418  00166E                     l223:
  4419  00166E  908A               	bcf	3978,0,c	;volatile
  4420  001670                     l224:
  4421                           
  4422                           ;lcd.c: 50: {LATBbits.LATB4=1; _delay((unsigned long)((1)*(4000000/4000000.0))); LATBbit
      +                          s.LATB4=0;};
  4423  001670  888A               	bsf	3978,4,c	;volatile
  4424  001672  F000               	nop	
  4425  001674  988A               	bcf	3978,4,c	;volatile
  4426                           
  4427                           ;lcd.c: 51: _delay((unsigned long)((50)*(4000000/4000000.0)));
  4428  001676  0E10               	movlw	16
  4429  001678                     u2637:
  4430  001678  2EE8               	decfsz	wreg,f,c
  4431  00167A  D7FE               	goto	u2637
  4432  00167C  D000               	nop2		;nop
  4433  00167E  0012               	return	
  4434  001680                     __end_of_lcd_write:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodl	equ	0xFF3
  4441                           intcon	equ	0xFF2
  4442                           postinc0	equ	0xFEE
  4443                           wreg	equ	0xFE8
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function _ADC_10bit *****************
  4447 ;; Defined at:
  4448 ;;		line 237 in file "main.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  channel         1    wreg     unsigned char 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  channel         1   18[COMRAM] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  2   14[COMRAM] unsigned int 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4462 ;;      Params:         2       0       0       0       0       0       0
  4463 ;;      Locals:         1       0       0       0       0       0       0
  4464 ;;      Temps:          2       0       0       0       0       0       0
  4465 ;;      Totals:         5       0       0       0       0       0       0
  4466 ;;Total ram usage:        5 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    1
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text26
  4477  001778                     __ptext26:
  4478                           	opt stack 0
  4479  001778                     _ADC_10bit:
  4480                           	opt stack 29
  4481                           
  4482                           ;incstack = 0
  4483                           ;ADC_10bit@channel stored from wreg
  4484  001778  6E13               	movwf	ADC_10bit@channel,c
  4485                           
  4486                           ;main.c: 238: ADCON0 = (ADCON0 & 0b10000011)|(channel<<2);
  4487  00177A  C013  F011         	movff	ADC_10bit@channel,??_ADC_10bit
  4488  00177E  90D8               	bcf	status,0,c
  4489  001780  3611               	rlcf	??_ADC_10bit,f,c
  4490  001782  90D8               	bcf	status,0,c
  4491  001784  3611               	rlcf	??_ADC_10bit,f,c
  4492  001786  50C2               	movf	4034,w,c	;volatile
  4493  001788  0B83               	andlw	131
  4494  00178A  1011               	iorwf	??_ADC_10bit,w,c
  4495  00178C  6EC2               	movwf	4034,c	;volatile
  4496                           
  4497                           ;main.c: 239: _delay((unsigned long)((8)*(4000000/4000000.0)));
  4498  00178E  0E02               	movlw	2
  4499  001790                     u2647:
  4500  001790  2EE8               	decfsz	wreg,f,c
  4501  001792  D7FE               	goto	u2647
  4502  001794  D000               	nop2		;nop
  4503                           
  4504                           ;main.c: 240: ADCON0bits.GO = 1;
  4505  001796  82C2               	bsf	4034,1,c	;volatile
  4506  001798                     l179:
  4507  001798  B2C2               	btfsc	4034,1,c	;volatile
  4508  00179A  D7FE               	goto	l179
  4509                           
  4510                           ;main.c: 243: ADC_HB = ADRESH;
  4511  00179C  CFC4 F043          	movff	4036,_ADC_HB	;volatile
  4512  0017A0  6A44               	clrf	_ADC_HB+1,c
  4513                           
  4514                           ;main.c: 244: ADC_LB = ADRESL;
  4515  0017A2  CFC3 F045          	movff	4035,_ADC_LB	;volatile
  4516  0017A6  6A46               	clrf	_ADC_LB+1,c
  4517                           
  4518                           ;main.c: 245: return (ADC_HB<<8|ADC_LB);
  4519  0017A8  5043               	movf	_ADC_HB,w,c
  4520  0017AA  6E12               	movwf	(??_ADC_10bit+1)& (0+255),c
  4521  0017AC  6A11               	clrf	??_ADC_10bit& (0+255),c
  4522  0017AE  5045               	movf	_ADC_LB,w,c
  4523  0017B0  1011               	iorwf	??_ADC_10bit,w,c
  4524  0017B2  6E0F               	movwf	?_ADC_10bit,c
  4525  0017B4  5046               	movf	_ADC_LB+1,w,c
  4526  0017B6  1012               	iorwf	??_ADC_10bit+1,w,c
  4527  0017B8  6E10               	movwf	?_ADC_10bit+1,c
  4528  0017BA  0012               	return	
  4529  0017BC                     __end_of_ADC_10bit:
  4530                           	opt stack 0
  4531                           tblptru	equ	0xFF8
  4532                           tblptrh	equ	0xFF7
  4533                           tblptrl	equ	0xFF6
  4534                           tablat	equ	0xFF5
  4535                           prodl	equ	0xFF3
  4536                           intcon	equ	0xFF2
  4537                           postinc0	equ	0xFEE
  4538                           wreg	equ	0xFE8
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _isr *****************
  4542 ;; Defined at:
  4543 ;;		line 214 in file "main.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;		None               void
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4557 ;;      Params:         0       0       0       0       0       0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0
  4559 ;;      Temps:         14       0       0       0       0       0       0
  4560 ;;      Totals:        14       0       0       0       0       0       0
  4561 ;;Total ram usage:       14 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		Interrupt level 2
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	intcode
  4571  000008                     __pintcode:
  4572                           	opt stack 0
  4573  000008                     _isr:
  4574                           	opt stack 27
  4575                           
  4576                           ;incstack = 0
  4577  000008  CFFA F001          	movff	pclath,??_isr
  4578  00000C  CFFB F002          	movff	pclatu,??_isr+1
  4579  000010  CFE9 F003          	movff	fsr0l,??_isr+2
  4580  000014  CFEA F004          	movff	fsr0h,??_isr+3
  4581  000018  CFE1 F005          	movff	fsr1l,??_isr+4
  4582  00001C  CFE2 F006          	movff	fsr1h,??_isr+5
  4583  000020  CFD9 F007          	movff	fsr2l,??_isr+6
  4584  000024  CFDA F008          	movff	fsr2h,??_isr+7
  4585  000028  CFF3 F009          	movff	prodl,??_isr+8
  4586  00002C  CFF4 F00A          	movff	prodh,??_isr+9
  4587  000030  CFF6 F00B          	movff	tblptrl,??_isr+10
  4588  000034  CFF7 F00C          	movff	tblptrh,??_isr+11
  4589  000038  CFF8 F00D          	movff	tblptru,??_isr+12
  4590  00003C  CFF5 F00E          	movff	tablat,??_isr+13
  4591                           
  4592                           ;main.c: 216: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
  4593  000040  B09E               	btfsc	3998,0,c	;volatile
  4594  000042  A09D               	btfss	3997,0,c	;volatile
  4595  000044  D023               	goto	i2l176
  4596                           
  4597                           ;main.c: 217: {
  4598                           ;main.c: 219: TMR1H=60;
  4599  000046  0E3C               	movlw	60
  4600  000048  6ECF               	movwf	4047,c	;volatile
  4601                           
  4602                           ;main.c: 220: TMR1L=237;
  4603  00004A  0EED               	movlw	237
  4604  00004C  6ECE               	movwf	4046,c	;volatile
  4605                           
  4606                           ;main.c: 223: if(++tiondel>=10)
  4607  00004E  2A50               	incf	_tiondel,f,c
  4608  000050  0E09               	movlw	9
  4609  000052  6450               	cpfsgt	_tiondel& (0+255),c
  4610  000054  D01A               	goto	i2l2403
  4611                           
  4612                           ;main.c: 224: { tiondel=0;
  4613  000056  0E00               	movlw	0
  4614  000058  6E50               	movwf	_tiondel,c
  4615                           
  4616                           ;main.c: 225: if(++sec>=60)
  4617  00005A  2A4F               	incf	_sec,f,c
  4618  00005C  0E3B               	movlw	59
  4619  00005E  644F               	cpfsgt	_sec& (0+255),c
  4620  000060  D014               	goto	i2l2403
  4621                           
  4622                           ;main.c: 226: { sec=0;
  4623  000062  0E00               	movlw	0
  4624  000064  6E4F               	movwf	_sec,c
  4625                           
  4626                           ;main.c: 227: if(++min>=60)
  4627  000066  0100               	movlb	0	; () banked
  4628  000068  2B8A               	incf	_min& (0+255),f,b
  4629  00006A  0E3B               	movlw	59
  4630  00006C  0100               	movlb	0	; () banked
  4631  00006E  658A               	cpfsgt	_min& (0+255),b
  4632  000070  D00C               	goto	i2l2403
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;main.c: 228: { min=0;
  4636  000072  0E00               	movlw	0
  4637  000074  0100               	movlb	0	; () banked
  4638  000076  6F8A               	movwf	_min& (0+255),b
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;main.c: 229: if(++hr>=24)
  4642  000078  0100               	movlb	0	; () banked
  4643  00007A  2B89               	incf	_hr& (0+255),f,b
  4644  00007C  0E17               	movlw	23
  4645  00007E  0100               	movlb	0	; () banked
  4646  000080  6589               	cpfsgt	_hr& (0+255),b
  4647  000082  D003               	goto	i2l2403
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;main.c: 230: hr=0;
  4651  000084  0E00               	movlw	0
  4652  000086  0100               	movlb	0	; () banked
  4653  000088  6F89               	movwf	_hr& (0+255),b
  4654  00008A                     i2l2403:
  4655                           
  4656                           ;main.c: 231: }
  4657                           ;main.c: 232: }
  4658                           ;main.c: 233: }
  4659                           ;main.c: 234: PIR1bits.TMR1IF = 0;
  4660  00008A  909E               	bcf	3998,0,c	;volatile
  4661  00008C                     i2l176:
  4662  00008C  C00E  FFF5         	movff	??_isr+13,tablat
  4663  000090  C00D  FFF8         	movff	??_isr+12,tblptru
  4664  000094  C00C  FFF7         	movff	??_isr+11,tblptrh
  4665  000098  C00B  FFF6         	movff	??_isr+10,tblptrl
  4666  00009C  C00A  FFF4         	movff	??_isr+9,prodh
  4667  0000A0  C009  FFF3         	movff	??_isr+8,prodl
  4668  0000A4  C008  FFDA         	movff	??_isr+7,fsr2h
  4669  0000A8  C007  FFD9         	movff	??_isr+6,fsr2l
  4670  0000AC  C006  FFE2         	movff	??_isr+5,fsr1h
  4671  0000B0  C005  FFE1         	movff	??_isr+4,fsr1l
  4672  0000B4  C004  FFEA         	movff	??_isr+3,fsr0h
  4673  0000B8  C003  FFE9         	movff	??_isr+2,fsr0l
  4674  0000BC  C002  FFFB         	movff	??_isr+1,pclatu
  4675  0000C0  C001  FFFA         	movff	??_isr,pclath
  4676  0000C4  0011               	retfie		f
  4677  0000C6                     __end_of_isr:
  4678                           	opt stack 0
  4679                           pclatu	equ	0xFFB
  4680                           pclath	equ	0xFFA
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           intcon	equ	0xFF2
  4688                           postinc0	equ	0xFEE
  4689                           fsr0h	equ	0xFEA
  4690                           fsr0l	equ	0xFE9
  4691                           wreg	equ	0xFE8
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           pclatu	equ	0xFFB
  4698                           pclath	equ	0xFFA
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           intcon	equ	0xFF2
  4706                           postinc0	equ	0xFEE
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716                           	psect	rparam
  4717  0000                     pclatu	equ	0xFFB
  4718                           pclath	equ	0xFFA
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           fsr1h	equ	0xFE2
  4731                           fsr1l	equ	0xFE1
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    0
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     66      80
    BANK0           160     32      46
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_writesc@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[4]), STR_3(CODE[7]), 
		 -> STR_2(CODE[7]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_PWM_OUT
    _show_values->___lwdiv
    _show_clock->___awdiv
    _lcd_init->_lcd_clear
    _lcd_init->_lcd_cmd
    _lcd_cmd->_lcd_write
    _lcd_clear->_lcd_write
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___ftneg->___ftmul
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _PWM_OUT->___fttol
    _LOW_BATTERY->_lcd_writesc
    _lcd_writesc->_lcd_write
    _lcd_goto->_lcd_write

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_PWM_OUT
    _PWM_OUT->___fttol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   21877
                                              8 BANK0     24    24      0
                          _ADC_10bit
                        _LOW_BATTERY
                            _PWM_OUT
                          _UART_INIT
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lwtoft
                               _init
                           _lcd_goto
                           _lcd_init
                        _lcd_writesc
                         _show_clock
                        _show_values
 ---------------------------------------------------------------------------------
 (1) _show_values                                          8     4      4    1898
                                             21 COMRAM     8     4      4
                            ___lwdiv
                            ___lwmod
                           _lcd_goto
                          _lcd_write
                        _lcd_writesc
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     371
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _show_clock                                           0     0      0    1606
                            ___awdiv
                            ___awmod
                           _lcd_goto
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     614
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     618
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     374
                                             16 COMRAM     1     1      0
                          _lcd_clear
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     198
                                             15 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            1     1      0     176
                                             15 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1866
                                             22 COMRAM     3     0      3
                          _ADC_10bit (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     761
                                             55 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                          _ADC_10bit (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftsub                                              6     0      6    3472
                                             55 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3241
                                             43 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     204
                                             40 COMRAM     3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2833
                                             25 COMRAM    15     9      6
                          _ADC_10bit (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     666
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2363
                                             40 COMRAM    15     9      6
                          _ADC_10bit (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1685
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _UART_INIT                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_OUT                                              4     2      2     127
                                             64 COMRAM     2     0      2
                                              6 BANK0      2     2      0
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _LOW_BATTERY                                          2     2      0     785
                                             17 COMRAM     2     2      0
                           _lcd_goto
                        _lcd_writesc
 ---------------------------------------------------------------------------------
 (2) _lcd_writesc                                          2     0      2     539
                                             15 COMRAM     2     0      2
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_goto                                             1     1      0     198
                                             15 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _lcd_write                                            1     1      0     176
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_10bit                                            5     3      2      22
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_10bit
   _LOW_BATTERY
     _lcd_goto
       _lcd_write
     _lcd_writesc
       _lcd_write
   _PWM_OUT
     ___fttol (ARG)
       _ADC_10bit (ARG)
       ___ftdiv (ARG)
         _ADC_10bit (ARG)
         ___ftmul (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ADC_10bit (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
   _UART_INIT
   ___ftadd
     ___ftmul (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
     ___ftneg (ARG)
       ___ftmul (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftdiv
     _ADC_10bit (ARG)
     ___ftmul (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
   ___ftge
   ___ftmul
     _ADC_10bit (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
   ___ftneg
     ___ftmul (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
   ___ftsub
     ___ftadd
       ___ftmul (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ADC_10bit (ARG)
             ___ftpack (ARG)
       ___ftpack (ARG)
   ___fttol
     _ADC_10bit (ARG)
     ___ftdiv (ARG)
       _ADC_10bit (ARG)
       ___ftmul (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ADC_10bit (ARG)
           ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
     ___ftmul (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         _ADC_10bit (ARG)
         ___ftpack (ARG)
     ___lwtoft (ARG)
       _ADC_10bit (ARG)
       ___ftpack (ARG)
   ___lwtoft
     _ADC_10bit (ARG)
     ___ftpack (ARG)
   _init
   _lcd_goto
     _lcd_write
   _lcd_init
     _lcd_clear
       _lcd_write
     _lcd_cmd
       _lcd_write
   _lcd_writesc
     _lcd_write
   _show_clock
     ___awdiv
     ___awmod
     _lcd_goto
       _lcd_write
     _lcd_write
   _show_values
     ___lwdiv
     ___lwmod
     _lcd_goto
       _lcd_write
     _lcd_write
     _lcd_writesc
       _lcd_write

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     20      2E       4       28.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     42      50       1       84.2%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7E       9        0.0%
DATA                 0      0      7E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Oct 05 16:54:44 2016

           ___awdiv@sign 0014                       _hr 0089        LOW_BATTERY@delayy 0013  
           ?_lcd_writesc 0010             ___ftadd@exp1 0037             ___ftadd@exp2 0036  
           ___ftadd@sign 0035                      l211 162C                      l221 1664  
                    l213 1636                      l223 166E                      l215 1640  
                    l143 0920                      l224 1670                      l216 1642  
                    l160 0C82                      l217 1650                      l209 1622  
                    l153 0C7A                      l219 165A                      l155 0C74  
                    l147 0C5C           lcd_cmd@command 0010                      l149 0C56  
                    l610 0DA6                      l179 1798                      l630 110A  
                    l619 0DC2                      l652 189C                      l595 0CCE  
                    l764 1726                      l774 17F4                      l599 0CFA  
                    _PR2 000FBB                      _fel 008B                      _min 008A  
                    _sec 004F                      _isr 0008             ___awmod@sign 0014  
            lcd_goto@pos 0010                      wreg 000FE8             __CFG_FOSC$XT 000000  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 0032             ___ftdiv@sign 0037  
                   l2101 1080                     l2107 10A6                     l2203 14E8  
                   l2127 10E4                     l2209 1514                     l2153 0FB6  
                   l2075 16B0                     l2171 0FF8                     l2147 0F90  
                   l2181 1020                     l1711 184A                     l2167 0FE8  
                   l2503 089E                     l2177 1010                     l2513 092C  
                   l1651 1652                     l1643 1638                     l1635 1624  
                   l1707 1836                     l2427 0E62                     l1811 1398  
                   l1741 0D08                     l2445 0EDE                     l1821 13BA  
                   l1805 1378                     l1655 165C                     l1639 162E  
                   l2199 14B8                     l1735 0CDC                     l2463 0F58  
                   l2455 0F14                     l1911 17EA                     l1903 17CA  
                   l2527 0A0E                     l1681 1308                     l1673 12CA  
                   l2457 0F2C                     l2449 0EFA                     l1817 13AE  
                   l1833 13E0                     l1905 17D2                     l2545 0B76  
                   l2473 065A                     l1659 1666                     l1683 1326  
                   l1675 12D4                     l1763 0D5A                     l2459 0F32  
                   l1819 13B6                     l1907 17D6                     l1685 1330  
                   l1677 12F2                     l1669 12BC                     l1765 0D64  
                   l1757 0D38                     l1837 13EE                     l1829 13D6  
                   l1861 1452                     l1853 1438                     l2549 0BA8  
                   l2485 07CA                     l1783 0DDE                     l1775 0D96  
                   l1767 0D6C                     l1793 0E0E                     l1777 0DA0  
                   l1769 0D74                     l1873 147E                     l1865 1466  
                   l1857 1446                     l1849 141C                     l2497 086A  
                   l2489 07E6                     l1859 144E                     l1883 16F4  
                   l1869 1470                     l1885 16FC                     l1895 171C  
                   l1887 1700                     ?_isr 0001                     STR_1 0623  
                   STR_2 060B                     STR_3 060B                     STR_4 062A  
                   STR_5 0612                     STR_6 0601                     u2211 0E44  
                   u2230 0E80                     u1271 0C98                     u1281 0CAC  
                   u2305 07B4                     u2235 0E78                     u1701 106A  
                   u1721 1090                     u2507 0BF4                     u2355 0886  
                   u2517 0C04                     _IPR1 000F9F                     u1751 0F7A  
                   u2607 18FE                     u2527 0C14                     _PIE1 000F9D  
                   u2617 16A6                     u2537 0C24                     u2385 090A  
                   u2627 16D2                     u1771 0FA0                     u2547 0C34  
                   u2637 1678                     u2557 1522                     u2647 1790  
                   u2567 153E                     u2577 1552                     u2587 1566  
                   u2597 157C                     _main 0630             ___ftpack@arg 000F  
                   _init 159C             ___ftpack@exp 0012                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     fsr2l 000FD9          __end_of_PWM_OUT 1778  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 00C6            __CFG_IESO$OFF 000000             ___ftmul@cntr 0027  
           ___ftmul@sign 0028             ___fttol@exp1 0065             ___fttol@lval 0061  
                  ??_isr 0001             main@ar_varde 0077             _BAUDCON1bits 000FB8  
                  ?_main 0001                    ?_init 0001          __end_of___awdiv 13F8  
        __end_of___ftadd 0E34          __end_of___awmod 1488          __end_of___ftdiv 113C  
        __end_of___ftneg 18AA          __end_of___ftmul 105A          ___awdiv@divisor 0011  
                  _T1CON 000FCD          __end_of___ftsub 1834          __end_of___fttol 0F6A  
                  _T2CON 000FBA           __CFG_DEBUG$OFF 000000          __end_of___lwdiv 1730  
        __end_of___lwmod 17FE                    i2l176 008C          ___awdiv@counter 0013  
                  _TMR1H 000FCF                    _TMR1L 000FCE                    _TRISB 000F93  
     __size_of_UART_INIT 0020        __end_of_ADC_10bit 17BC           __CFG_FCMEN$OFF 000000  
        __end_of_lcd_cmd 1926       __CFG_MCLRE$EXTMCLR 000000            ___ftpack@sign 0013  
                  main@b 006F                    _pwmut 0086           __CFG_BOREN$OFF 000000  
                  tablat 000FF5                    status 000FD8            show_values@PV 0018  
          show_values@SP 0016             lcd_writesc@s 0010          __initialization 185E  
           __end_of_main 0C88             __end_of_init 1618                   ??_main 0068  
          ___fttol@sign1 0060                   ??_init 000F             ?_LOW_BATTERY 0001  
          __activetblptr 000001            main@bor_varde 007A                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADC_HB 0043  
                 _ADC_LB 0045                   _ADRESH 000FC4                   _ADRESL 000FC3  
                 _CCPR5L 000F55         ___awdiv@dividend 000F                ??_PWM_OUT 0066  
                 _ANSELA 000F38                   _ANSELB 000F39                   _ANSELC 000F3A  
       __end_of___ftpack 1354                   i2l2403 008A           __CFG_WDTEN$OFF 000000  
                 _INTCON 000FF2         __end_of___lwtoft 18CE                   _SPBRG1 000FAF  
                 _PWM_HB 0047                   _PWM_LB 0049                   _TXREG1 000FAD  
         __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000        __end_of_UART_INIT 18EE  
       __end_of_lcd_init 159C         __end_of_lcd_goto 1918                   ___ftge 1488  
              ??___awdiv 0013                ??___ftadd 0032           __CFG_STVREN$ON 000000  
              ??___awmod 0013                ??___ftdiv 002F                ??___ftneg 002C  
              ??___ftmul 0020                ??___ftsub 003E                ??___fttol 003C  
              ??___lwdiv 0013                ??___lwmod 0013                   clear_0 1864  
                 clear_1 1870         ___awdiv@quotient 0015          ___awmod@divisor 0011  
        ___awmod@counter 0013                   main@PV 0073                   main@SP 0071  
              ??_lcd_cmd 0010                   main@bv 007D    ___ftmul@f3_as_product 0024  
   __size_of_lcd_writesc 002A             __mediumconst 0000        PWM_OUT@duty_cycle 0041  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
        __CFG_HFOFST$OFF 000000           show_values@PV1 001C           show_values@SP1 001A  
           ?_show_values 0016               __accesstop 0060  __end_of__initialization 1876  
             ___ftadd@f1 002C               ___ftadd@f2 002F               ___ftge@ff1 000F  
             ___ftge@ff2 0012               ___ftdiv@f1 0029               ___ftdiv@f2 002C  
             ___ftdiv@f3 0033               ___ftneg@f1 0029               ___ftmul@f1 001A  
             ___ftmul@f2 001D               ___ftsub@f1 0038               ___ftsub@f2 003B  
             ___fttol@f1 0038           __pcstackCOMRAM 0001               ___lwtoft@c 0017  
     __size_of_lcd_clear 001A       __size_of_lcd_write 0068               __pbssBANK0 0080  
        __CFG_PLLCFG$OFF 000000                  ?___ftge 000F               _gammal_fel 0080  
                _CCP5CON 000F54                ?___ftpack 000F                ?___lwtoft 0017  
   __size_of_LOW_BATTERY 005E                  _SPBRGH1 000FB0                ?_lcd_init 0001  
              ?_lcd_goto 0001             _gammal_pwmut 0083                  _PWM_OUT 1730  
              _ADC_10bit 1778                  __Hparam 0000                  __Lparam 0000  
      __end_of_lcd_clear 1908          __size_of___ftge 0090                  ___awdiv 1354  
                ___ftadd 0C88                  ___awmod 13F8                  ___ftdiv 105A  
      __end_of_lcd_write 1680                  ___ftneg 1884                  ___ftmul 0F6A  
                ___ftsub 17FE                  ___fttol 0E34                  ___lwdiv 16DE  
                ___lwmod 17BC             __psmallconst 0600                  _channel 004D  
                __pcinit 185E               ??___ftpack 0014                  __ramtop 0600  
                __ptext0 0630                  __ptext1 113C                  __ptext2 17BC  
                __ptext3 16DE                  __ptext4 11F4                  __ptext5 13F8  
                __ptext6 1354                  __ptext7 1518                  __ptext8 1918  
                __ptext9 18EE                  _lcd_cmd 1918               ??___lwtoft 001A  
           __size_of_isr 00BE         ___awmod@dividend 000F               _duty_cycle 004B  
                _raknare 004E                  _tiondel 0050               ??_lcd_init 0011  
             ??_lcd_goto 0010               ?_ADC_10bit 000F     end_of_initialization 1876  
   __size_of_show_values 00B8                _RCSTAbits 000FAB                  postinc0 000FEE  
              _UART_INIT 18CE                _PORTAbits 000F80                _PORTCbits 000F82  
             _show_clock 11F4                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94              _CM1CON0bits 000F79              _CM2CON1bits 000F77  
            ___ftdiv@exp 0036                _TXSTAbits 000FAC               lcd_write@c 000F  
            ___ftmul@exp 0023           __end_of___ftge 1518               ?_UART_INIT 0001  
          ??_lcd_writesc 0012      start_initialization 185E              __end_of_isr 00C6  
            ??_ADC_10bit 0011         ADC_10bit@channel 0013                 ??___ftge 0015  
            ?_show_clock 0001        __size_of___ftpack 00A8              __pbssCOMRAM 0043  
      __size_of___lwtoft 0024      __end_of_lcd_writesc 185E            __pcstackBANK0 0060  
    __end_of__stringdata 062E                 ?_PWM_OUT 0041        __size_of_lcd_init 0084  
      __size_of_lcd_goto 0010                _main$1938 006C         ___lwdiv@dividend 000F  
              __pintcode 0008                 ?___awdiv 000F                 ?___ftadd 002C  
               ?___awmod 000F                 ?___ftdiv 0029                 ?___ftneg 0029  
               ?___ftmul 001A                 ?___ftsub 0038                 ?___fttol 0038  
               ?___lwdiv 000F                 ?___lwmod 000F              ??_UART_INIT 000F  
              _lcd_clear 18EE         __CFG_PRICLKEN$ON 000000            ??_LOW_BATTERY 0012  
               ?_lcd_cmd 0001                _lcd_write 1618              __smallconst 0600  
               _CCPTMRS1 000F48         ___lwdiv@quotient 0013                 _LATBbits 000F8A  
               _LATCbits 000F8B      __size_of_show_clock 00B8                 _PIE1bits 000F9D  
               _PIR1bits 000F9E               ?_lcd_clear 0001              _lcd_writesc 1834  
             _ADCON0bits 000FC2              __stringdata 0601               ?_lcd_write 0001  
              main@count 0075      __end_of_LOW_BATTERY 16DE            ??_show_values 001A  
       __size_of_PWM_OUT 0048                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600         __size_of___awdiv 00A4         __size_of___ftadd 01AC  
       __size_of___awmod 0090         __size_of___ftdiv 00E2         __size_of___ftneg 0026  
       __size_of___ftmul 00F0         __size_of___ftsub 0036         __size_of___fttol 0136  
       __size_of___lwdiv 0052         __size_of___lwmod 0042                 ___ftpack 12AC  
               ___lwtoft 18AA               _ANSELCbits 000F3A         __size_of_lcd_cmd 000E  
        ___lwdiv@divisor 0011          ___lwdiv@counter 0015                 __ptext10 159C  
               __ptext11 18AA                 __ptext20 18CE                 __ptext12 0E34  
               __ptext21 1730                 __ptext13 17FE                 __ptext22 1680  
               __ptext14 0C88                 __ptext23 1834                 __ptext15 1884  
               __ptext24 1908                 __ptext16 0F6A                 __ptext25 1618  
               __ptext17 1488                 __ptext26 1778                 __ptext18 105A  
               __ptext19 12AC                 _lcd_init 1518                 _lcd_goto 1908  
          __size_of_main 0658            __size_of_init 007C      __end_of_show_values 11F4  
            ??_lcd_clear 0010             ??_show_clock 0017              ??_lcd_write 000F  
            _LOW_BATTERY 1680                 intlevel2 0000         ___lwmod@dividend 000F  
           _VREFCON0bits 000F42       __end_of_show_clock 12AC          ___lwmod@divisor 0011  
        ___lwmod@counter 0013              _show_values 113C       __size_of_ADC_10bit 0044  
